clean up tests etc now that should js has been upgraded in https github com tryghost ghost pull 6464 should js was upgraded to new version with better api as result of this change there are some extra lines which can be removed the first is the jshint declaration which appears at the top of many files example https github com tryghost ghost pull 6464 files diff 4fdea5016a3fba533bd0f17df90299bcr2 which looks like jshint expr true this was because the should expressions looked weird jshint complained the new syntax solves this so the declaration isn needed the second is the `should equal true true line example https github com tryghost ghost pull 6464 files diff 4fdea5016a3fba533bd0f17df90299bcr8 which was also another fix for jshint should weird syntax there one other clean up task to do as well update greenkeeper ignores https github com tryghost ghost blob master package json l109 to remove `should` >>>beginner fix_wanted tests
admin error instead of 404 for post not found when no posts are available if you try to view post by id when there are no posts available an error appears in the console and ghost displays 500 error steps to reproduce delete all your content try to view valid post id ghost 200 see 500 error and the following in the console http puu sh n7o6g png this is pretty edge case but would be nice to fix technical details ghost version master latest commit 7c47249 >>>bug ember fix_wanted
move `builtfilesexist` check into utils startup check js think that the `builtfilesexist` check should be moved out of the server index boot flow and into the startup checks which live in `server utils startup check js` can see any reason why this needs to live in `core server index js` it depends on single key from the config but so do other startup checks it also makes sense to me to do this particular check quite early on if the files aren present there not much point trying to do anything else wink so placing it after the `contentpath checks makes sense imo this will also result in it not needing to be translated which as console warning don think it should be anyhow >>>beginner fix_wanted server
bug unable to transition from new post to tags screen steps to reproduce click the new post link in the sidebar click the tags link in the sidebar nothing happens this error is shown in the console `uncaught error assertion failed when ember selectize is in multiple mode the provided selection must be an array this is bug because you should be able to transition to the tags screen from the editor screen it also puts you in state where it not possible to add new tags via the psm tags input technical details ghost version master latest commit c9e0a70 client os os browser chrome 48 2564 103 64 bit >>>bug ember
migrations use raw sql to extend our text fields since forever https github com tryghost ghost issues 601 we ve been wanting to perform some more complex migrations particularly around increasing the length of text fields unfortunately knex doesn provide way to do this https github com tgriesser knex issues 46 love to get these features added to knex but ve not figured out how to move forward within the refactors and planned internal apis of knex for most projects missing migration isn too tricky as they can just write sql for us it poses problem as we have to be able to perform the migration on different types of database mysql sqlite3 postgres by focusing in on the need to increase some field lengths think we can hack this into ghost itself there are two main types of text field that need to have their lengths increased `text` and `string` in our schema both have `maxlength` and `text` fields also have `fieldtype` usually set to `medium` but as of 6302 will also have `long` data types below are the details of how these translate into sqlite mysql and postgres sqlite treats both `text` and `string` exactly the same ignores `fieldtype` on text fields and does not use the `maxlength` `maxlength` is used in server side validations which prevent data loss the default maximum length of any field in sqlite is 1billion 000 000 000 or 1gb https www sqlite org limits html max length mysql `text` fields can have one of four sizes of which `mediumtext` and `longtext` are the two we use `mediumtext` is maximum of 16 777 215 we use this to set the `maxlength` so server side validations prevent data loss database errors `longtext` is maximum of 294 967 295 however this is 4x longer than sqlite postgres can handle under normal circumstances so we use `maxlength` to restrict it to 1billion `string` fields are called `varchar` in mysql and postgres they have very specific length and so `maxlength` from our schema is used to set hard limit in the database as well as in the server side validations the maximum the limit on varchar can be used to be 255 same as `tinytext` and is now 65 535 same as `text` postgres `text` has no types and no specific limit although postgres field limit is very similar to sqlite3 https wiki postgresql org wiki faq what is the maximum size for row 2c table 2c and database 3f `string` fields are `varchars` and again have specific hard limit the maximum that limit can be is 1gb again how to alter data types because of the funny rules between the specific databases we end up with the following rules for altering data types to change the length of `text` field we only need to run an alter statement in mysql to increase the size of posts html field `alter table posts modify column html longtext simply increasing hte maxlength property in the schema will increase the size of data that can be sent to postgres and sqlite3 the only thing to do is test what happens at the boundaries and try to make sure that our maxlength prevents us from getting database errors to change the length of `string` field we need to run an alter statement in both mysql and postgres and the statements are believe almost the same to increase the posts meta description to 1000 characters mysql `alter table posts modify column meta description varchar 1000 pg `alter table posts alter column meta description type varchar 1000 to change from `string` to `text` type uses the same commands and again only needs to be done for mysql and postgres given that sqlite3 is usually nightmare for implementing column modifications this makes the work much easier as for sqlite3 the migration will be noop implementing migrations with all of this knowledge believe that we can implement new migration for changing the data type on text based columns only the migration should detect changes in type from `string` to `text` changes in `maxlength` changes in `fieldtype` it should then be able to enumerate the change as being one of either increasing the length of `text` field increasing the length of `string` field changing `string` field to be `text` field if the change is decrease in length or changing from `text` to `string` it should output an error message as these migrations could result in data loss it should then be possible to detect which database is currently configured and to determine the correct raw sql statements to run if any getting it done more than happy to look into the work needed here but would love someone with more postgres experience to help also love to have volunteer for testing the maximum lengths of field in postgres sqlite3 to see if it safe to set these to `1000000000` or if the maximum should be smaller than this >>>data fix_wanted server
sprint epic 9th 23th february editor new editor demo in labs kevinansfield codemirror card and image uploads continuation from previous sprint boom fire uploader js and refactor our image upload components kevinansfield editor finalize codemirror card to highlight additional requirements for card apps addons kevinansfield editor initial image card kevinansfield editor look into inline block vs block cards eg images could be inline so they can be mid paragraph vs fully featured markdown editor that has to be completely separate section kevinansfield hashtags finish up data version 005 6301 erisds hashtags in labs 6165 erisds channels wrap up tests for 6469 erisds post scheduling wrap up cron adapter 6413 jtwebman publish remaining issues once cron adapter api is tied down erisds timezone issue clock10 6406 aileencgn other finishing up initial tour demo acburdine experimentation with validations refactor acburdine finish adapter writeup erisds>>>epic
update server side validator js dependency and fix deprecation warnings once we update to the latest version of validator it will start outputting deprecation notices for all the places where we are incorrectly passing validator non string value validator only validates strings see here https github com chriso validator js strings only the warnings output during the tests look like this there are quite few `validator deprecated you tried to validate number but this library validator js validates strings only please update your code as this will be an error soon core server data validation index js 159 39` this is an indicator of something we re doing very wrong the deprecation notices will be very helpful for locating all the places it is happening and getting rid of them however don think we should upgrade without also fixing the issues as this will result in lots of extra output in the test server console that is just confusing if you don know what it is please note we use special convention for the title line in commit message changing dependency >>>beginner fix_wanted server
remove jquery ui and selectize dependencies we are currently bundling large dependencies in the form of `jquery ui` and `selectize` `ember cli selectize` jquery ui is only used for drag drop of the navigation items and re ordering of tags selectize works well for our current use but is bloated due to needing to replicate lot of functionality internally that ember is much better at solving as well as needing lot of sometimes flakey and inflexible glue code for communication and data munging between the jquery plugin and ember our current and future use cases would be better served by switching to the much more lightweight and flexible `ember power select` `ember sortable` combo ember power select http www ember power select com offers very composable and flexible suite of components that work directly with ember data structures so it will make our future plans for extending the search bar lot easier todo switch navigation item drag drop from `jquery ui sortable` to `ember sortable` https github com tryghost ghost pull 6468 switch tags input from `gh selectize` to `ember power select` kevinansfield switch `gh search input` from `gh selectize` to `ember power select` remove `jquery ui` additional plugins and `selectize` dependencies>>>ember epic
bug with reordering deletion in navigation page found reproducible bug in the navigation page that could potentially allow user to delete more entries than they intended actual results after some combinations of list reordering steps the list gets into bad state where attempting to delete single row actually ends up deleting multiple rows expected results clicking the delete icon for row should delete only the intended row nothing more or less steps to reproduce create five entries aardvark bat cat dog elephant move dog into the second position above bat move elephant into the third position above cat delete the fourth item bat at this point three rows have been deleted instead of one reproducibility 100 can consistently reproduce this with the steps described other details using the hosted blogging platform on ghost io not the self hosted distribution can tell what version is running the meta `ghost config environment` shows version 26ea9ad8 but that doesn match up with commit in this repo >>>bug ember
update supertest dev dep to the latest version when attempting to update supertest from it resulted in new error being thrown from our tests believe this is due to the underlying version of superagent being upgraded at this point think this is highlighting an issue with our tests although it may be bug it needs investigating to reproduce in package json set supertest to v1 run `npm install supertest` run `grunt test functional routes api public api spec js` the following is output all other tests appear to pass >>>fix_wanted tests
upgrade should js dev dep to the latest version we re currently on version of should js https github com shouldjs should js version which is the next version has breaking api changes https github com shouldjs should js blob master history md 700 2015 06 18 these mean that all assertions such as `should be true` must now be function calls `should be true this is to prevent false positives instructions on how to upgrade the codebase for and can be found on the should wiki https github com shouldjs should js wiki breaking changes don think there are any changes in that affect us the work to check through and make sure all of our tests use the same correct is fairly big task the should docs say there no real need to migrate live project but think we could benefit from the newer version of the api being more consistent >>>beginner fix_wanted tests
navigation ui revisit auto adding trailing slashes http puu sh mtfmp png the original implementation of the navigation ui automatically added trailing slashes to urls however this resulted in issues with knowing when to add them or not add them and the behaviour got reverted amongst the many small issues we had with our automatic url updating think we now have it working much better not changing urls to be absolute ghost urls when they re not meant to be in few very strict cases it would be good if we could auto add the slashes again to prevent 301 redirects from happening as much as possible if the url entered is relative to the ghost blog including any subdirectory the url entered doesn include or ideally we have way to verify that the url entered is valid url for the blog and long term we ll likely add way to do that as well as autocomplete etc short term think these rules are enough to make it safe to add slash but it warrants fair bit of testing >>>ember fix_wanted
regression unable to reset password when trying to reset your password ghost shows the message your password must be at least characters long regardless of whether the password field is filled in or not steps to reproduce go to ghost sign out if you re already signed in fill out your email address but not password hit reset the button spins and then you get the error your password must be at least characters long try entering an incorrect char password still get the same error http puu sh msvph png technical details ghost version master >>>blocker bug
bug nav current misses trailing slashes https blog ghost org tag inspiration inspiration should receive class of `nav current` as all the other tags do when selected but for some reason it does not bug >>>bug
post scheduling cron adapter for full overview of the spec please see post scheduling 101 https github com tryghost ghost wiki post scheduling 101 and the epic parent issue https github com tryghost ghost issues 6399 the role of the cron https github com tryghost ghost wiki post scheduling 101 the cron is to be responsible for keeping time in reliable way this should be implemented as pluggable replaceable adapter so that different environments can drop in their own implementations based on their requirements adapter layer messages from the scheduler the adapter layer needs to define the set of methods that cron adapter must implement these should provide simple api for scheduling rescheduling and unscheduling jobs the cron can expect to be passed the following information the time the job is scheduled for datetime or cron time the api uri to call at the given time the uri to call passed from the scheduler will be unique to job such that it possible to determine which item is being re un scheduled the adapter will need to receive the details of the client id and secret it should use to authenticate its calls to the api uri retrieving info from the scheduler the scheduler also provides way for the cron to retrieve information about scheduled jobs in the form of an api endpoint see here https github com tryghost ghost wiki post scheduling 101 providing information this is so that it can do some initial processing when it is first started or recover from failure it may make sense for this endpoint the client id and secret to be provided to the cron when it is constructed note that ghost api endpoints can be used via method call or http defining the active adapter in very similar way to the storage adapter we need way to determine which adapter is in use and to pass any configuration that the adapter needs configuration should follow the same pattern as storage https github com tryghost ghost wiki using custom storage module configjs ideally we also have way to check that provided adapter implements all of the required methods or otherwise falls back to the default we re looking at moving towards having adapters be true npm modules there was also plan to refactor the storage adapter so that the base file was an npm module that would be required by any implementation of it see example implementation https github com vdemedes ghost storage base think it worthwhile considering this approach for the cron adapter even though it not as complex as the storage adapter default cron implementation the intention for the default cron is to make use of the node cron https github com ncb000gt node cron module to handle scheduling jobs using the hybrid strategy https github com tryghost ghost wiki post scheduling 101 strategy hybrid run job at regular interval which asks the scheduler for items which were missed scheduled in the past or are due before the job runs again the items returned will then be scheduled to happen at the right time the interval should be 5minutes by default but this should ideally be configurable in config js as part of an initial implementation it would be useful to test out how node cron works when used with 100s 1000s of jobs and if it can handle that sort of scale the default cron should send requests to the scheduler uris at the correct time and listen for the response if it gets 200 or 404 we can consider the job done if the response is an error it would be preferable to retry times at sensible interval before giving up >>>server
authentication not persisting on ghost and master finding my authentication sessions are not persisting they should keep me signed in for week however am repeatedly finding that am signed out have had my local blog running for at least day and keep having to sign into it similarly struggled to post this week meeting update on the dev blog as kept getting signed out but not getting the reauth modal the editor would simply stop updating which think is fixed now don have clear reproduction case but from loose observation got signed out of dev ghost org twice whilst using it yesterday morning but when go back now still have access perhaps there something to do with keeping the editor open which causes it >>>bug
add use global blog timezone it time clock10 for us to finally add proper timezone support to ghost the original main issue for this with great deal of discussion is here https github com tryghost ghost issues 1265 other related issues which may or may not be helpful add timezone dropdown to settings 2360 determine the best list of time zones for use in ghost 2359 an ancient pr 2387 the timezone problem the problem we face with timezones revolves almost entirely around published dates take the following scenario user in utc san fran opens their post settings menu and sets the published at date to be 8pm on dec 31st 2015 ghost correctly stores that as 4am jan 1st 2016 utc the blog is set to use casper which doesn have localisation in the theme they share their post straight away and all the readers see it marked as published in the future this gets more confusing when post scheduling comes into play take the example of san fran startup blog they like to publish posts at lunchtime for their readership which is mostly also in san fran they hire writer in singapore who is in utc the writer creates their post and sets the published at date to be 12 30pm lunchtime on feb 1st 2016 date that is in the future ghost correctly stores that as 30am feb 1st 2016 utc the scheduler will publish the post at 30am feb 1st 2016 utc which lunchtime in singapore but for the san fran readership that 30pm on the previous day meanwhile the post itself will output on the frontend saying it was posted at 30am there are two underlying problems here there no way to tell ghost what timezone to use when outputting date in your theme other than using localisation in the theme http dev ghost org local dates themes or anywhere else that date might be output when you set date in the psm there no way to know whether that using your timezone the server timezone or the blog timezone which doesn exist yet it actually uses your own timezone but then stores utc which makes things work sort of correctly but is confusing we re going to solve this the same way that twitter tumblr wp slack etc all do add setting to the general settings and use this to output all dates everywhere including when setting the published at date the timezone setting the timezone setting itself will take the form of dropdown list exactly the same as you see in tumblr or slack tumblr http puu sh mllvy png the setting should exist under general settings in the ghost admin this setting should be dropdown list the format should be utc list of cities` just like tumblr the list should contain exactly the same entries as tumblr the default should be gmt london the closest real tz to utc and the middle of the list the text under the dropdown should read the local time here is currently hh mm am pm the time should reflect the tz selected and should ideally tick over each minute like on buffer the post settings menu in the post settings menu the date picker needs to be updated to use the new global blog timezone instead of the user timezone that means if in utc and login to my blog which is set to gmt when create new draft the psm should show me the time in gmt not in utc equally if set post to publish at 2pm this should be 2pm gmt not 2pm utc 12pm gmt the date helper there are actually date helpers in ghost core server helpers date js used in themes core client app helpers gh format timeago js used in the admin panel both of the date helpers need to be updated to take the timezone into account as result the date output should always be correct according to the blog timezone >>>server settings
sprint epic 26th jan 9th feb more work on the tour feature 5168 acburdine adapter writeup erisds channels finishing up metadata refactoring 6186 jtwebman dynamic routing for channels pr 5091 erisds post scheduling finish writing issues erisds timezone issue clock10 6406 aileencgn cron adapter 6413 jtwebman new editor and image uploads boom fire uploader js and refactor our image upload components kevinansfield editor finalize codemirror card to highlight additional requirements for card apps addons kevinansfield editor initial image card kevinansfield editor look into inline block vs block cards eg images could be inline so they can be mid paragraph vs fully featured markdown editor that has to be completely separate section kevinansfield >>>epic
feature post scheduling the full spec explanation for post scheduling can be found in the post scheduling 101 https github com tryghost ghost wiki post scheduling 101 wiki doc tldr the first iteration of post scheduling in ghost will add via very minimal ui change the ability to schedule post to be published at future date and time as part of this work we will solve the technical issues around scheduling in generalised and extensible way via an adapter which handles the work of keeping time default adapter will be added to ghost with clear api for creating custom adapters tasks api ghost to should accept `scheduled` as post `status` validation issue add new events to post model for scheduling issue ensure that the `published` vs `not published` logic is correct throughout the application post previews permissions issue new backend implement the scheduler issue cron adapter issue 6413 ui make published at date work with timezones issue 6406 date input improvements issue allow setting future dates scheduling posts issue note custom adapter will be needed for cache busting performance at on ghost pro so we ll need to be little careful with the release of this feature >>>epic feature
deprecations thrown when content screen changes from mobile desktop issue summary the `activelinkwrapper` mixin is causing `render double modify` deprecations to be thrown every time the `previewishidden` property changes steps to reproduce visit the content screen with the browser at desktop width open web inspector resize the browser to mobile widths note that `ember views render double modify` deprecation warning is thrown for every item that is in the content list technical details ghost version master browser all>>>bug ember fix_wanted
regression unable to access tags list on mobile issue summary previously when navigating to the tags settings screen at mobile sizes the tag settings header was modified with link that navigated back to the tags list this no longer works steps to reproduce visit the tag settings screen resize the browser window so that only the settings form for the currently selected tag is shown note that there no link back to the list view technical details ghost version master browser all>>>bug ember fix_wanted
posts post route doesn 404 on invalid id description repro loading ghost 9999999` neither 404s nor redirects it simply displays the top loaded post but leaves the url specs chrome 48 latest master>>>ember
invite your team image is squished repro setup blog and on step two you ll see squished image specs latest master `e5e375057e7b8ed0ec797775a962553a57f18588` chrome 48>>>beginner blocker bug css
regression admin should not error if active theme is not present this is regression and recurring bug https github com tryghost ghost issues 5155 https github com tryghost ghost issues 3694 the bug is identical to https github com tryghost ghost issues 5155 in master you get the `error arguments to path join must be strings` error when trying to load ghost if you delete the active theme steps to reproduce stop ghost delete the active theme start ghost visit ghost see the horrible error message expected behaviour the admin panel should function as normal the server logs should report an error technical details tested on the latest master the fix for this needs to include test as this keeps regressing >>>bug fix_wanted
consider swapping busboy for multer it would be good to see an investigation into the viability of swapping busboy https github com mscdex busboy for multer https github com expressjs multer busboy has complex api and requires us to have quite lot of our own code multer is simpler to use multer is also under the expressjs repo which lends it some extra credence however have no idea which is least buggy or most actively maintained or if multer is suitable replacement for our use cases it would be good to look into both properly investigate and try out the switch and see if it worthwhile change >>>fix_wanted server
update bluebird dependency ghost currently depends on bluebird v2 10 bluebird has progressed on to v3 which has number of fixes improvements and deprecations see what new in http bluebirdjs com docs new in bluebird html for summary of the deprecations and breaking changes as part of the upgrade of the dependency the codebase needs to be combed for breaking changes and deprecations and these should also be updated to use the newer tools or features note we now use convention for the title line in commit message changing dependency >>>fix_wanted server
bug parse filter incorrectly issue summary was trying to use filter attribute in get helper and found it can generate the correct query statement note maybe this issue is related to gql steps to reproduce the following code will generate the expected query statement while this one will generate the wrong query statement but this work as expected think this behavior is really strange technical details ghost version client os windows 10 server os windows 10 node version 10 41 browser chrome 47 2526 106 database sqlite 3>>>api bug
revisit post i18n preinstall script following on from 6070 and the discussion here https github com tryghost ghost pull 6070 issuecomment 170977126 we need to consider whether it the correct approach to have so many dependencies installed via the preinstall script the existing preinstall script has already lead to some interesting install issues and like to make installing ghost easier rather than trickier additionally as these errors are output to the console not in the ui think it safe to leave them untranslated in future we can ensure that the error codes and error messages lead to translated docs and troubleshooting guides >>>i18n installation server
add preview link to post saved notification for drafts saving published post adds view post link to the notification it be nice to do the same for drafts but with view preview >>>ember
sprint epic 12th 26th january new editor demo over the next weeks we want to get the demo to point where we can use it to determine our next steps this will mostly be kevinansfield working in labs and allowing users to edit old new content old content via loading in markdown card update partially completed initial implementation of markdown card initial ui for adding and removing cards meaning content sections when editing post not installing uninstalling cards wink using the implementation of the markdown card to come up with options for allowing custom cards to be installed uninstalled update adding codemirror card to further flesh out card addon requirements post scheduling over the next weeks erisds will be putting together specs for the ui and pluggable backend to unblock post scheduling one of the most wanted http ideas ghost org forums 285309 wishlist filters top features development will likely not start until the next sprint spec for the ui spec for the backend pluggable hashtags the majority of the functionality for hashtags is ready and waiting in pr form we just need to complete some data migration work which is also needed for the new editor demo we should be getting all this merged in by the end of this sprint data migration 6301 first working version in labs 6165>>>epic
multiple ghost instances interfere with each other authentication v0 my company runs two separate instances of ghost served under the same domain by nginx after upgrading to v0 from v0 we noticed strange behavior where if you open both blogs each in separate tab but in the same browser it impossible to log in to both you stay logged in for second but then get immediately logged out after taking look we were able to find that ghost remembers authentication by adding an entry into local storage in v0 the key of this entry includes the url ghost is served at for example url of instance local storage key www spanishdict com blog ghost blog www spanishdict com blog traductor ghost blog traductor however in v0 this key becomes just `ghost` the effect is that if both blogs are open at once they override each other auth entry having the effect of always giving that entry the default value authenticated if it helpful in figuring out how to fix recreate this can provide access to our test environment with v0 deployed thanks for maintaining this project cc carsonbanov sandinmyjoints>>>bug
minor usability improvements for editor screen at the bottom of the editor screen in the ghost admin panel there are sections with the titles `markdown` and `preview` http puu sh mrpde png these are effectively the names of the sections above the left pane is where you type markdown and the right pane is preview of how the markdown will look recently we carried out some user testing and found new users clicked on those titles expecting something to happen also the markdown icon doesn make much sense if you don know what it is and the current sharable preview link is hidden in the psm so as short term improvement the following two changes would be great make the markdown text open the markdown help modal exactly the same as the markdown icon markdown modal http puu sh mrprz png make the preview text open the sharable preview in new window exactly the same as the preview link inside the post settings menu preview link http puu sh mrvm7 png >>>ember
are you sure you want to leave this page message appearing unneccessarily there is an easy to reproduce case in which the are you sure you want to leave this page message which indicates you have unsaved changes is appearing and should not be steps to reproduce go to the ghost admin hit new post do nothing except open the post settings menu hit content get the message no typing has occurred and no settings have been manually changed so as far as the user is concerned there should be nothing to change at this point note the following steps do not reproduce the message go to the ghost admin hit new post do nothing don even open post settings menu hit content technical details ghost version master >>>bug ember fix_wanted
support not in many to many relationship post tags this is heavily related to 6158 but also different there is currently limitation on using not when trying to posts by specific tag slugs get all posts which have given tag works get posts filter tag quick guide get all posts which don have given tag does not work get posts filter tag quick guide this bug only occurs if the posts which have the offending tag have multiple tags if there is only one tag per post then it all works fine the reason it will not work is that we join all tags to their posts and then look for rows which don match for posts with other tags they still get counted because they have another tag which is not the tag in question the solution is to use where not exists clause explanation in more detail here http stackoverflow com questions 14824168 selecting with not in and many to many relationship it going to be important to test the combo case mentioned here https github com tryghost ghost issues 6158 issuecomment 161427503 pretty carefully that is doing and not query >>>api bug
get ghost head and ghost foot to ignore remove handlebars comments ve noticed bunch of times that people copy snippets which include handlebars comments into the `ghost foot` and `ghost head` blocks in code injection the code injection blocks are currently treated as html and simply included inline we could add some magic to strip out ignore handlebars comments quite easily alternatively we could treat ghost head and ghost foot as templates and attempt to compile them as handlebars not sure what the pros cons could be here what do we do with errors but it may be worth exploring >>>themes
database schema fixtures migration v005 several of the new features we want to add require us to make changes to the schema fixtures so we re going to need to setup new data migration doing this for ghost is not as easy as we like but then again we don do it very often atm so optimising this process isn high priority still for this migration we need to make some changes and improvements to the system as well as the migration itself this issue documents two sections of changes must haves and nice to haves it basically log of all the outstanding issues with data and fixtures that we should change if we can as well as the things we have to do for upcoming features must haves these things need to be done for 005 schema add posts mobiledoc this is for the new editor spike 6255 add posts is private this is speculative as there high demand for certain posts being private change tags hidden to tags hashtag this is for 6165 add `visibility` as small string that defaults to public to posts tags users move the fix for the client secret from migrations index js into migration for 005 fixtures client api permissions refs 4175 4176 and 4177 code changes make it possible to remove column requires 6103 nice to haves it would be great if we could also do these things schema client trusted domains table should ideally have timestamps not sure if these can be easily added as we don have values for existing entries look at fixing slugs which contained or not sure if this is good idea as it would break old posts fix the field lengths 4134 maybe set markdown mobiledoc html to be long as well fixtures theme api permissions config api permissions audit any remaining missing api permissions apps code changes review the idea of switching to knex migrations 4824 review the issues here 4479 add tests for migrations code cleanup improvement around migrations fixtures smaller functions clearer naming etc inside the data folder the migrations fixtures utils and versioning folders all contain code which is almost exclusively to do with upgrading the data version data migration there probably more sensible way to structure these files migration commands js and utils really don make sense as structure migration index js contains monolithic functions which could be broken out renamed made smaller and clearer and unit tested ensure that all the functions which modify fixture this code https github com tryghost ghost blob a87715f68851a2937749fdfbb25e639274ae8d2b core server data fixtures index js l185 l185 are idempotent they won have any effect if run second time and make sure they re all clearly named and documented inside of fixtures index js are whole bunch of functions which perform data operations these should be broken out given better names checked for idempotency potentially unit tested change the through version https github com tryghost ghost blob a87715f68851a2937749fdfbb25e639274ae8d2b core server data fixtures index js l347 l347 fixture code to be dynamic rather than hard coded it be great to just register set of fixture migrations that have to happen at particular version and let those be handled without having to write extra code each time at the moment we have bunch of hardcoded rules for what to do when we go through version change which means writing bunch of new code each time we want to migrate again changing this to use convention would make lour lives much easier replace hard coded rules with simple convention for adding functions to run in order when we do migration >>>data
tag sitemap xml doesn include images think this is actually throwback to the fact that the sitemap was added before tags had the ability to have images added to them they now do and have done for some time so the sitemap code needs updating to include the image for tags think there is also an opportunity here to simplify the `createurlnodefromdatum` method which exists in the base generator plus the post page and user generator as they all have images now think there is some small amount of duplicated code that can be moved back to the base generator >>>bug fix_wanted
tag author rss feeds still available in private mode when blog is in private mode all of the rss feeds should be disabled at present the main rss route is disabled and is correctly showing 404 however the tag and author rss feeds are both still working if you have tag getting started and navigate to tag getting started rss this is expected to 404 but is currently displaying the rss feed >>>bug fix_wanted
ghost head throwing errors when used in errors hbs the errors hbs template which can be provided with ghost theme is used to render both 404 and 500 errors as this file can be used to render server side error information it should not extend layout file using all the fancy helpers from the default hbs template because if the error affects any of those systems the error page won be able to render for this reason the error template provided as an example https github com tryghost ghost blob master core server views user error hbs is minimal template many theme developers don realise this it not documented and so many themes have error hbs files which extend the default hbs as result helpers like ghost head get called whilst that is not ideal these helpers should cope at the moment ghost head throws errors when called from the error template this is just one of them ve seen the same error for slug and published at think the error depends on what the url structure is when the error happens as ghost head tries to do some work this error prevents the page from being rendered ghost hangs and the user sees this http puu sh mklu3 png navigating to another page will work ghost doesn fully crash but this is very far from ideal the quick fix here is to make sure that ghost head doesn try to do anything for the error page meta data isn needed here for the longer term 6186 talks about refactoring ghost head completely >>>bug fix_wanted themes
export fails to reimport when database view is present hi have discovered issue where if you have created database view made one to write my meta data in bulk when you export your ghost blog the view is included in the json export this then fails to reimport into either sqllite3 or mysql database the error is cannot read property uuid of undefined steps to reproduce create view in your mysql database here is the one used export your content using the standard function on the labs page open the json file the view will be seen on the top line the name of the view included in the data below is copy of my database user permissions mysql https cloud githubusercontent com assets 6475792 12094946 8cb89104 b303 11e5 8107 2bc5bed1d102 png when you try to reimport the file it fails with the error cannot read property uuid of undefined best wishes tom >>>bug fix_wanted
javascript freezing the browser have weird problem when play around in the back end the javascript becomes unresponsive and cant do anything it got the point that when was updating few articles had to use the quick search in browser get the edit url open that url in different browser edit the article then close the tab and start again can anyone suggest solution or the best way can track it down never come across this kind of problem before >>>bug ember
curly brackets not being filtered in post url noticed the generated post url didn filter out the curly braces as seen below ghost post slug allows curly braces >>>bug
mixed content issue for http rel next links in firefox issue summary firefox treats http rel next links as mixed content blocks those and displays yellow triangle on the green padlock in front of the url steps to reproduce in firefox visit https hannah wf notice that there is yellow triangle on the green padlock due to mixed content press shift f5 to open developer tools click on console the following is shown blocked loading mixed active content http hannah wf page view page source and notice this line expected result green padlock only actual result green padlock with yellow triangle technical details platforms where the issue observed ghost version browser firefox version 43>>>bug fix_wanted
blog title in admin panel as decimal number issue summary blog title in admin panel interpreted as number if prefix is 0x steps to reproduce change the name of the blog to 0xcd 205 in decimal for example refresh the page screenshot ghost https cloud githubusercontent com assets 16162622 12009267 6128e818 acb4 11e5 928f 6097b6bb7b96 png >>>bug fix_wanted
missing post tags when searching content via ghost admin issue summary tags are missing when searching content which leads to problem when re saving the post tags need to be re created each time steps to reproduce go to admin ghost` search for the post node image https cloud githubusercontent com assets 5131554 11943061 cd3e2ffa a7ef 11e5 85c1 3419f4b5d2e9 png click on the post open tags section all tags are missing except `node` tag actual result image https cloud githubusercontent com assets 5131554 11943102 1691e7e6 a7f0 11e5 849e 01de0d5ec3f4 png expected result image https cloud githubusercontent com assets 5131554 11943092 07f2fee6 a7f0 11e5 91ed df7990f544ac png additional observations once post editor page ghost editor id is re loaded or search repeated the issue is gone tags appear as expected technical details platforms where the issue observed ghost version client os mac os 10 11 server os ubuntu 14 mac os 10 11 node version 10 41 10 38 browser chrome version 47 2526 106 64 bit database mysql sqlite>>>bug ember
setup two fails with filestorage false config steps to reproduce change your `config js` so that you have `filestorage false` delete or rename your dev database then start restart the ghost server start the setup process fill in and submit step you should see an infinite spinner and the error `uncaught typeerror cannot read property blueimp fileupload of undefined` originating from `gh profile image` `willdestroyelement` method>>>bug
repeated 401s on the editor report back as server not available rather than offering another login issue summary the password reauth that pops up on the editor after session expires only gives you one chance to get it right if you typo your password rather than coming up again with password invalid give it another go ghost just gives up and shows server unavailable error on the repeated 401s repro go to ze editor kill your session hit save enter an incorrect password in the reauth modal hit save be sad you have to reload the page now specs ghost chrome 47>>>ember
500 422 error on tags started with number and hyphen after which worked when accessing the page of tag begin with number and hyphen whatever the tag exist or not for example https example com tag 2016 election 500 or 422 using the ghost demo error is returned when there no hyphen everything worked for example https example com tag 24hour and after remove the number and hyphen part everything works again >>>api bug
improve keyboard shortcut handling as we depend more and more on components and create additional more involved screens it become obvious that our current setup for shortcut handling has number of pitfalls namely it necessary to enable disable or change keymaster scope manually whenever an input has focus to avoid triggering global shortcuts when typing the current setup premise is that only routes have shortcuts meaning that components are currently adding removing shortcuts manually this has led to number of bugs and recurring regressions where either the keymaster scope or the registered shortcuts are not reset disabled correctly or ideally we would have either service that can be injected where needed or series of mixins suitable for use in routes controllers components such system should be able to automatically register remove shortcuts depending on the type of object they are attached to or provide method to easily hook in from the various lifecycle hooks that ember provides big plus point would be the ability to manage hierarchy such that one set of shortcuts can be added on top of another for modal and have the original shortcuts become active again once the layered set has been removed there are few existing solutions that look like they could either replace our existing solution wholesale or act as useful starting point for developing something tailored to our needs https github com null null null ember keyboard https github com yapplabs ember key responder https github com fabriquartz ember keyboard service https github com skalar ember keyboard shortcuts an interesting feature of couple of the above is the idea of filter or specifying shortcuts as non global whereby any keyboard events are ignored if the target is an input textarea or select >>>ember
password reset doesn complete the password reset form isn completing it job of resetting your password and logging you in with your new password filling out the form and hitting submit seems to send the data to the `submit function on the controller but it gets stuck somewhere after there doesn seem to be an ajax call and there no redirect >>>blocker bug
bug setting up ghost admin user just installed ghost locally on my mac when going through the install at `127 2368 ghost` on step decided to click the back button to change the blog title then when tried to go from step page to step page got the error you are not logged in when clicked the green button last step invite your team the only way to get back to step was to click on the green at the top of the step page which is not obvious to end user >>>bug
url field displayed twice for image upload with filestorage false steps to reproduce change your `config js` so that you have `filestorage false` click to edit the blog logo cover image add and save an image if you don already have one click to edit the image again if needed then click the delete icon click to focus the url input the url input will be be duplicated this only happens after deleting an existing image there is no duplication when adding an image to previously empty field double image url field https cloud githubusercontent com assets 415 11810727 2205977a a328 11e5 8038 6b85a1e087fb gif >>>bug ember
author page image tag is incorrect it takes the cover image hello have an issue since few months on author page can get author image cover the author image is always the same as the cover image while use both tags author page https cloud githubusercontent com assets 8741873 11808204 45718f88 a31f 11e5 882e ff56d7bd7bb8 jpg please have look at the ghost flat theme specifically the part https github com fabienwang ghost flat blob master partials head image hbs l16 >>>bug themes
unable to directly load post that not in the first page steps to reproduce ensure you have enough posts to require infinite scrolling on the content list 15 scroll to the bottom of the content list and select post that is only shown after infinite scroll has loaded more eg http localhost 2368 ghost reload the page or visit the url for the selected post manually you should see that the selected visible post is the first post in the list not the post that was requested if you scroll down and select the post that you tried to load you will be unable to view it expected outcome the requested post is shown the requested post is selected and visible in the posts list scrolling up down will load in the pages before after the currently selected post>>>bug ember
ghost incorrectly renders carriage returns in an html as elements think ve found bug in ghost whereby it rendering carriage returns in an html as elements directly before the table the following snippet of markdown this is paragraph table head table cell this is another paragraph should result in the following html this is paragraph table head table cell this is another paragraph but instead you end up with this this is paragraph table head table cell this is another paragraph there appears to be one for each carriage return in the ve put together working repro on my blog at http greg brant ghost io 2015 12 10 ghost blog table rendering issue tested in chrome 47 on ubuntu 15 10 safari on ios >>>bug editor
add `limit` `from` and `to` attributes for tags and foreach helpers both the foreach and tags helpers are used to loop through collections of data in ghost themes foreach allows for looping over any collection and executing template block for each item in the collection tags automatically loops through tag collection if there is one in the current scope context and outputs link for each tag in comma separated list both of these loops are little bit limited in that they loop over all the data without much control beyond things like the first` or odd` properties available inside the foreach list to give theme developers more control over their templates this proposal is to add `from` `to` and `limit` as attributes to both of these helpers the rules are as follows `limit` allows for setting how many items to loop over if there are not enough items the loop will have to stop early `from` determines the first item that should be output `to` determines the last time that should be output as `from` and `to` are explicit they take precedence over `limit` and if both are set `limit` will be ignored the default value for `from` is the beginning of the collection the default value for `to` is the end of the collection the result will allow for the following tags limit output just one tag tags from to also outputs just the first tag foreach posts from to outputs the first second and third post foreach posts from limit outputs posts starting from the 4th post foreach posts from outputs all posts starting from the third post until the end of the list foreach users to outputs posts until and including the 5th post the same as `limit foreach posts from to limit outputs just the 4th and 5th post note proposing`from` and `to` are both indexed not indexed that is we start at item not at item started writing examples with index which is normal for loop in js and it made lot less sense and started to confuse me just as was writing examples that not good sign so switched with index `to and `limit are equivalent with index `limit becomes equivalent to `to this is consistent with the first item being called first` and not zeroth` additionally we recently added number` property which is indexed because the default handlebars index` property was indexed which is not that useful however very open to hearing arguments for the alternative version add `limit` to tags add `limit` to foreach add `from` to tags add `from` to foreach add `to` to tags add `to` to foreach fix last` when using `limit` with foreach support negative indexes in `from` and `to` on both tags foreach `>>>fix_wanted themes
don use redirects where 404s would be more suitable in our pagination systems we try to do smart redirects so if you hit page you get page and if you hit page beyond the available pages you get the last page these are what google refers to as soft 404s the page doesn exist but the server responds with non 404 response code in this case it an uncachable 302 redirect followed by 200 this is case of seemed like good idea at the time probably not the right thing to do instead we should use 301 redirect any requests for page of channel to the base url of the channel and similarly for rss rss should 301 redirect to rss these are permanent aliases any other request to non existent page should respond with 404 >>>server
no indication of image loading when switching tags on slow connection whilst proxying through `ngrok` to an iphone ve noticed some odd behaviour with tag images appearing sticky steps to reproduce create number of tags with cover images ensure you re on slow connection or artificially crippled network clear your cache and refresh the admin page load the tags management screen browse through the tags without giving the cover images time to start loading fully load for the tags that have images you should experience the previous tags image still being visible despite the rest of the form changing sometimes the image gets completely stuck until you visit another tag then go back clicking on to tag with no image will immediately clear the preview expected behaviour image previews are immediately cleared when loading new tag potentially with some form of loading indicator if the new tag has an image >>>bug ember
failed to import schema with mysql utf8mb4 charset encoding it looks like `email` column of `users` table and `token` column of `accesstokens` and `refreshtokens` table by the mysql official document https dev mysql com doc refman en charset unicode upgrading html indexed varchar should be 191 or smaller number of characters see also http stackoverflow com questions 20123824 how can alter an indexed varchar255 from utf8 to utf8mb4 and still stay unde this is simple patch fyi full debug logs here >>>bug
no way to remove post background image if the height is too small hi while playing around with ghost tried to set very thin background image for my post the problem is that the preview is very thin too thin to have the trash button displayed so can delete the image without the trash button see the attached screenshot screenshot 2015 12 10 11 44 36 https cloud githubusercontent com assets 1942580 11707198 9d8bd646 9f33 11e5 8f6a b674a1758adb png edit after moving around in the ghost interface and coming back can now delete the image see the following screenshot screenshot 2015 12 10 11 47 06 https cloud githubusercontent com assets 1942580 11707217 e3a881b0 9f33 11e5 81b2 cca21ecba563 png so it no big deal but still bug yet cheers >>>bug css
strange editing behavior some key not working at some point of editing some keys stop to work enter all types of arrows is there some interference with keyboard shortcuts tried different pc and browsers same result very strange >>>blocker bug ember
sprint epic 8th dec 12th january for to land asap tags and foreach helper improvements 6205 publish date bug fix 6184 reduce no async helpers to reduce the no cases that cause `asyncid` to be output 5850 editor bug where certain chars can be typed 6192 pr review post data migration for hidden hashtag 6165 addition of client permissions any others maybe themes 4176 first pass at hash tags 6165 remaining tags and foreach helper improvements the remainder of the sprint holiday period will be used to spike experiment with the following things new editor advanced image features better upload optimisation management and more post filtering in the admin the next sprint hangout meeting will be on the 5th january >>>epic
filter content list by tag ve been working on spike of the filtering functionality of 6165 but it shown that there are number of issues that conflate to make this more than small job my current thinking of how this will all eventually come together use query params to filter content list `http localhost 2368 ghost filter tags getting started` limited to `tags for now initial model loading and pagination control will need to be moved into the controller as routes don have access to query params in ember at the moment believe that will be changing with routable components modify the auto complete search to recognise `tag or `tags then show list of all tags that can be further filtered as you type `tags get` would only show tags that match the term `get` on selecting one of the filter tags the url changes to include relevant query params and the `tag selected tag` filter is shown as token in the search field manually visiting filtered posts list via `http localhost 2368 ghost filter tags getting started` should automatically fill in the `tag getting started` filter token leaving the filtered posts screen should clear the search box so that it returns to it previous functionality on screens that support filtering change the search box placeholder to `search filter` add links to tags list on tags management screen that link back to the posts list with the relevant filter this would also be laying the groundwork for additional filter params `page true` and filtering other screens such as being able to filter the tags management list with `hidden true` one potential pain point is our current reliance on `ember cli selectize` for the auto complete search the addon is internally complicated limited due to it need to translate all things ember in to out of `jquery selectize` compatible structures and it reliance on selectize search methods our planned move to `ember power select` should open lot more power and flexibility in this regard but as that fair job in itself it may be necessary to come up with half way house in terms of features ease of use in the meantime >>>ember feature
improve seo structured data generation for more context see the frontend refactor epic 5091 at the moment the generation of seo data like the meta title and description and structured data the og and twitter meta tags and schema org json ld data is all buried deep within the theme helpers `meta title` `meta description` and `ghost head` the data that is output depends on number of factors such as whether the structured data has been disabled via privacy flag however the most important factor which determines what data is output is the context are we outputting data for single post or page or is this the first page of particular channel index tag or author or something else moving forward would like for the seo structured data generation to be moved into its own highly configurable and dynamic module it would probably live happily inside of server data xml for now along with the rss and sitemap functions as these things are all quite heavily related the aims of doing this are to make it possible easy to output structured data for new contexts custom channels to make the helpers as simple as possible ideally we like to be able to change `meta title` and `meta description` to be output by `ghost head` to resolve 4424 to vastly improve the level of configurability customisation possible the majority of the code which needs moving is that in `ghost head` the calculations for what the full `meta title` `meta description`also need to be moved ideally the pattern used for the `meta title` would become part of the configuration for context on getting request ghost should be able to easily determine the meta title and description for the context and then pass down that information to all further middleware rendering helpers grabbing the structured data to output should become function call right now we re just at the point where we have concept of channel config in the frontend controller slowly but surely we re moving towards the entirety of the frontend being dynamically generated from configuration ref 5091 as that progress happens progress on this issue should be able to happen alongside >>>fix_wanted server themes
select component raises error on change steps to reproduce log in as an admin load user page for non admin user use the select box to change the user role click save reload page expected result user now has their new role actual result upon selecting new role with the select box the following error is generated and the subsequent save does not update the role screen shot 2015 12 04 at 16 00 39 https cloud githubusercontent com assets 415 11594161 551a49f2 9aa0 11e5 8460 08dcfba1b18a png >>>beginner bug ember
convert feature controller to service we are currently using this feature controller https github com tryghost ghost blob master core client app controllers feature js to provide access to various feature labs flags throughout the app our use of feature flags has been limited so far so we haven run into many issues but increased use of labs settings will mean more and more areas will have logic involving feature flags there are couple of issues that can see with the current setup controllers cannot be injected into components which means that the `feature` controller needs to be injected into parent controller and then passed in through the template reading saving feature flags https github com tryghost ghost blob master core client app controllers settings labs js l14 l42 is distributed between both the `labs` controller and the `feature` controller propose converting the `feature` controller into service fixes issue and expanding that service to handle both reading and writing of labs feature flags fixes issue >>>ember
feature hashtags tags for structure workflow we ve made pretty huge progress in terms of all the new tag features that were outlined in tags 101 https github com tryghost ghost wiki tags 101 as well as massively overhauling all of the uis related to tags one feature we ve not looked at adding yet is adding two levels of visibility so that we can have concept of hidden tags this feature has been referred to as private tags however think it may be good idea to not use the word private as everywhere else private data explicitly refers to data that you must be authenticated to see draft posts vs published and this idea is not related to auth using hidden as that the name of the column in the database but system or internal might work too problem at the moment every tag you add to post is the same they all get listed on post when it is published and also get their own tag page archive that lists out all of the posts this makes perfect sense for tags which are meant to be front facing taxonomy but limits the system so that tags cannot be used for workflow or structure the idea of hidden tags is to make tags also useful for workflow and structure use cases example want to tag post with `needs review` once ve finished writing it so my editor can pick it up at the moment you can do this but you have to remember to remove the tag before publishing and there is also not good way to view all the posts marked with `need review` in the admin panel example want to implement link posts which just link out to another site using tag to mark my `link` posts so that my theme can handle them differently can tag all these posts as `link` and handle this in my theme however also get `link` output in the tags list and all of these posts appear on tag link which isn ideal implementation to solve this tags being set to hashtag will have two major impacts there will not be page at tag slug for this tag this tag will not be output by the tags helper the tag will still be returned by the api like any other tag and available to theme meaning it will still be possible to use has tag hashtagname to check if the tag is set on post one minor potential confusion point will be that any theme which has opted to cycle through tags manually rather than use the tags helper will show hidden tags these themes will need updating with unless hashtag condition inside their tag loops creating hashtags when adding tags in the editor there only way to specify the name rather than the type of tag to combat this and make adding hidden tags quick easy it would be great if this could be controlled using simple prefix needs review` any tag that has at the start of the name should automatically be marked as hashtag to resolve naming clashes in slugs between hidden and non hidden tags with similar names think it would make sense to prefix the slugs for any hidden tags auto created with with `hash `` so if already have `link` tag and create link` tag the slug for the first would be `link` and for the second `hash link` etc filtering in the admin ui to really complete the power of this new feature we need to be able to filter posts by tags in the admin ui there are two aspects to this which can think of showing posts which match by tag as well as title in the autocomplete search box being able to get from tag to filtered content screen list of the posts that match that tag think there are couple of potential investigations spikes to do here around what can be done with the autocomplete search content screen can we list posts by tag in the autocomplete results can we make it so that pressing enter on term rather than clicking an item in the dropdown results in filtered content screen list how does it feel to have this result in filter rather than direct go to resource action as it does now tasks prep add labs flag for internal tags rework the server side labs utility to be synchronous so that tags doesn become async bonus get config overrride working for client side labs again update db to have hashtag for tags rather than hidden when the labs flag is checked add new checkbox to tag management screen to mark unmark tag as hashtag filter the result from tags to not include hashtags return 404 from tags slug for hashtags create tags starting with as hashtag in the tag input component display hashtags in the content list other spike on the autocomplete content list filter to see what works easily and if there are any dependencies or other requirements here cleanup remove labs flag add proper tests for 404 tag and `tags read with hash parameter >>>epic feature
arabic titles are made using grave accents in url slugs giving an article an arabic title containing chars that doesn exist in english replaces it with grave accent which make issues with nginx and requires extra configurations and for arabic speaker it doesn make any sense to use them >>>bug
support and in many to many relationship post tags there is currently limitation on using and when trying to posts by specific tag slugs using or will work get posts filter tag quick guide tag spa so will in get posts filter tag quick guide spa however and will not work get posts filter tag quick guide tag spa the reason it will not work is that tags are only ever joined into posts once meaning there is only one tag per row as no row has multiple tags no row can match there are two potential solutions join tags once per item we need to check use an in and having count items query the first is more complex to do the latter has potential performance issues in mysql explanation in more detail here http stackoverflow com questions 1054299 sql many to many table and query>>>api bug
minify `ghost url api in production in we added the `ghost url api http themes ghost org docs ghost url api utility so that it is possible to build api urls this gets included via ghost head for people who enable public api in labs it is only tiny bit of javascript see here https github com tryghost ghost blob core shared ghost url js but we should minify it for production mode environments we should possibly also include it as an external request rather than inlining it so that the browser can cache it >>>themes
look optimising the ghost zip js file size the very first release of ghost was 7mb since then we were slowly growing up to 4mb in however the three releases have increased significantly faster at mb respectively almost all of this extra weight seems to be coming from vendor js although ghost js is also growing here table showing those main files and how they ve changed over the last versions version ghost js ghost min js vendor js vendor min js 951 692 460 776 873 560 270 938 064 897 514 160 379 867 420 503 156 730 518 014 381 850 421 394 418 668 585 806 108 228 484 640 not sure what strategies we can use to try to minimise this as realise it being bumped up by the inclusion of libraries some questions are there libraries addons we are using that could be swapped for something smaller swapping codemirror for prism could save us 300kb notes https ghost slack com archives dev p1440513068000038 are there any dev only dependencies getting included at all is there better minification library >>>ember
cannot upload user profile cover this happens on safari and chrome steps to reproduce go to admin team click on team member click on change cover upload file the file appears to be uploaded but nothing happens on the front end there an error message in dev console uncaught typeerror this complete is not function screen cap upload https cloud githubusercontent com assets 52500 11491932 fe98b668 9829 11e5 9185 05b1d86fbec2 gif technical details ghost version master latest commit c884e67 client os mac os 10 11 node version 10 40 browser chrome 46 2490 86>>>bug ember
revisit origin validation large part of the work to get public api access to be available involved implementing client authentication the ghost admin panel is client and is allowed to authenticate to the api via its very own client credentials as layer of security client authentication includes origin validation this means that we check that requests to the api come from permitted url these are the urls defined in `config js` and at the moment can be either `url` or `urlssl` if the origin validation fails the client is denied access this means that if at any time you try to login or access your admin panel from url which is not the url set in config js you will see an error and at the moment that error is not at all clear the problem at the moment the first you might know that this is affecting you is that you ll be unable to login the easiest way to reproduce this right now on standard dev install is to try loading the admin panel from `http 127 2368` rather than `http localhost 2368` and see that you can login http puu sh lskv4 png the `access denied` error message makes it look like your login has failed when in fact it was the admin client being denied access to the api to even try to log you in the only other things you might see are the client console error http puu sh lskvw png and server console error http puu sh lskwh png none of which gives you clear idea of what is wrong the solution there are few things that we can do to improve the user experience here the first thing is to update the error message to be as clear as possible both on the client side and in the server console the error should clearly state that the problem is due to the url not matching the one in config js something like access denied from url xxx please use the url configured in config js as this error is most likely to happen to people just setting up or developing on ghost using ngrok will cause this we should also make sure we output one of our colour error messages on the console this should be the error some context and how to find the solution access denied from url xxx please use the url configured in config js you have attempted to access your ghost admin panel from url that does not appear in config js for information on how to fix this please visit http support ghost org some new docs url as well as improving the error message it may also make sense to add both localhost and 127 as valid origins for `development` mode to account for this in the vein of having sensible defaults if anyone has any other ideas for sensible defaults please say at some point soon we will be adding ui for managing clients where you will be able to add any additional trusted domains that you want to be able to access your blog see 4177 improve the error message on the client improve the error message in the server logs add sensible defaults like localhost and 127 for dev mode>>>api blocker
bug alphabetical ordering is not consistent between dbs take the following strings photo audio video note that the first one is not capitalised but the other two are when ordering by names in sql this can be done in either case sensitive or case insensitive way case sensitive order is audio video photo this is used by mysql and postgres by default case insensitive order is audio photo video this is used by sqlite3 by default believe that the latter is the desired output in most cases and that case sensitive ordering is not the expected outcome don have much to base this on other than common sense the case of letter doesn really change what letter that is so if searching for something in an alphabetical list look for and in the same place this is slightly problematic for two reasons sqlite3 the development environment does the right thing or at least does what was expecting whereas mysql pg do not it is likely other developers using the api will fall into the same trap did thinking it does what you expect in one env and not realising the result will be different in other databases they really should be consistent to force mysql pg to do an insensitive order by we need to pass `order by lower name asc` we could do this by default for all orders or figure out which orders are strings and need to be made case insensitive however if we do this by default there no obvious well understood way to turn it back off solutions don have clear idea what the best way to solve this is but have couple of ideas idea make sqlite3 match mysql postgres by default force collate nocase for sqlite so that all dbs behave the same and use case sensitive ordering all resources have `slug` as well as name which could be used for ordering by something case insensitive not ideal but simple ish long term we can support adding `lower` and `upper` functions to our order syntax idea sensible defaults are best by default force case insensitive matches because this is what makes sense to anyone who isn computer scientist grin if almost noone wants case sensitive alphabetical order then it makes more sense to make it harder to do that rather than making the sensible thing hard so if all of our queries go off with `lower` automatically wrapped around attributes which are known to be test strings we need to create way for user to say don do case insensitive matches couple of different ideas for that are use mysql function assuming we add support for all the mysql functions that could be used in an order statement and that specifying one would override our default application of `lower then we can provide for using mysql function which doesn change the case unfortunately there is no mysql function which means original case but using no op function like `trim would work because it would get used instead of `lower and would not change the string that bit unintuitive though so we could also just make up our own mysql function `nocase or whatever we want to call it and use that to mean don apply lower but don apply this either cos it nonsense use character or symbol to specify case sensitive something like `order name asc or `order name asc could be used to indicate that case sensitivity should be used use the case of the property `order name asc does case insensitive order using the lower function `order name asc does case insensitive order using the upper function `order name asc does case sensitive order without applying function do something else love to hear more ideas conclusion am very much leaning towards sensible defaults are best think doing lower case ordering is the only thing that actually makes any sense which means figuring out how to turn it off is all we re left with genuinely not sure what the best mechanism for specifying turning it off would be using the case of the property seems elegant but bit side effect >>>api bug
bookshelf knex upgrade bookshelf knex did not get upgraded at the start of this release cycle this was because there was reasonable amount of work to do and got carried away with other work before completed it very much regret this as several of the filter include etc features ve been building into our model layer would have been simpler had had access to the newer features did try out upgrading to bookshelf knex it did not cause any test regressions and iirc ran the old casper js test suite against this the current versions are bookshelf and knex and so there been another significant update which warrants testing update bookshelf update knex at the start of the next release cycle want to get this upgrade done asap ll be using this issue to document everything that know can or needs to be changed as result of the upgrade bookshelf now has serialize http bookshelfjs org model instance serialize method that is called by `tojson` it should be possible to use the new structure to override `serialize` instead of `tojson` in places in our codebase and simplify our code bookshelf now has count methods which may be useful knex has new modify http knexjs org builder modify method that should make it easier to construct complex query builders from pre defined parts knex should be getting new `countdistinct` method we can use to replace some horrible `knex raw` code in the pagination plugin should be in knex knex now supports nested transactions may be useful for improving our post tag saving code knex has had significant improvements to the join syntax which we may be able to leverage things to be aware of the pool handling software has changed completely in knex since there are some open issues around pools and so some significant testing might be in order >>>data fix_wanted server
implement custom adapter to retrieve users via slug endpoint the user route https github com tryghost ghost blob master core client app routes team user js l10 currently loads all users then manually filters in order to pick out user by their slug as well as being inefficient not being able to query single user record via slug increases complexity in other areas such as the delete user modal https github com tryghost ghost blob master core client app controllers modals delete user js l6 l24 this can be solved by implementing custom adapter that examines the query and constructs the appropriate end point implement custom adapter see the tag adapter for an example test it works for single record query using the slug endpoint as well as multi record query against the standard endpoint simplify `team user` route simplify `delete user` modal if the user route can include the `post count` attribute then the whole query here can be removed >>>ember
accessing unknown tag shows 500 instead of 404 steps to reproduce visit http localhost 2368 ghost settings tags unknown making sure you don already have tag with the slug `unknown` wink you are shown the 500 error screen expected result 404 response from the api is handled gracefully you are shown the 404 not found screen screen shot 2015 11 19 at 16 08 29 https cloud githubusercontent com assets 415 11276039 5694080a 8ed8 11e5 80e1 b031c0fc9225 png >>>bug ember
checkbox labels can be cut off on mobile noticed new public api labs flag description is cut off on mobile screenshot checkbox labels have `white space nowrap` which means that it necessary to keep labels short in case they overrun screen edges at mobile sizes assuming this is because letting them wrap means that the wrapped text appears directly under the checkbox screenshot what is the desired display of checkboxes if the label is wrapped should the left edge of wrapped text be aligned instead of wrapping underneath screenshot cut off label img 1433 https cloud githubusercontent com assets 415 11247705 256db190 8e15 11e5 9c5e 269b69e359ae png screenshot wrapped label img 1434 https cloud githubusercontent com assets 415 11247710 29b44408 8e15 11e5 9788 6db7d1078f49 png >>>bug css
i18n harvesting client side strings this is part of the i18n project described in 5345 love to see some progress on this smile harvesting server side strings is already in progress see issue 5617 but we also need to start isolating strings inside the ember app this should be done using the ember intl http formatjs io ember addon this is big job as we have lots of templates and js files that have english strings which need to be moved to translations file and hooked up with ember intl so the first thing to do is to setup the ghost ember app to work with ember intl believe we should use the branch of the project as morficus showed in his proof of concept once this is done we can start working on translating individual files ve checked which files contain strings needing translating and this is what found core client app assets lib uploader js core client app components gh search input js gh upload modal js gh user invited js core client app controllers modals multiple files core client app controllers settings labs js core client app controllers setup multiple files core client app controllers team user js core client app controllers error js core client app controllers post settings menu js core client app controllers signin js core client app controllers signup js core client app html multiple files core client app mixins editor base controller js pagination route js core client app models user js core client app routes most routes have `titletoken` that should be translated some have alerts other strings core client app services notifications js core client app templates pretty much all template files have english strings that need to be isolated core client app utils ajax js titleize js how would we handle this util in regards to i18n core client app validators multiple files as you can see there lot to do here if you re willing to work on this feel free to leave comment stating the files you re translating if there anything missed please let me know to the ghost core team if this is not the right time for translating client side strings then we could close this issue for now and open it up again later >>>ember i18n
sprint epic 10th nov refactoring cleanup wrap up public api sprint epic 5976 items other blockers for release regression export throws access denied 6040 regression no re auth modal when saving editor with invalid session 6048 regression not redirected to sign in with invalid session 6047 this sprint modal refactor 5798 kevinansfield acceptance tests add outline files for each screen and fill in mirage config 6039 kevinansfield save buttons 5719 kevinansfield joins relations cleanup 5615 erisds>>>epic
improve 422 validation error responses our current validation error format not sure if this is consistent across the app looks like this this has couple of issues when attempting to consume on the client side it necessary to extract the invalid property name from the message string the message is not suitable for display within in line validations due to the above issues we don currently have anything in our ember data adapters to take the error response and normalize it so that the errors are automatically picked up by ember data ds errors and made available on the relevant model object there are two formats that are widely used with ember data and have built in support activemodelserializer format json api format http jsonapi org format error objects the json api format also allows for additional fields such as `code` for application specific error codes or the `meta` field that can contain completely custom data i18n if we are going to update our validation response format would it also be good time to make accommodations for `i18n` support to do so it would be best to provide key for the localisation lookup generic `validation too long` or more specific `post errors title too long` perhaps the `meta` field would be best for that that would allow us to both provide localisation key and any other details that can be used for interpolation for example could map nicely to the translation key validation too long cannot be longer than max chars characters like to get some discussion started on which direction we like move towards for two main reasons even though we ve mostly eliminated hitting the server with invalid data from the admin client there are still some edge cases where automatic mapping would be useful more importantly when we get to opening write access through the public api and its out in the wild and in use it will be lot more difficult to change >>>api i18n
regression no re auth modal when saving editor with invalid session steps to reproduce create edit post and ensure it saved in web inspector find your `ghost session`in the local storage section under the resources tab and edit your `access token` string change the post body and click save expected result you are shown the re authenticate modal from which you re are able to sign in and continue actual result you are shown an error alert saving failed the server returned an error server was not available >>>blocker bug ember in_progress
regression not redirected to sign in with invalid session steps to reproduce sign in to your current dev install delete your database re start the dev server try to navigate through the app expected result you are redirected to signin` actual result you are shown the error page and the console contains the `401 unauthorised` response error followed by or more `adapter operation failed` errors >>>blocker bug ember in_progress
regression export throws access denied exports are currently broken they appear to do nothing but are throwing 401 errors behind the scenes steps to reproduce login to your ghost admin go to the labs page hit export nothing happens terminal server console shows access denied error this has happened quite recently and may be related to 5972 technical details ghost version master latest commit d81ddc9 not browser or node version dependent>>>blocker bug fix_wanted
convert casper tests to ember acceptance tests now that the casperjs tests have been switched off and quickly breaking as they are no longer being maintained we should aim to replicate the high level tests in ember js ember acceptance tests are lot easier to reason about than the casperjs tests as they offer number of helpers http guides emberjs com v2 testing acceptance toc test helpers with knowledge of ember run loop and other async operations to make testing smooth ember cli mirage http www ember cli mirage com further eases testing by exposing mock api with easy to use factories that allow you to quickly set up sufficient data for each test guidelines for good acceptance tests test the basic list get create update delete flows of each area only test high level features interactions check that the core elements are rendered to the page and work through any flows that require transitions redirects modals etc it should be expected that component integration tests will cover the details of components and their ui interactions so they can safely be ignored in acceptance tests test infrequently used flows they are the ones most likely to be missed when checking prs and can easily regress try to test as much of flow within one `it` test as possible booting up new application instance is expensive and slow tests were one of the main reasons we abandoned casperjs if you need to test different set of data or override mirage endpoints then that good indication that new `it` should be used tip when working on particular test you can limit ember test server to only the test that you are interest in by supplying filter `ember test acceptance settings tags todo set up ember cli mirage and convert existing acceptance tests from base pretender to mirage 6033 test setup flow partial tests in 6076 test sign in flow test password reset flow partial tests in 6426 test sign up flow test content screen flows erisds test editor flows test team flows test settings general flows 6482 test settings navigation flows test settings code injection flows 6486 test labs flows 6488 labs checkboxes tested via component integration tests >>>ember epic fix_wanted tests
bug sessions and authentication issue summary have had difficulties recently setting up ghost logging in to ghost creating exports which think are all inter related hence raising them in one issue initially one issue is setting up new blog after deleting database results in errors the second issue seems to be that if log out cannot log back in again access is denied using the password reset can sometimes enable me to log in but the issue recurs the third issue is that the export tool in labs does not work access in denied this has been split out to 6040 steps to reproduce the easiest issue to reproduce is to log into your blog and go to the labs page ghost settings labs and click the export button you will see an error in your console the other issues appear to be related at least partly to sessions already being in progress which will hopefully become clearer as you read through the steps to reproduce but because of the first steps are log on to existing blog or create blog as per usual stop ghost delete database start ghost `npm start` wait for database to be created navigate to blog admin localhost 2368 ghost attempt to create blog repeat these steps and try to create blog in both normal browsing mode and incognito mode here is what see non incognito mode `npm start` redirects to ghost setup and see 500 error screen shot 2015 11 02 at 17 45 11 https cloud githubusercontent com assets 4405395 10889414 cf4c85a8 8189 11e5 8bd7 bab98d650443 png get the following error in console error access denied error at error unauthorizederror ghost core server errors unauthorized error js 18 at authenticate ghost core server middleware auth js 114 50 at allfailed ghost node modules passport lib middleware authenticate js 87 18 at attempt ghost node modules passport lib middleware authenticate js 160 28 at strategy strategy fail ghost node modules passport lib middleware authenticate js 277 at verified ghost node modules passport http bearer lib strategy js 124 19 at then ghost core server middleware auth strategies js 55 28 at trycatcher ghost node modules bluebird js main util js 26 23 at promise settlepromisefromhandler ghost node modules bluebird js main promise js 507 31 at promise settlepromiseat ghost node modules bluebird js main promise js 581 18 at async drainqueue ghost node modules bluebird js main async js 128 12 at async drainqueues ghost node modules bluebird js main async js 133 10 at async drainqueues ghost node modules bluebird js main async js 15 14 at process tickdomaincallback node js 463 13 incognito mode correctly redirected to ghost setup one can then try to fill out the form but on submission of step get the forever loading spinner screen shot 2015 11 02 at 17 38 57 https cloud githubusercontent com assets 4405395 10889494 45ddf47c 818a 11e5 9a1e 6f19ecb5cb3d png error this time is error access denied error at error unauthorizederror ghost core server errors unauthorized error js 18 at authenticate ghost core server middleware auth js 95 50 at strategy strategy success ghost node modules passport lib middleware authenticate js 194 18 at verified ghost node modules passport oauth2 client password lib strategy js 50 10 at then ghost ghost core server middleware auth strategies js 21 32 at trycatcher ghost node modules bluebird js main util js 26 23 at promise settlepromisefromhandler ghost node modules bluebird js main promise js 507 31 at promise settlepromiseat ghost node modules bluebird js main promise js 581 18 at async drainqueue ghost node modules bluebird js main async js 128 12 at async drainqueues ghost node modules bluebird js main async js 133 10 at async drainqueues ghost node modules bluebird js main async js 15 14 at process tickdomaincallback node js 463 13 if refresh the page am taken to the sign in page but attempting to log in results in the same error technical details ghost version master latest commit 8db90ba tested on os yosemite and windows7 x64 ultimate>>>blocker bug
standardise on camelcase property names in the client currently we have client side model definitions that define underscored properties such as the following from the tag model this breaks ember conventions and has led to some confusing situations such as the following taken from the tag validator wherein we have both `metatitle` and `meta title` and the need to remember which is used where both inside the validator and when interacting with it externally suggest that we modify our serializers to automatically convert from underscored to camelcase and back much like ember data default active model serialzer https github com ember data active model adapter blob master addon active model serializer js l118 the changes required in the serialiser are quite minimal but making the change will also entail updating all the models and anywhere we access those properties directly >>>ember
api cross table count handling returning posts count for tags this was originally comment on 5615 but is large and complex enough to warrant it own issue this is heavily related to 6008 there are two changes that are currently proposed in 5615 change `post count` include on tag endpoint to be `posts count` add `tags count` to posts endpoint and `posts count` to users endpoint currently looking at how to implement counts across the posts tags users endpoints and so wanted to clarify proposal for what they look like inline or included counts are counts which are requested in addition to other data requesting all tags and also asking for post count at the same time `get tags include posts count` included counts in this form are mainly useful for two purposes that can discern providing an idea of how much data there is where the data has not yet been fetched having list of authors with an indication of how many posts each author has written `get users include posts count` ordering result sets by those that have the most related data ordering tags by how many posts have that tag `get tags order posts count desc` when making `browse` request the api automatically returns count of how many items have been requested and how many exist in the full set if the result is paginated so it is easy to get count of data that has been fetched the key aspect of included counts is that they return information about related objects one of the complexities of including related counts is needing to count the right things when returning post count along with tags in the admin panel this would need to return the count for all posts but when making this same request from the theme frontend public access the expectation is that it would only count published items there are similar rules for active vs inactive users and private vs public tags not implemented yet the main question on my mind is whether we should have single syntax for requesting counts which automatically returns the full count of the data the requester has permission to access or whether the requester should be able to specify what they expect that is should the handling of public vs private data be implicit or explicit implicit example single syntax `get tags include posts count` when the request comes from an authorised request from the admin panel the full count would be returned when the request comes from public client from the get helper or ajax in theme only published posts would be included pros no thought on the users part is required to get hold of private data single simple syntax for requesting counts cons there is no way for an authorised user to get public count this doesn match normal posts request which by default would only ever return published posts unless the user specifies otherwise explicit example public data syntax `get tags include posts count` include private data syntax `get tags include posts all count` the default `posts count` syntax always includes only the default public information published posts active users public tags the extra qualification of `posts all count` includes all the data in this case the all qualification in the syntax always refers to public vs all data this is concept that we need to wire up more explicitly through the api as it applies to all of our main resources pros api users can be explicit about whether they re asking for public or all data this more closely matches how the api works in general public by default other data by request cons requires extra thought about what data you want counted extra syntax although the same for all resources could be confusing although there is no way to specify count differences based upon other criteria like whether post is page or featured think there are sensible solutions to this for pages we should start to treat these as first class citizens in the api providing `get pages and `pages count` etc for featured posts or other more complex combinations separate request would need to be made the alternative to using `all` would be to used names like `posts published count` however think this would be potentially more confusing if there need for more count options in future we could extend from `all` to other named counts but if we add more complex names it will be hard to go back and remove them summary tldr am leaning heavily towards the explicit `posts count` and `posts all count` version because it matches the way the browse request works and makes it possible to request both public and all data when making authenticated requests which would otherwise not be possible we re looking at making public vs private data handling more implicit inside of read requests as discussed in 5947 which makes sense because the user is already making an explicit request for particular resource don think the same idea works here note the api does not currently support doing requests which are only intended to return count and nothing else although this can be simulated by only requesting `fields id` if there is strong need for fetching just counts this behaviour could be added later update 20th nov as explained in my comment https github com tryghost ghost issues 6009 issuecomment 158379096 we re opting to put the word `count` first which changes how this works slightly but solves number of issues with the implementation so working on renaming the property supporting counts used in various parts of the query is quite tricky including count is quite straightforward already working ordering by count is also simple hopefully coming soon filtering based on count is pita this means there number of tasks to this issue make counting posts safe don include private data when making pubic requests support including count of posts for both tags and users rename `post count` to `posts count` support ordering by counts support filtering by counts support counts when using `fields` assess the need for other counts or aggregates in the api feedback from developers needed >>>api
allow ordering by columns in outside tables via join this issue is related to 5602 and 5989 issue so while implementing support for ordering by rows from outside tables when using `join` discovered an issue with the way bookshelf fetches records it does not use `join` but uses extra `select` query to fetch additional rows from other tables and then merges them into the final result for example want to fetch posts and include author information in them expect `select` query with `join` statement but here what happens instead it finds posts then looks for `author id` and finds that there are unique `author id`s after that it executes one more `select` with those ids when that extra query is finished author results get merged into posts result into `author` column consequences because of this issue it is not possible to order by joined values `author name` because the initial query with `order by` does not know what `author` column is solution the proposed solution is to detect if `order` references any columns in outside tables if it does modify the query to `join` that outside table in that case queries with `order` will work as expected note similar work is done for `filter` in core server models base utils js https github com tryghost ghost blob master core server models base utils js l29 if `join` is required it modifies query to include these statements >>>api
bug content management items two minor bugs on content mgmt at the moment when you delete post expected behaviour is that the next post below the current one will be selected same as an email inbox currently the very first most recent post is selected at the top of the list when post is deleted deleting bunch of posts in row breaks loading leaves big empty gap with no way to load in any new posts see below 6390 image https cloud githubusercontent com assets 120485 10728242 c163cff6 7be8 11e5 9672 27db4d5fae67 png >>>bug ember
get helper improvements having played with the get helper some more since it got merged there are some details which need addressing as well as some updates needed to make it work nicely with the filter parameter ve kept everything in one issue because hope that ll help to make it all make sense the blockparams and data naming stuff is highly confusing bugfix data is getting merged the data fetched by the helper is being incorrectly merged with the existing data for the template this means that in certain cases one posts object will get overwritten by another and you won get the data that you expect when inside the get helper remember was attempting to resolve an issue when added the merge line but what it was escapes me and very sure it the wrong thing to do so this needs to be removed addition pagination block param although added support for blockparams https github com emberjs rfcs blob master text 0003 block params md only did this for the main result data and not the pagination data what this means is that you can name the list of posts output by the get helper like this get posts filter featured true as featured the featured part is what handlebars calls block param see the rfc https github com emberjs rfcs blob master text 0003 block params md think it makes sense to be able to do get posts filter featured true as featured pagination which is easy to make work but not currently possible with my implementation note that without doing this access to pagination looks like meta pagination see the part about data naming inconsistencies in addition get helper path support for filters the get helper will currently work with any kind of filter query for example get posts filter featured true or get posts filter tags photo which makes it possible to do queries to fetch extra data for your theme however there is no way currently to build dynamic queries based on data you ve already got get posts filter tags post tags might reasonably fetch the posts with the same tags as the current post or even get posts filter tags post tags id post id could fetch posts with the same tags as the current post which also aren the current post to make this work we need to explicitly add path resolution to the get helper so that it will process handlebars like strings out of the filter query and grab the requested data in useful format handlebars has its own path syntax supporting dot syntax like `post author name` and an array syntax like `post tags slug` very similar to this is jsonpath https github com dchester jsonpath library which provides an xpath like syntax for grabbing data from json object jsonpath syntax is very slightly different to handlebars path syntax in that its array syntax doesn require dot perhaps more like you would expect `post tags slug` and it can understand wildcards in arrays so `post tags slug` would return an array containing the slug of each tag associated with post it incredibly powerful and used with the get helper it makes for powerful tool propose that we use jsonpath for parsing paths with two slight modifications we parse out the extra dot used in handlebars array syntax so that if that is used it still works we add two aliases post tags for post tags slug `and post author for post author slug to cover common use cases discussion get helper data naming vs basic theming in the normal theme world on post listing page you do foreach posts and on post page you do post although the api returns the same plural form for multiple and single items we specially preprocess the data before the theme gets it to make this more intuitive the get helper currently doesn do this preprocessing for you this results in two inconsistencies inconsistency posts or post both get posts filter featured true and get slug my post do two different queries to the api the first is browse and the latter is read so the first returns multiple results and pagination the second returns single result however both result in new `posts` plural array of object so the way you handle the data inside the get helper is the same for both not sure if it confusing that the output from the second one is also posts or if it is better that the two are consistent as there is little to tell between them note that if you wanted you could name the second one post yourself this works because weirdly foreach posts title foreach and posts title posts both work although they behave slightly differently an alternative would be to duplicate the object with both the plural and single name but this seems like overkill inconsistency pagination when returned to theme currently pagination is top level key so you do pagination when returned from the api to the get helper it is meta pagination think it unlikely that there will be much need for creating pagination inside of get queries but this could trip people up we could move it to top level key but this would be inconsistent with api documentation providing the second point in this issue is solved it would be possible to solve this again by giving the data name yourself get posts filter featured true as featured pagination ultimately these are both think quite edge case issues that will trip few people up this can be mitigated by writing the get helper documentation to encourage the use of block params to name the data that is returned so that theme developers have absolute control we could also duplicate the data under different keys or apply the same pre processing that we do for themes the question is which is least confusing don think there is an easy answer so it may make sense to move the get helper behind the public api labs flag for the first release get some feedback make any necessary changes and then take the flag off in the following release todo list don merge data support pagination as block param add path resolution for filter strings consider how to name the output data >>>themes
bug when editing post tab shows hidden menu issue summary when you are inside post and have the content area in focus and hit tab it shows hidden menu tab https cloud githubusercontent com assets 4715098 10645341 1fb8cc38 77e2 11e5 986a 291a73af8718 gif steps to reproduce open or create post click in the content area press tab technical details ghost version client os mac os 10 10 server os do droplet ubuntu browser chrome>>>css fix_wanted
public api v1 sprint epic public api we ve been talking for very long time about making our json api publicly accessible via oauth see the oauth epic https github com tryghost ghost issues 4004 the plan is to make this reality in the next release but in limited way the read only public endpoints will be made available to themes via the get helper and also to public clients but without ui for registering new clients this means that it will be possible to use the api via ajax from within themes as well as the get helper in order to fetch what we consider public data published posts tags and active users this will be considered public beta of the api as well as making the data accessible we need to push to clean up the api and ensure that the available endpoints are truly useful the following are set of must have and nice to have api changes ready validation issues 2756 2758 make the 401 error format consistent 5499 add `fields` parameter issue 5601 add the `filter` parameter issue 5604 move top level browse params to `filter` issue 5463 add `order` parameter issue 5602 ref 5463 remove auth from public endpoints 4181 implement auth for public clients with client id 4180 default client entry 4184 initial get helper 4439 update get helper to work with filter param issue 5993 nice to haves finish pipeline refactor 5508 joins relations cleanup issue 5615 cross table ordering 6008 cross table count handling inc ordering 6009 improve the has helper issue tbd complete rewrite of page support needed for release no more staticpages parameter 5151 requires 5604 `sebgie` public permission handling 5614 at least ensure count doesn return wrong value `erisds` ensure filter cannot be abused to get private data `erisds` add labs checkbox for public api access pr 5984 move get helper behind labs flag no issue api helper for ajax requests 5942 `not assigned` api docs 5588 `cobbspur` get helper docs `cobbspur` revisit origin validation 6106 other api issues to consider improve error messages figure out what to do with versioning slashes in api endpoints other sprint items tag management ui updates issue 5845 routable tags ui pr 5969 add tags to search pr 5991 drag drop tag re ordering when editing post pr 6010 `tag slug edit` redirect pr 6011 >>>epic
ember simple auth upgrade esa is now pretty much code complete and is only waiting on documentation to be finished before release esa is currently our main only blocker for upgrading to ember as such would like to get the upgrade moving forward in pr so that we can find any blockers implications issues early on discussion around can be found in the pull request at https github com simplabs ember simple auth pull 602 and latest code is in the jj abrams https github com simplabs ember simple auth commits jj abrams branch >>>ember
revoke user invite requests not working on team when attempting to revoke an invite to user on the team page nothing happens it seems that the `status all` part of the request is missing in the call to the users read api endpoint as the users api will only return `active` users by default the user will not be found and 404 is returned instead steps to reproduce on team invite user to your blog hit the revoke button nothing happens the api returns 404 http puu sh kk5bc png the console shows an error http puu sh kk5jz png technical details ghost version master>>>api bug fix_wanted permissions
mysql connection not set to utf believe ghost does not set the connection to `utf8` when connecting to the mysql server which results in utf characters being displayed as or similar characters if the mysql server itself is not configured to use utf as default am not 100 sure if this is an issue with ghost or something else but ve got the feeling that it is ghost problem have converted my ghost database to mysql locally everything was fine there then moved the database to different server where the characters where then interpreted wrongly tripple checked that the database and the tables used for ghost were set to utf that the data in the tables were correctly encoded that the output html page is served with utf encoding etc everything was as it should be the only difference between my local mysql server and the production server was that in the server configuration itself the local server had all its defaults set to `utf8` and the production server was set to latin only when changed the production mysql server config and restarted it the content was displayed correctly did not have to change anything else or re import the tables because the only way to fix this was to change the mysql server config and any other mysql client could read the utf encoded data correctly without the defaults being changed believe that ghost doesn set the connection to utf something like `set names utf8` my database object in the config js file could solve this issue so that no personal problem for me but think it should always work for anybody no matter what the mysql default settings are some users may not have access to the config or must use shared mysql server where they can change the defaults >>>bug
post filter parameter cleanup changes issue https github com tryghost ghost issues 5463 describes the current state of the api pre filter parameter and how this will be much improved with the addition of the filter parameter once the filter parameter 5604 itself has been merged we will need to refactor all the parts of ghost which depend on the old style api such as the frontend controller and the admin ui model layer so that they use the new filter parameter rather than the oldschool `tags` or `author` parameters careful consideration will be needed for some of the boolean parameters for which we need to make sure we can support `true` `false` and unset `all` for example with `page` and `featured` we ll also need to remove the old style parameters from the api update the tests and ensure that we still support he same behaviours as we did previously more details including task list will be added to this issue when we re ready to start working on it refactor the frontend controller to use new style erisds pr 6000 boom refactor the admin ui to use the new style kevinansfield will need 5151 before pages can be re added remove remaining old tag author filtering related code from frontend controller post api api utils tests convert remove get helper anywhere else rss remove featured filter param from post api tests remove staticpages filter param from post api needs 5151 remove status filter param from post user api remove roles filter param from user api not sure if we re ready to do this >>>api
helpers for accessing the api from themes with the changes coming in 5848 it will be possible to make ajax requests to the ghost api from inside theme the api urls will need to be absolute and to include client id secret in order to work correctly this means that building url will look something like client id client secret or for example `https blog ghost org ghost api v0 posts limit client id ghost frontend client secret a1b2c3d4e5f6` that quite pain to build especially multiple times so lets make this super easy by allowing theme developers to do something like assuming they re using jquery to do ajax ajax window ghost apiurl posts limit the key idea here being provide function via script included in ghost foot which has no dependencies and which takes just the endpoint query params or rather the guts of the api query and wraps it with the full url adds the client details the resulting string can be passed to any ajax library it is common to serve the admin and api over https whilst keeping the frontend of the blog served over http in this case the url must be absolute to avoid redirects which in some browsers will interfere with allowing cross origin requests >>>api themes
move public api access behind labs flag the first version of the api which is officially accessible will be considered extremely beta and likely to change in subsequent versions without deprecation notices or other warnings to ensure that anyone making use of the api is aware of this likely breakage we want to put access behind labs flag this means that anyone using the api has knowingly decided to use the api in its current state the flag for public api access will enable disable access to the api via client authentication examples of past labs flags https github com tryghost ghost pull 5256 files https github com tryghost ghost pull 4763 files >>>api ember
and replaced within code blocks by gfm js extract pre writing code block containing the following will produce screenshot https cloud githubusercontent com assets 1137825 10441489 9e020400 7149 11e5 9149 4603cda1b810 png >>>bug editor in_progress
tag setting page displays abnormally iemobile 11 windows phone small screen only inch 480x800 ss http cdn penbeat cn y4zdabdg png >>>bug fix_wanted
storage abstraction after reading discussions and issues related to file storage abstraction 4600 2852 decided to put up proposal to solve current issues goals standard api for file storage adapters to implement simple adapter installation and configuration store any type of data in file storage images backups themes apps issues with the current implementation storage adapters are suited only for saving serving images there are currently main methods `save` and `serve` but there no easy way to get one specific file from the storage there `serve` method which returns middleware for express to fetch files on request adapter should not be responsible for responding to http requests it must stick to its job only saving and getting files `serve` middleware should be one and only middleware for all adapters complicated installation to install new storage adapter user needs to copy paste adapter files to `content storage` and set `storage active my adapter in config this way has the following disadvantages manual copy paste of files adapters can also have many files folders to update an adapter user needs to repeat the same process and follow adapter repository for updates adapters have npm dependencies 99 of the time user needs to look them up and `npm install save` manually take https github com kimar ghost aws s3 as an example it is kind of step back from the package manager era need to provide and maintain using custom storage module https github com tryghost ghost wiki using custom storage module documentation solution each adapter should be separate npm module with its own repository advantages simplest installation there is `npm install ghost storage s3 save` to update just `npm install` again adapter dependencies are installed automatically widely adopted practice to install complementary functionality for example gulp grunt yeoman etc we can create yeoman generator to easily scaffold new storage modules if adapter modules are tagged with `ghost storage` inspired by yeoman grunt we can assemble complete list of adapters existing on npm custom storage module installation here the complete flow of setting up custom storage module for example `ghost storage s3` `npm install ghost storage s3 save` `config js` restart ghost done build custom storage modules each adapter should extend `ghost storage base` module and implement required methods `get` and `put` overview of complete storage adapter api `get string remotepath required `put string localpath string remotepath required `exists string remotepath optional there one thing that still needs resolution the `put` method am big fan of how knox https npmjs org package knox handles the situation it gives lot of freedom `putfile` `putbuffer` and `putstream` `putfile string localpath string remotepath reads file and saves it `putbuffer buffer data string remotepath saves provided buffer `putstream string remotepath creates stream which you can `pipe to it would make adapters little harder to implement for developers but it is well worth it for sure think this needs to be discussed what method needs to be chosen in terms of performance and memory consumption `putfile` and `putstream` are the best ones since they stream data and don store the whole data in memory unlike `putbuffer` using storage adapters storage adapters should be easily swappable so there must be single entrypoint with stable api to access storage core server storage index js that way you can access currently active storage module from anywhere feedback let discuss this proposal if anything is unclear in this proposal please point it out >>>in_progress
editor scroll jumps when adding removing images the current ghost editor has an issue where the right preview pane jumps around annoyingly when adding or removing images the issue only occurs when the right pane is being scrolled independently of the left pane steps to reproduce open post that is longer than the editor the welcome to ghost or you ve been upgraded posts scroll the right pane only to point where there is an image placeholder add an image if the placeholder is empty or remove the image if there is one there notice that the right pane has jumped back to the top part of this think is due to the `dropzonehandler` getting called multiple times per placeholder dropzone and the upload events getting repeatedly bound and firing this would also make the editor get slower and slower other than this we need to find way to prevent the scroll syncing from happening incorrectly at this point technical details ghost version master client os mac os browser reproduced in chrom and safari>>>bug editor
redirect loop when password protecting blog at example com private ve set up an instance of ghost behind nginx as reverse proxy ghost can be reached under `example com private so the admin interface is at `example com private ghost the nginx config looks like this location private proxy set header real ip remote addr proxy set header host http host proxy pass http 127 2368 the correct url `http example com private is set in `config js` when enabling password protection for the blog user that is not logged in gets redirect loop ghost sends redirect to private which is what the user requested when following the redirect ghost sends the same redirect when already logged in the blog works as intended using different folder such as `foo` instead of `private` does not trigger this behavior ghost version tested and master f7015600b8bbd61d76fa324fff69fac2dd8c2452 client os gentoo linux amd64 server os gentoo linux amd64 node version 12 browser chrome 45 2454 85 and wget 16 r1 database sqlite>>>bug
bug deleted entries not removed from sitemap issue summary when delete entries or make posts static these url cease to work as expected but are still included in the sitemap steps to reproduce create page view sitemap delete the page view sitemap page index is still visible attempt to click on link and visit page results in 404 create port view sitemap convert post to static page view sitemap static page still visible as post attempt to click on legacy post results in 404 the sitemap should not include objects know to result in 404 technical details ghost version client os ubuntu 15 04 server os ubunti 15 04 node version v0 10 25 browser chrome database sqlite3>>>bug in_progress
pages or posts called author throw an error yep so that happens most of the possible special urls in ghost like tag were set as reserve urls https github com tryghost ghost blob core server config index js l215 except we put `user` and `users` in instead of `author` or `authors` in that list this means that it not possible to create page or post called tag but it is possible to create one called author if you do that then you get this loverly error this is because of the way we set the context is wrooooong it assumes that author is an author context instead of post context fixing the context is easy but it begs the question of whether `author` and `authors` should be reserved slugs and if we do add them what to do about existing context that already uses that slug can imagine people wanting to build custom pages at author and tag to do their own archives as ghost doesn have them by default so when we add channels we may want to think of remove some of these reserved urls instead of adding new ones if we ever choose to have default behaviour for those endpoints then anyone using them already would simply be overriding our default >>>bug in_progress
clear saving failed notifications on reauthentication issue summary leaving tab open until your session expires will cause your next save to fail duh throwing up an error message and asking you to reauthenticate after having done so the saving failed error messages stick around it would sure be nice if they were cleared out after successful login steps to reproduce open post for editing expire your session force save triggering reauthentication save error message supply your pw error messages stick around technical details ghost version client os mac os 10 10 server os ghostpro browser chrome 45>>>bug in_progress
serve 404s for static files more gracefully currently ghost doesn do the greatest job of handling static files that don exist if file isn found at location the `servestatic` middleware in express calls `next to pass the request through to the next middleware the noticeable result from this is that the slashes middleware will 301 the filename to have slash on the end the uncapitalise middleware will lowercase the filename another 301 if needed and the final 404 can seem to be for uri that can potentially look quite different compared to the original request an example can be found in this issue https github com tryghost ghost issues 5737 in many cases in ghost the static files exist are served from specific locations and if they don exist in that location then they don exist trying again with slash and no caps isn going to help so we should just 404 immediately great example is the standard image upload those images get saved to and served from content images if the image doesn exist there then 404 should be served immediately ditto for all files served from shared and public they re either in their home or they are missing updating ghost to serve 404s immediately will help to improve the speed at which these responses are served it may also help to optimise caching as the 404 will be directly related to the resource requested and it should also reduce some confusion around what is happening when these files 404 >>>in_progress server
validation regression green icons on signin the `hasvalidation` fix either regressed or never quite worked properly for signin http puu sh kq05s png it still working ok on setup haven checked signup icons should be grey until validation has happened in which case they should go green or red depending on the outcome update wait seeing this on signin too now >>>bug in_progress
the gravatar placeholder still shows up if the image has transparency not sure if this is the case on the hosted version but the self hosted version shows my gravatar superimposed on top of the placeholder image capture https cloud githubusercontent com assets 1285514 10121300 b7dfb2b0 64aa 11e5 8892 ad85d69183b3 png >>>bug css ember fix_wanted
client secrets are not set correctly for new blogs when creating brand new blog with the client secrets are set to `not available` they should be random 12 digit hex string migrations from previous versions end up with correct secrets ve tested this on sqlite3 few times steps to reproduce clear your existing db either by dropping tables or deleting the db file start ghost look at the client table technical details ghost version database sqlite>>>blocker bug
bug pressing enter whilst editing meta title reloads app issue summary when typing in the post meta data title field in post settings if you press the `enter` key normal form submission forces the app to reload steps to reproduce navigate to the post meta data settings view focus the meta title input press `enter` the enter key event here should be captured and discarded so behaviour is consistent with main post settings menu technical details ghost version client os os 10 11 browser chrome 45>>>beginner bug ember
bug unsaved navigation setting changes are persisted across session issue summary changes to navigation settings aren rolled back when navigating away from the navigation settings screen steps to reproduce navigate to navigation settings page change label or url navigate to any other page navigate back to navigation settings page you ll see that your previous changes are still visible even though you hadn clicked save this is potentially confusing as there is no indication that you are viewing data that is out of sync with the api when returning to the navigation settings screen recommendation to be consistent with other areas of the app we should present an unsaved changes type modal when navigating away from navigation settings with unsaved changes if the user chooses to continue then the unsaved changes should be rolled back technical details ghost version 0>>>bug ember
meta description fails inside next post block helper async helpers cannot be nested the meta description helper will fail in an ugly manner if used in the nextprev block helper being able to use it here is very useful as one can then select what text is used to promote other articles however if one tries to use it here then an async error occurs which creates multiple ugly problems on the page here the error >>>themes
tag management ui updates following on from zelda there are number of improvements and changes surrounding tag management that would be great to do in settings tags use routes for the tag settings screen this should work such that each tag has navigable url ghost settings tags getting started and when navigating to that url the tag settings menu is already open displaying that post 5969 when navigating to tag url that tag should also be automatically selected in the left list like posts on the content screen 5969 add validation to the description field in the tag settings menu 200chars max 5865 add the 200 char countdown underneath the description field in the tag settings menu 5865 5952 add validation to the slug field in the tag settings menu 200chars max 5952 keep the settings pane open and allow users to click between tags in the list on the left hand side again like the content screen 5969 believe there is also some work needed to improve how the models are bound here which may or may not fall out automatically as result of switching to using routes search once tags have route add tags to the autocomplete admin search 5991 post settings tag component add drag and drop reordering of tags this requires an upstream fix believe 6010 revisit when how tags get saved save on blur bonus add tag foo edit` redirect to send users from the frontend of the blog to the tag management screen 6011 >>>ember
regressions in the navigation ui having read few bug reports and played around with the navigation ui bit since it would appear there are few regressions in how it works few issues ve noticed cmd doesn work unless you focus out create new item with label and url go back and change the url whilst still in the field hit cmd your changes disappear urls are being stored absolute rather than relative add link for pretty standard url like about the ui should show you the full absolute url the database should contain the relative part only and does not think this is the underlying cause of https github com tryghost ghost issues 5801 validation has gone wonky validation for navigation has been too strict from day one 4989 there were some fixes to allow mailto 5581 5013 tried adding my email address as mailto link when testing that that now works and forgot to add `mailto and discovered that email addressed are accepted as valid urls which seems odd url helper not working to output urls correctly in the blog navigation` context this was reported here https github com tryghost ghost issues 5162 issuecomment 138122876 and here https github com tryghost ghost issues 5836 issuecomment 140156842 this is probably not related to the ui in any way just dumping it here so don lose track things to fix improve cmd saves correctly urls are stored relatively mailto links are still allowed current helper works again url helper works whenever there navigation item around bonus validation is improved so it permits valid urls and doesn allow emails bonus get this working with http vs https permit urls with no protocol there are many ways the ux of this could be improved as well as the implementation by doing more work server side suggestions are welcome >>>bug ember in_progress themes
bug new post has blank cover image when created from exiting post with cover image issue summary when you are inside post that has cover image and you click on new post in the left hand menu that new post will have what it thinks is an existing cover image but it is blank you then have to trash that image to be able to upload new one post image populated https cloud githubusercontent com assets 4715098 9880360 1fba3916 5b80 11e5 964f 24659dd7f6f6 gif steps to reproduce open or create post that has cover image click on new post in the left hand side there will be gray background and the trash can icon for the cover image technical details ghost version client os mac os 10 10 server os ghost pro browser chrome>>>bug ember in_progress
bug editor crashes issue summary the editor crashes if you have an image with relative url in markdown form followed on the same line by url in brackets how to reproduce go to editor add to bring up an image dropzone and add image of your choice some cats perhaps after this on the same line add link to something in brackets like this http puu sh k5qlb 2dbb649680 png the editor crashes when you add the closing parenthesis this is bug because although the markup may not be valid it should not be so easy to completely break the editor and if post is imported you cannot edit the post without directly editing the database technical details ghost version master latest commit c8dd095 client os mac and windows 7x64 >>>bug editor in_progress
slug validation got too strict api changes in introduced strict validation across the api which missed an important detail about slugs they are permitted to contain underscores as well as hyphens this is loosely related to https github com tryghost ghost issues 5808 steps to reproduce create post tag or an author that has slug containing an underscore you can add these manually and ensure it visible on the frontend publish post ensure the tag author has posts try accessing the page for the post tag author on the frontend and you ll get an error from the api>>>blocker bug
in rare cases client secret can be misinterpreted by the browser as infinity in ghost we laid some ground work to move us towards opening up the api to public clients as part of that we updated how the ghost admin client ghost api talk to each other from using the same client secret on all blogs to having dynamically generated one the change can be found here https github com tryghost ghost commit f22796ff7dfbb6053650ba2cd7ef4a233a3d885a after we released we had report of someone being unable to login getting the message there was problem with the server very helpful this error happens when there is mismatch between the secret held by the browser and the server it isn the user that unable to authenticate with the api but the admin client itself it turns out that this is caused by the 12 digit hex string generated for the admin client secret being misinterpreted by the browser as being number rather than string in the very rare case that the string contains only numbers and the letter somewhere in the middle the browser interprets this as an exponential number which is then too large for the browser to handle so it sends the sever the string infinity this is probably my favourite ghost bug ever bug 1234 boom the solution to the bug right now is to manually fix the secret in the db to be something that won get misinterpreted to fix this once and for all we need to make sure that the secret is always treated as string we also need to consider whether it is safe and or sensible to provide more useful error message in this instance steps to reproduce log out of your blog and stop ghost in your database change the `secret` for the client with the slug `ghost admin` to be something like `23e435234423` restart ghost attempt to login big kudos to sebgie for figuring this one out >>>blocker bug
sometimes post editor stops writing just updated my blogs to ghost you ll have done great job with this version congratulations here because while was writing few post sometimes letter doesn work like if my keyboard doesn have enough battery its ghost bug ve checked it for example if the gets wrong you can write any one so you have to refresh the page >>>bug ember
change url starting with hyphen hi yesterday upgrade ghost but some problems force me to back up and reinstall all is very nice thank you very much but the new url builder https github com tryghost ghost commit 2700bfa modify url starting with hyphen example from my blog http epris de justice info si elle se tient carreaux je veux bien rester is 404 and the new url is http epris de justice info si elle se tient carreaux je veux bien rester it not problem for new article but for the old ones it breaks all links from the outside social media all can it be possible to add one hyphen manually thanks for all cosme >>>blocker bug
when trying to upgrade get this error error sqlite error too many sql variables tried to upgrade ghost to the latest version and got an error when trying to start the service leafh8kfns leafymain techhamlet com sudo npm start production ghost start home leafh8kfns techhamlet com node index migrations database upgrade required from version 003 to 004 migrations creating database backup migrations database backup written to home leafh8kfns techhamlet com content data tech hamlet ghost 2015 09 07 json migrations populating default settings migrations complete migrations updating fixtures migrations upgrading fixtures to 004 migrations update isprivate setting migrations update password setting migrations update ghost admin client fixture error sqlite error too many sql variables error sqlite error too many sql variables at error native leafh8kfns leafymain techhamlet com >>>blocker bug
bug error 500 for author tag with illegal character issue summary trying to visit the tag tag or author author page with slug value that contains an invalid character results in 500 internal server error steps to reproduce visit tag tags page is shown visit tag 404 page is shown visit tag 500 page is shown this is bug because step shouldn return 500 internal server error would assume error since the error page is triggered by faulty user input there are option to handle that error in my opinion return 422 validation error remove the illegal characters and redirect to 404 if the tag doesn exist technical details ghost version client os osx server os vagrant node version 10 40 browser chrome database sqlite>>>blocker bug
firefox editor pane widths don fit to the viewport tested in firefox 40 ff ignores the `max width 100 that is set on `img` elements within the editor preview resulting in the split pane and mobile preview sizes being out of whack see image below adding `width 100 style to images in the preview fixes the pane sizes but is not viable solution as any small images will now always be full width >>>blocker bug css
current helper in navigation doesn work as intended with absolute links if in the navigation admin you type the url as ``testpage https blog site testpage `` instead of ``testpage testpage `` then in https github com tryghost ghost blob master core server helpers navigation js where the line 48 in the current master ``currenturl`` is `` testpage `` where as the stored database entry is ``https blog site testpage `` resulting in ``e url`` being ``https blog site testpage `` which ends up with ``out current`` being false while reading the documentation didn find anywhere that said we had to use `` slug `` convention this is problem number problem comes when the admin site for navigation will change the ouput of `` slug`` to look like `` https blog site slug `` the problem here is that if you click on this text box and make no changes and click save the situation is if click on an old menu link and edit different one and save it then it will store ``testpage https blog site slug `` into the database causing the comparison the the current url to fail not sure if this is real problem or if it somehow is only manfesting in my system however with my limited this is as much as can dig into the problem it is probably due to ``currenturl`` being assigned by ``options data root relativeurl`` it seems that the check should be more than single `` `` however not sure how to improve it my current fix is to just change back the navigation ones that do not work which is frustrating because you can tell from the navigation admin menu which ones would be problematic >>>blocker bug themes
bug tag settings image issue summary so my blog has been updated to on ghost pro yay however have noticed bit of bug think have header image set for some of my tag pages gaming is one of them however when in the admin cp heading to tags and then editing it no image is displayed in the preview window attached two screenshots this is bug because because there should be thumbnail there surely technical details ghost version client os mac os server os unknown node version unknown browser safari database unknown screen shot 2015 09 03 at 18 19 16 https cloud githubusercontent com assets 5874012 9665451 5b998e12 5268 11e5 9e49 c549671be500 png screen shot 2015 09 03 at 18 19 03 https cloud githubusercontent com assets 5874012 9665452 5e2c7d88 5268 11e5 82d4 a962a950843e png >>>bug in_progress
modals refactor during the zelda release we ran into issues with modals and their interaction with validations and spin buttons one of the main problems is that hitting the confirm button will raise an action and then close the modal immediately not taking into consideration async tasks or allowing the close to be halted review of modal usage and desired behaviour switch to closure actions and return promises from modal controller actions so that closing of modals can happen after async tasks and be dependent on success failure 6061 re instated the re authentication modal but realised there an issue with it not saving the post after re authenticating it would be good to add that feature if the improved control structure allows it modals should switch the keymaster scope to disable globals shortcuts and provide way to register their own shortcuts currently always switches to modal scope can we offer way to customise >>>ember
revisit gravatar aspect of image component on setup signup during the build out of zelda the behaviour of the gravatar tied to the email fields on setup signup changed such that the gravatar request isn fired until the field is de focused this doesn give the same instant effect it had when it was first implemented the change was made in order to reduce the number of requests made but think this can be improved to only fire the request only once the email the user has typed is valid checking the validation as the user is typing could be debounced as well think there may be room to revisit validations as well in this regard tying certain operations like clearing an error on an invalid email to occur whilst the user is typing that probably for another issue though >>>ember fix_wanted
bug endless spin after finishing onboarding step issue summary if the user has not already set up their email in config js inviting multiple team members during onboarding fails and the user is not directed to the admin panel all they see is this endless spin post onboarding endless spin https cloud githubusercontent com assets 4729979 9608402 cb083fa4 5093 11e5 98a1 a86f810c63d1 gif steps to reproduce `git clone git github com tryghost ghost git` `cd ghost npm install grunt init npm start` go through onboarding process avoiding all errors enter multiple unique emails in step of onboarding process this is bug because user should be taken directly to admin panel post failure so they can follow the prompts for setting up email correctly following the directions for developer install from git https github com tryghost ghost developer install from git from the readme will lead to this error technical details ghost version master latest commit 40f82b6 client os mac os 10 11 server os same localhost generated by npm start node version v0 12 npm version 11 browser chrome version 44 2403 157 64 bit database sqlite 3>>>bug ember fix_wanted
bug psm publish date validation summary of issue currently if you edit post and bring up the post settings menu then keep changing the publish date you will see that losing focus does not always result in validation steps to reproduce first go to post and bring up the psm change the date to be one day in the future click outside field and you should see validation error pop up change date back to valid value click outside field you should see the validation error removed sometimes is does but not always also try and change to an invalid format such as sep 15 you should get different error but if you switch between this and future date lose focus then the error does not always change video to demonstrate http recordit co uprnmejen3 working from master latest commit 40f82b6 >>>bug ember fix_wanted
user search dropdown doesn appear on mobile user search added in 5759 is working fabulously on desktop but on mobile don see the dropdown the tag component dropdown works fine so guessing this is css index style issue tested on safari chrome on my iphone 6>>>bug
bug loading spinner it seems as though the loading spinner can get stuck in an infinite spinning state this seems to occur when the transaction taking place lasts longer than second the timeout interval for the loading spinner the easiest place to replicate this issue is on the signin form this is found on master latest commit c4c5284 steps to reproduce ensure you are logged out then navigate to signin page ghost signin add valid email address and click the forgot button you should see notification appear but the spinner does not stop >>>bug
regression post editing shortcuts broken no longer working on content mgmt double click to edit post enter to edit post would guess related to 5752 do we not have tests for these tested both latest safari chrome for mac>>>bug
error handling for the post settings menu is mixed up the error handling on the psm has been half switched over to use inline validations but these are not displayed or used anywhere it still uses mix of both notifications and alerts and is very confusing furthermore when you come to try to save post with an inline validation error it tells you unknown error example set publish date in the future on blur you get notification http puu sh jst50 png this should be an inline error saving defaults the date back to what it was example set meta title longer than 150 chars http puu sh jstfu png no indication that it is invalid and then when you save http puu sh jstd2 png you get an alert with no useful message which also covers the field that broken >>>blocker bug
revisit bulk user invites in step of onboarding flow currently our api doesn support bulk user invites therefore the invites functionality has been implemented using ember store to create one user at time this works ok except we currently don seem to get full access to the errors from the server to give the user good indication of why the invite failed it may be that slightly different approach in ember will work better it may be that we need to implement bulk invites at the api level to get this working nicely there are in short two main reasons why an invite would fail email configuration error all invites failed and incorrect email addresses bouncing back resulting in some of them failing we need to receive enough information from the server to determine which of these cases has occurred let the user know >>>api ember
sessions randomly expire somewhere during implementing sessions started to expire earlier than before think have track this down to access tokens not being refreshed have opened an issue for ember simple auth and it would be great if anyone who has experience with ember authentication could please have another look at our implementation issue on ember simple auth https github com simplabs ember simple auth issues 644 relevant ghost prs https github com tryghost ghost commit e9326f6f6e02ddd770d6fdee12f6b963cedb9200 https github com tryghost ghost commit 5e7ff4031803935a44553d276c6f8b71a23064c1>>>blocker bug
bug onboarding inviting fake email address setup gets stuck in loop issue summary during the on boarding flow in setup step when you add fake email address such as fake dfdfdf com then click the invite users button you end up stuck in loop with an alert appearing at the top of the screen then this will repeat over and over until you add valid email steps to reproduce start new instance of ghost to enter the setup flow complete first steps of setup on step add user with fake email address of sdsd dfdf com wait and watch you should keep getting new alerts now add valid email address you should eventually get logged in and see success message for the valid email address and alert for the failing ones even if the invites fail you should be directed to content management screen technical details ghost version master latest commit 187944b client os win x64 ultimate node version 12 browser chrome database sqlite3>>>blocker bug
escaped chars causing slug to be cut off had report in slack https ghost slack com archives general p1440705186000825 that when entering the title die deutsche bersetzung von john harpers lasers feelings ist fertig the slug being output was getting cut off at the ampersand so was `die deutsche ubersetzung von john harpers lasers` instead of `die deutsche ubersetzung von john harpers lasers feelings ist fertig` same cut off happening with shorter strings and other chars like screenshot from network tab ghost screeny title slug problem chrome console network https cloud githubusercontent com assets 101513 9534045 e2837718 4d0d 11e5 9f20 c8b39ac9a94c png shows that second slug request gets set to type `octet stream` instead of `xhr` reproduction reproduction steps are unknown could not reproduce this on ghost pro blog using mac or windows tried using german keyboard layout as well technical details ghost version client os win 10 antergos arch linux server uberspace hosting node version 10 36 browser win 10 was fx 41b linux is fx 40 and chrome>>>bug
post zelda checkbox review two issues from the zelda audit related to checkboxes are considered non blocking therefore being punted to be looked at after zelda is shipped or after everything else has been fixed up when checking unchecking use dated post urls on settings general the scroll position changes there is space padding margin at the bottom of the page which appears and disappears this is hard to debug because once you own developer tools the problem goes away need to keep them open the whole time mobile some janky behaviour with checkboxes checking and unchecking boxes on settings general occasionally renders all checkboxes on the screen unresponsive in the wrong state>>>bug ember mobile
spin buttons should indicate post action status currently spin buttons indicate an in progress state but return to their initial state once the associated action has completed if the buttons action is completed quickly the button simply flashes and may appear broken ghost save button https cloud githubusercontent com assets 415 9463863 94be0914 4b17 11e5 9f16 6b608f891d35 gif the suggested fix is that once an action has completed the button switches to success failure state with smooth transition to give clear visual indication for reference slack save buttons exhibit desirable behaviour slack save button https cloud githubusercontent com assets 415 9463752 bc10f7d4 4b16 11e5 8a81 6bc62f97bdbf gif >>>css ember
code injection field needs double tap to select issue summary device iphone this may or may not be bug but you have to double tap in order to enter either field on the code injection page is little confusing cause enterable fields are usually single tap steps to reproduce log into the admin interface on an iphone open code injection try to tap into the code injection page technical details ghost version master client os mac 10 10 server os mac 10 10 browser safari mobile database sqlite>>>bug fix_wanted mobile
bug when psm open scrolling focus still on background issue summary device iphone when you open the psm and try to scroll you still scroll the background until you deliberatly tap on the psm itself psm background scrolling https cloud githubusercontent com assets 4715098 9456270 1ff1ca72 4a8a 11e5 9797 885ca8df1848 gif steps to reproduce log into the admin interface on an iphone open anything like new post or tags open the psm and try to scroll technical details ghost version master client os mac 10 10 server os mac 10 10 browser safari mobile database sqlite>>>bug fix_wanted
bug odd tag component behaviour when pressing cmd ctrl aside serial cmd er can help myself if you enter some tags into the new tag component which are not yet saved in the system and then press `cmd ctrl s` the new tags disappear they reappear on refresh steps to reproduce shown in the gif start new post open the psm and enter some tags entered one each of both existing and non existing tags to demonstrate hit `cmd s` suddenly the brand new tag is gone the existing one is still there though refresh the editor new tag comes back both are present and correct http puu sh jmfsi gif >>>blocker bug
bug alerts are not displayed consistently whilst playing around with the new jquery has been moved notification noticed that alerts don seem to appear consistently when navigating around steps to reproduce add privacy setting to your dev config something like privacy updatecheck false checkout pr 5706 ensure your assets are built run `force migration true npm start` to force run the migrations consistently you should see `migrations adding privacy notification` in the output login to your blog you should see blue alert navigate around the alert disappears it should stay refresh on the content screen it doesn reappear refresh on the editor it does reappear but with flash dismiss the alert it correctly never comes back again expected behaviour the alert remains at the top of the screen until such time as it is dismissed once dismissed it should not appear again >>>blocker bug
regression production build is not outputting the correct files the `grunt` `ember cli` build tools are no longer generating all of the files needed to create fully built version of ghost `grunt init` should result in `ghost css` `vendor css` `ghost js` and `vendor js` being output to built assets `grunt prod` should result in minified versions of the same files `ghost min css` `vendor min css` `ghost min js` and `vendor min js` being output to built assets in addition to the non minified versions currently it seems that `grunt prod` is doing things wrong it creates `ghost css` instead of `ghost min css` it completely overwrites all the other files in built assets the end goal is to end up with all files so that these can be bundled into the release zip without the sources >>>blocker bug ember
clicking resend on an invitation appears to do nothing when mail config is incorrect clicking the resend link on an invite gives no indication that anything is happening until eventually an alert is displayed or if you kept clicking the link because you thought it was broken many alerts are displayed >>>bug
bug tag page allows invalid tags the tag page currently allows me to insert tags that are not valid in the psm an easy example is which can be added on the tag page but not in the psm where the comma acts as delimiter to finalise tag >>>bug
bug tag page tries to save tags with no name the tag page allows to add tags and edit existing ones it currently fails to prevent empty tags from being saved steps to reproduce add new tag make sure it is saved clear out the name field tab out of the field watch the console log typeerror cannot read property message of undefined it tries to show notification but the server responds with the tag optimally this should be caught on the client side with inline validation and prevent the tag from being saved >>>bug
bug editor crashes in safari osx in safari on osx new post paste some text in as title click on main editor area whole editor view goes white nothing happens until whole app is refreshed console says https www dropbox com egh3nt7piuv2smz screenshot 202015 08 17 2012 18 30 png dl 0>>>blocker bug ember
bug setup breaks with invalid mail config issue summary invalid mail configuration breaks setup at step steps to reproduce prerequisite fresh ghost installation invalid mail settings go to ghost setup two` insert email username password and blog name press `last step invite request times out and you are stuck in the setup process pressing the button again says that the setup is already finished console output assume that step three will show the same behaviour technical details ghost version master latest commit 24b8605c5208c2fbdefb68fceb7db3662225ed4f client os osx server os vagrant node version 10 36 browser chrome database sqlite>>>bug
zelda errors in console this is about to be the worst bug report ever http puu sh jxpld png ve seen this in the console quite bit the closest can get to reproduction case is click around lot really fast in particular between the editor and content screen it doesn seem to break anything but still it seems like it probably not good thing wink on one or two occasions have also seen the editor not load with an error to do with `getvalue` or `height` not being defined haven recorded these errors but will keep an eye out to take screenshot figure out reproduction case thought it was worth mentioning soemwhere >>>bug
bug signing up with another user email breaks flow issue summary clicking on user invitation email takes you to the signup form here you can change your email address if you change your email address to be the same as an existing user then you will correctly receive an error that the email address is in use http puu sh jxulm c85aa6e26a png after this clicking on the `create account` button does not allow you to change email address and does not transition user to admin from the console you can see that the validation token is now invalid and the user has been created you can now log in using the original email address and password provided http puu sh jxupc 5383db65bd png possible solutions include api change not invalidating token or saving user if user email is not unique on `error sqlite constraint unique constraint failed users email` error continue with authentication and transition to user profile page possibly show the error as alert or notification at this point lock out email address for signup page technical details ghost version master latest commit 0f9f0dd69f8c85569b087f70170de930bfb30511 client os win ultimate x64 node version 12 browser chrome version 44 2403 130 database sqlite >>>api bug fix_wanted
zelda audit followup of 5314 all tested in safari for osx am actively working on these issues broken publish menu position image https www dropbox com tlzbnb92w9r4ftn screenshot 202015 08 11 2009 27 58 png dl dropdown shadow too heavy image https www dropbox com vtt1h6xq0jforxv screenshot 202015 08 11 2009 29 01 png dl team is lowercase and author name is cut off on author profiles image https www dropbox com enm9dw3q464ro7u screenshot 202015 08 11 2009 31 24 png dl button alignment and button text alignment are wrong on author cover image upload modal image https www dropbox com 4s5uvj9e4lx8wal screenshot 202015 08 11 2009 32 14 png dl loading buttons are not centered no indication that saving settings has succeeded view blog contrast too low full name should align with fields below image https www dropbox com pleqgee9ljrc6dl screenshot 202015 08 11 2009 38 45 png dl button text alignment on invite user is wrong image https www dropbox com 12aftfc4ivbh50l screenshot 202015 08 11 2009 39 44 png dl invitation confirmation should be notification rather than an alert image https www dropbox com 5mxtultlph8yejr screenshot 202015 08 11 2009 40 51 png dl there is no indication of any kind when you resend and invitation unstyled validation on settings general image https www dropbox com vuxn780stm1e4o1 screenshot 202015 08 11 2009 43 11 png dl subsequent error loop of death image https www dropbox com 2xou2iw1dbushqy screenshot 202015 08 11 2009 43 47 png dl console https www dropbox com uzjt2zod4h85q4f screenshot 202015 08 11 2009 45 04 png dl further saves of settings general do nothing contrast on tag description too low image https www dropbox com 6g5bcnz8pm3x2zi screenshot 202015 08 11 2009 46 31 png dl settings menu image upload by url button alignment is wrong image https www dropbox com qflwdtb0ofj7v1u screenshot 202015 08 11 2009 47 05 png dl meta data submenu missing right chevron on tag settings menu image https www dropbox com m1obs5iuije1m22 screenshot 202015 08 11 2009 47 40 png dl tried to save user after changing role from author editor infinite loading button nothing happened for some reason clicking anywhere in the content highlights the entire thing image https www dropbox com 17hrh910dgvm1fw screenshot 202015 08 11 2009 50 57 png dl validation causing forms to load with green icons should be grey image https www dropbox com d0g0fn08gfib7ek screenshot 202015 08 11 2009 54 33 png dl signin form should not be validating inline if field is empty image https www dropbox com 1qscel0dnahxtp5 screenshot 202015 08 11 2009 55 35 png dl not enough space for validation on signin form image https www dropbox com 1qscel0dnahxtp5 screenshot 202015 08 11 2009 55 35 png dl editor frequently ends up in state where the loading button is permanently spinning for no reason when you open it seems to happen when loading spinner has stalled out or messed up on previous screen image https www dropbox com wmw866rklr3apt2 screenshot 202015 08 11 2009 57 38 png dl edit icon on content management screen should not have an active depressed state hit area on the icon is way too small can actually sign in at all on chrome licecap https dl dropboxusercontent com 453148 licecap signin gif terminal https www dropbox com gihwhsqbv1l5p5k screenshot 202015 08 11 2010 14 00 png dl console https www dropbox com w5qhhar6hu64nyx screenshot 202015 08 11 2010 14 45 png dl when then manually refreshed was already signed in autonav flickering safari https dl dropboxusercontent com 453148 licecap menu safari gif chrome https dl dropboxusercontent com 453148 licecap menu chrome gif the width of the publish button is being set with js why which is breaking whenever the content changes image https www dropbox com aygs2ir3tpe6wva screenshot 202015 08 13 2009 03 08 png dl publish button height has regressed image https www dropbox com uu6zl1w03xk53pb screenshot 202015 08 24 2013 06 36 png dl cmd backspace does not work to delete post in safari content mgmt screen tag input has unintentional box shadow image https www dropbox com cdyb9d22mgu39js screenshot 202015 08 24 2016 26 29 png dl the download count on setup is incorrectly formatted needs comma image https www dropbox com zb07nvrjmwd9kgr screenshot 202015 08 25 2010 23 57 png dl do not validate empty form fields on setup image https www dropbox com mkrza15dgabrrrv screenshot 202015 08 25 2010 25 12 png dl pressing tab after the last input field takes keyboard focus to address bar should be submit button image https www dropbox com 9g9puteifgkx8w5 screenshot 202015 08 25 2010 26 52 png dl user invite validation should be properly coloured image https www dropbox com 9iyqz4mt8bqpn2n screenshot 202015 08 25 2010 27 49 png dl validation message does not disappear even though have fixed it image https www dropbox com wo9o29vw4smr47z screenshot 202015 08 25 2010 29 08 png dl can we inject that validation message into the button instead of under the textarea failed to send invitations come on now aside from bad grammar this also needs to be more helpful and offer suggestion as to why this might be the case image https www dropbox com hrt616htj7laroh screenshot 202015 08 25 2010 30 58 png dl duplicate alerts should not stack image https www dropbox com 6r4tjnvdj8awiso screenshot 202015 08 25 2010 31 29 png dl when click back to step my password field is empty and validation is red now don know if need to enter this again or not has this step already been completed do have to do it again genuinely confused and know how this works roughly image https www dropbox com mlhg1k411x4sw2x screenshot 202015 08 25 2010 32 22 png dl hang on what instructions why do need instructions image https www dropbox com qlj78bozz9heumy screenshot 202015 08 25 2010 33 42 png dl clicked on forgot password and then nothing happened at all except the button disabled itself what am supposed to do now also clearly it couldn send the email haven got any mail svc configured image https www dropbox com a9nuqvuwxo6c7sb screenshot 202015 08 25 2010 35 14 png dl oh after like 10 mins this appeared image https www dropbox com icfoigbo10cls3b screenshot 202015 08 25 2011 00 21 png dl by hannah gravatar behaviour doesn fire until blur moved to 5797 skip to content link doesn work detailed comment https github com tryghost ghost issues 5652 issuecomment 134717270 need to hide search bar using tab navigation on tag page tsm causes meta menu to half open image http puu sh jolpo png reproduce by putting cursor in name field and tabbing until you see this session expiry issues loading interstitial pre app loading screen moving to post zelda double click to open post not working on content screen no validation on user invites loading buttons don know how to solve when an action takes more than 1s the loading spinner makes sense in button but when an action takes 1s adding removing loading spinner makes the button feel broken think we need mandatory success animation which can follow the loading animation when the route is not changing don think this is going to be easy also when logging in the loading button stops spinning before the admin loads this should not happen it should keep spinning all the way until the route changes without ever stopping mobile all tested on latest chrome for ios small viewport title cut off image https www dropbox com 57trbmqi1plmkyi screenshot 202015 08 11 2010 02 50 png dl mobile menu should close on route change collapse sidebar icon should also close mobile menu mobile menu hit area too small horizontal scroll overflow when mobile menu is open can edit any post when you tap on post in content mgmt nothing happens need way to trigger mobile uploads>>>blocker bug css design ember epic mobile qa
improvements to spin buttons with the merge of 5633 spin button component was added to the ember app and it was placed into most places in which it was needed however there are couple of improvements that can be made to some existing places and some new places that the component can be added to fix spinner disappearing too quickly on signin when signing in to the ghost blog the spinner disappears after pressing sign in but before the page changes so there is bit of delay between the two there are couple of ways can think of have tried to fix this tried adding the code to change the button from spinner back to button into the `sessionauthenticationsucceeded` method of the application route this decreased the delay somewhat but it was still noticeable the only other way could think of to do this is to add something into the authenticated route file that would reset the spinner button on the signin controller the only problem with this is that it would apply to every route and it would run regardless of whether or not signin just happened which seemed to me to be overkill add spin buttons to modals while adding spin button to the login modal was fairly simple adding it to other modals presents somewhat of complex problem due to how the modal submit close actions work it makes managing the spinner through async requests tricky this would be nice to have for certain things like the importer >>>ember
tag component behaviour bugs typing naturally in the new tag component doesn always give nice ux at the moment certain actions can result in duplicate tags it also seems that the tag component loses focus after some actions which means for example if you hit backspace after doing the wrong thing you can end up navigating back away from the editor here are couple of reproduction cases duplicate tag entry reproduction steps start typing tag that exists halfway through typing the tag press the `tab` key the existing tag is entered twice http puu sh jwsp3 gif note if you press `enter` or halfway through instead the correct thing happens that is the half written tag gets added as tag and added just the once http puu sh jwse9 gif reproduction steps start typing tag that exists once the tag is written in full complete the tag by pressing the `tab` `enter` or key the existing tag is entered twice http puu sh jwsfj gif note clicking on the tag will result in just one tag being entered lost focus reproduction steps fill out the tag component with tags using one of the methods which causes duplication above place the cursor at the end press backspace twice to delete the tag the component loses focus and pressing backspace again to delete the other tag will cause the `back` navigation to fire reproduction steps start typing an existing tag complete the tag the component loses focus http puu sh jwt2l gif whenever typing in the component adding or removing tags the component should retain focus whilst raising things here think the intention is to get the `x` icon back for removing tags re add `x` icon for removing tags>>>api ember
bug publish button dropdown incorrectly positioned when you open the dropdown menu for the save button it appearing in the wrong place http puu sh jufyw png not 100 whether these are correct so including images to be sure http puu sh jugaq png http puu sh jugdn png this is happening on master it was ok back when this was merged 5406 not yet found the point at which it changed >>>bug css
user flows on submit server error message on the various user flows login flow password reset flow form you get to from reset email user signup form you get to from invite email setup there is red error message that is shown below the submit button which currently reads the password fairy does not approve http puu sh jq8lr png this error is the intended location for any error message which occurs on submit if user submits the form with inline errors uncorrected or if the call goes off to the server and gets server side message like incorrect password the language of the message is an indicator that we wanted to update the messages to be friendlier more fun but that can will be done separately the first change that needs to be made here is to use something like `showflowerror` function to display errors that come back from the server in this location rather than as big red alert the second change is to be able to show some sort of message that summarises the errors if there are still inline errors when submit is pressed this could be generic boring please complete the form message to start with ideally it might pick one from set of random generic error messages or be able show something specific to the field that is incorrect not sure what information is available or what is possible here so it would be interesting to get some suggestions for what can be done the aim is to inject little bit more personality into the flows improve the user experience when things aren going to plan >>>ember
support fenced code block in list it would be great if we can do something like this list item with some code sample console log hello world >>>bug editor in_progress
url leading double slash protocol inherit thing doesn show in preview no idea what it called but the that you can use in url to inherit the protocol doesn show preview not sure if this is intended or not but it would be nice thing to have screenshot 2015 08 02 18 08 30 https cloud githubusercontent com assets 6254332 9027149 8f6dff1a 3941 11e5 8ec0 8c57bce87cbb png note that it works fine if were to put protocol >>>bug editor in_progress
i18n harvesting server side strings the problem ghost is currently pretty much uk based english language only and has barely any features to account for timezones locales languages alphabets keyboard layouts or anything else that isn utc english in either the admin or in themes even the usa folks luck out sorry all this is set to change with full support for multiple locales and languages across the admin and your blog posts src 3801 the solution see 5345 for full details the first phase of the multi part rollout is to remove all strings that are hard coded in the app and put them in centralized location referred to as harvesting at the end of phase english would still be the only language supported in ghost and there would be no noticeable change to the end user but it will put things in place where translations can start taking place but this is big job and no one person can do it all alone unless you re brave and have lots of free time each piece of the string harvesting can be done separately and referencing this issue which make few good small issues for either beginners or folks that want to contribute but may not have lot of time free time this commit is to help demonstrate how to go about harvesting strings and replacing it with the proper i18n function https github com morficus ghost commit a1559cde068f1861bf672e66ef2354c4d1fb6288 ps this particular issue is focused only on harvesting string that are server side there will be another issue for client side strings tasks to grab task just leave comment below indicating which you will be working on places that have lots of strings across many files core server api core server data places with healthy amount but not too many files core server models core server helpers core server middleware core server apps places that have small amount of strings that need harvesting core server controllers core server config core server permissions core server utils core server ghost server js core server index js core server mail js core server require tree js core server update check js>>>fix_wanted i18n
api joins relations refactor this issue is little bit of mixed bag needed to brain dump all of the small join relation related tasks that need to be done to ensure we get consistent behaviour across the api joins relation handling move all the handling of joins relations into one place posts tags author tags posts users posts roles count handling change `post count` include on tag endpoint to be `posts count` add `tags count` to posts endpoint and `posts count` to users endpoint perms cleanup once public endpoint perms are in place properly 5614 ensure that the inclusion of posts adheres to the same policy once public endpoint perms are in place properly 5614 ensure that the inclusion of counts adheres to the same policy overhaul next previous post implementation so that it is possible to include `next tags` and `next author` etc fix 5150 once the filter parameter is in place 5604 get rid of the tag author parameters for posts and the role parameters for users provide access to more joins relations users by role maybe allow for include of posts from tag or user endpoints consider adding support for relations between users and tags through posts listing tags for an author or listing authors for tag although this is probably something for later version >>>api
api public endpoint permission handling public access rules ghost api has number of endpoints which should be available for what we refer to as public access essentially any data which can be accessed legitimately from the frontend of blog ought also to be accessible through other clients as described in 4004 public access will still require client id so that this access can be revoked the frontend controller code which handles outputting data via theme is client of the api so is the get helper 4439 and also javascript code in the theme which may make requests via ajax our plan is to have default clients which automatically get access just like frontend controller theme code similarly to the frontend controller the get helper uses the internal method call version of the api so it doesn need client id each blog will get default client id which is made available to any javascript in theme issue 4184 so that it can make ajax calls and eventually it will be possible to register custom clients as well the endpoints that will be public in the first iteration will be the browse read endpoints of the post tags and user resources several of the authentication flow endpoints are already public as they happen before auth is available every other endpoint should remain behind user auth for the time being settings and config will need consideration for public access shortly after and the other endpoints will become available with the introduction of full oauth flows for clients the rules several of the endpoints which are public have very strict rules around what information that can be accessed from that endpoint when the request is public posts only `published` posts may be accessed unless draft is specifically requested via the uuid which cannot be looked up via the public api users only `active` users may be accessed email addresses and passwords must not be returned tags no rules yet but private hidden tags may change this in future tasks checklist the following tasks are required to complete this work make the posts tags and users browse read endpoints accessible for public requests ensure that draft posts and inactive users cannot be accessed by public requests ensure that the rules remain in place when making requests across relations tag posts or tag posts count ensure that the rules remain in place when the `filter`parameter is used 5604 ensure that user email addresses and passwords are not returned for public requests ensure that no other endpoints can be accessed determine what the public access behaviour should be for blogs which are marked as private all http requests to the api should require the same cookie note on the settings endpoint when made publicly accessible settings will have the rule that only settings with type `blog` and `theme` can be accessed publicly the private blog `isprivate` and `password` settings are currently incorrectly classified as `blog` settings and would need to be changed before the settings endpoint can be made public fix settings endpoint>>>api permissions
bug subfolder and post title string issue summary publishing post with the same beginning title as subfolder results it post not being linked properly in index steps to reproduce run ghost installation on sub folder domain com blog publish post with title of blog title domain com blog blog title go to index page domain com blog click on newly published post error produced domain com blog title this is bug because posts on index page will not be linked to the blog post resulting in get error post still appears but will be incorrectly linked technical details ghost version master latest commit 1e630e6c90670026e24fee066f905987b499e6ae client os mac os 10 10 server os ubunutu 14 04 lts node version 10 37 browser chrome 44 2403 107 64 bit database sqlite>>>bug fix_wanted
api filter parameter gql filter queries spec this spec issue describes the `filter` parameter originally mentioned in issue 5463 https github com tryghost ghost issues 5463 however it contains more in depth spec than usual due to the complexity of the feature this issue serves as basis for documentation whilst the feature is in active development as well as giving basis for testing table of contents summary summary key contextual information context proposal proposal spec spec implementation implementation examples examples summary the idea behind filter queries is including additional parameters in `browse` api requests causing the result to be filtered in some useful way this provides an additional level of power and flexibility for users interacting with their data in themes apps and in the admin ui the initial focus is on the ability to do advanced queries against posts tags and users the following document outlines detailed proposal for query language exposed via top level `filter` property available when accessing the api from various tools key contextual information the ghost json api supports full bread operations however filtering only applies to browse requests resources there are main resources in the ghost json api which are public resources and have clear use cases which require advanced filtering posts tags users relations the following relations need special treatment when querying across resources posts have many tags posts have one author users tags have many posts users have many posts additionally the relations business logic in blog reveal the following important relational data concepts each post has next post and previous post each post has tag count each user has post count each tag has post count api access tools there are key tools which can be used to request data from the ghost json api which need to be considered restful http calls `get api posts limit 5` method calls used internally in apps `api posts browse limit the in progress get handlebars helper get posts limit proposal adding advanced filtering to ghost json api via top level `filter` parameter which accepts string representation of an sql query highly optimised for the kinds of queries which we expect will be common to ghost but flexible enough to grow outside of anticipated use cases top level filter parameter top level `filter` parameter will provide advanced querying capabilities available in all tools in standard way such that the parameter value is always string http `get api posts limit filter method call `api posts browse limit filter get helper get posts limit filter in both the method call and get helper syntaxes the filter parameter value will be surrounded by double quotes avoiding double quotes inside the string is therefore requirement in the http version the string will need to be url safe url encoding decoding will be required filter parameter values the key requirement of the `filter` parameter is to accept values which can represent the rough equivalent of the `where` clause of an sql statement language diagram https www sqlite org syntaxdiagrams html expr the fundamentals of this proposal are therefore the definition of language which fits ghost use cases and can be converted into sql through ghost bookshelf knex model layer sql capabilities are extensive to start with the focus for ghost is on supporting logical and or combinations comparisons using equals greater than less than with support for not the importance of the relation between post tags also drives the need to support in filter anatomy an individual filter is composed of parts the property that is being filtered the operator currently always and the value filters need to be combined in groups of or and rules the property needs to support path matching `tag` currently really means `tag slug` the operators need to include equals not equals and numerical comparisons the values are strings numbers nulls etc that are matched compared against filter style syntax there are number of common styles for combining properties operators and values into expressions this proposal borrows heavily from the style used in github gmail slack amongst others `label api` or `from hannah` or `stars 10` the syntax of this style is the use of property operator value triplets in the form property operator value where the colon is separator and operator is optional this syntax is short and compact for the common use cases in ghost for example `featured true` `tags photo` `author john` `image null` `posts count 10` this syntax is also flexible enough to be extended to support multiple complex expressions by combining the property operator value triplets together with other symbols to represent and or following on from using for negation the proposal is to use for and as well as for or `featured true tags count 10` `tags photo tags video` this is then used inside of the `filter parameter http `get api posts limit filter tags photo featured true` method call `api posts browse limit filter tags photo featured true get helper get posts limit filter tags photo featured true filter query language spec syntax filter expressions filter expression is string which provides the property operator and value in the form property operator value property path representing the key to filter on separator between property and an operator value expression operator is optional so on its own is roughly property matches za za z0 can contain only alpha numeric characters and cannot contain whitespace must start with letter supports separated paths `author name` or `posts count` is always lowercase but accepts and converts uppercase filter expressions can be combined using the following represents and represents or filter expression overrides operator precedence operator the following operators are spec for the first version not operator greater than operator greater than or equals operator less than operator less than or equals operator value can be one of the following null true false number integer literal any character string which follows these rules cannot start with but may contain it cannot contain any of these symbols unless they are escaped cannot contain whitespace string surrounded by single quotes any character except single or double quote surrounded by single quotes single or double quote must be escaped can contain whitespace string can contain date any format that can be understood by `new date special characters filter expression separator and symbol or symbol left parenthesis operator precedence right parenthesis operator precedence not operator greater than operator greater than or equals operator less than operator less than or equals operator left bracket in operator right bracket in operator single quote string syntax double quote not permitted unescaped whitespace rules whitespace is not permitted inside of property or inside value unless the value is surrounded with quotes everywhere else whitespace is ignored and therefore becomes optional this allows for whitespace to be used to improve readability if necessary as any of the following are equivalent and will be accepted `featured true posts count 10` `tags photo tags video` `featured true posts count 10` `tags photo tags video` `featured true posts count 10` `tags photo tags video` `featured true posts count 10` `tags photo tags video` implementation hold on to your hats this is where shit gets real creating parser as far as can determine the set of rules above describes language that can be represented by an unambiguous context free grammar and therefore understood by an lalr parser what this means is that we can represent the set of rules in standard way and then use jison http zaach github io jison to generate parser in javascript which can in turn be used in ghost to understand filter query strings and convert them into something more useful essentially all that has to be done is write set of rules the hard part of this is done neat the parser should live in its own repository with full suite of tests and become dependency of ghost the repository for it is here https github com tryghost gql parser output the next step is to determine what the something more useful that the parser is supposed to output looks like the essence of what we re doing is representing sql so we could output the sql equivalent of filter query string and then pass that to `knex whereraw which will then run the query for us inside the model layer of ghost in fact this is what did for first test that all this works wrote rudimentary version of the rules output raw sql and ran it through knex and it worked the downside to parsing straight to sql is two fold firstly by translating from one string format to another there is little opportunity for semantic analysis that is to validate or operate on the property and value parts of the query to check they exist or are permitted filtering by the `password` property of the user resource should not be permitted for example secondly it seems to me that running raw sql queries even through knex is likely to result in security problems instead of churning out sql the parser needs to output an intermediary format that we can use to get all of the useful and contextual information out of the query this format should be something we can easily pass to knex query builder functions like where and orwhere which take property and operator and value so that we can run the queries through the query builder the intermediary format must not lose any information from the query json format the proposal is to use an array each filter expression will be converted into an object with key value pairs representing the property operator and value arrays are ordered and so the order of the array will match the order in which the query should be built all except the first item of the array should also indicate whether the expression is to be combined with and or or something like this to maintain precedence overrides single object in the array can alternatively represent group that contains sub array of objects the group object must also indicate whether it is combined using and or or this format lends itself nicely to building queries using the knex query builder functions as we can cycle through the array and recursively through groups calling `where` or `orwhere` as necessary having json format with named key value pairs for property operator and value makes it easy to use lodash magic to pull out parts of the query all properties or all values and validate them post processing once we have our filter in json format and we can pull out properties table field names and values we can start to do some validation and processing of the information in order to ensure the queries are safe and sensible public vs private certain properties should not be filtered upon `user email` `user password` `user status` and `post status` as all of these properties are affected by permissions not intended to be available to public endpoints for now as we re only intending to offer official public only beta api access via http and the get helper these properties could be santised out entirely if it easier or otherwise they should be santised out if the context is public see the change coming with public permissions https github com erisds ghost commit 0d1ae6e163308975749cc352597c93faab6e0e2e diff 6fb80b4d82076d007bffbc34d762d12ar23 for more context for what mean here standard validation all of the properties should be known attributes of the models and all of the values should be valid values for those attributes according to our standard validation mechanisms joins any reference to related table needs to be translated into join dates any string value used along with date property `created at` `updated at` `published at` `last login` should be converted into date that sql can understand providing it is something that can be parsed using javascript `new date some care needs to be taken here to check this will work across sqlite mysql and pg as they treat dates differently and bookshelf knex is not good at handling this yet special rules there are few queries which should have special rules for how they affect other parts of the query the single example at the moment is filtering posts by tags where tag slug is `in` set or in fact any use of `in` where using `in` we need to be sure that we still return distinct items in the set and the correct number when using `in` the default order should naturally change to be ordered by the number of matches in descending order when requesting posts with tags `in` group the query output should be similar to or have the same affect as this `select from posts inner join posts tags on posts tags post id posts id inner join tags on posts tags tag id tags id where page false and status published and posts id 11 and tags slug in markdown list group by posts id order by count tags id desc posts status asc posts published at desc posts updated at desc posts id desc limit 5` note the `group by` and `order by count tags id parts examples here is separate gist https gist github com erisds f516a859355d515aa6ad outlining some example queries in http method call get helper form https gist github com erisds f516a859355d515aa6ad feel free to suggest more example use cases in the comments >>>api
api order parameter as mentioned in 5463 we want to add new `order` top level parameter to api browse requests the `order` parameter allows user to specify which order they like their results to be returned in the default orders across the key resources are currently posts posts status asc posts published at desc posts updated at desc posts id desc` users users last login desc users name asc users created at desc` tags none database default usually by id the `order` parameter should accept any valid sql order by clause which does not contain quote marks `users last login desc users name asc users created at desc` the comma space separator between rules and the space separator between property and direction are required this means that valid value for the `order` parameter can be validated to contain only alphanumeric characters dots underscores and spaces with the property being any string with those characters except the space and the direction is always either `asc` or `desc` upper or lower it should be possible to design regex to match this pattern the `order` parameter should also validate that the provided order properties are valid attributes for the model any field with doesn specify which model it belongs to should default to whichever model is being queried and this should be set explicitly it should be possible to translate this format into json format that matches the one returned from `orderdefaultoptions` https github com tryghost ghost blob master core server models post js l298 using split on the comma and space the model must be included for each property this will be added to models soon for posts the default order would be translated to the following json objet that object can then be used to apply the order much as is already done by reading `options order` and using the value of `orderdefaultoptions` if it doesn exist https github com tryghost ghost blob master core server models base index js l293>>>api
api fields parameter as mentioned in 5463 we want to add new `fields` top level parameter to api browse requests the `fields` parameter allows user to specify exactly which fields from model should be returned to limit the size of the response it can be implemented by using the columns property http bookshelfjs org model fetch of the bookshelf fetch method which hooks into the column method http knexjs org builder column of knex any specified fields should be validated to ensure that they are valid attributes of the requested model note that this should include the `url` attribute of posts even though it is calculated and not include the `password` attribute of users as that is protected the response should be the standard format but with only the fields that were requested support for relations where they exist tags for posts roles for users would be bonus but not sure whether bookshelf knex supports this just now so it can be added later if it adds too much complexity the main purpose of this feature short term is to provide for only returning titles names slugs for the autocomplete 5343 note have started implementing this in 5518 and discovered that whenever you request an unknown column the response returned is somewhat strange the column name is surrounded in quotes specifying `url` for `posts` results in fields being returned the proper `url` attribute and one quoted like url would suggest we need to upgrade both bookshelf knex and if it still happens raise this as bug whilst also implementing workaround in the tojson method >>>api
use `updated at` to prevent overwriting new data with old data ghost editor is not yet collaborative which is sizeable issue that we want to resolve properly in the not too distant future however think in the short term we could be preventing issues like 4999 and 5450 by preventing overwrites of data when we know we already have newer version in the database when put request is made it is made with complete resource that includes the `updated at` timestamp with our ember admin that data is returned from the server and simply resent with the next save the timestamp is not modified by the client and nor should it be on the server we could use this information to determine whether or not it is safe to save if the `updated at` timestamp is the same or newer than the one currently in the table then we can safely save the data however if the `updated at` timestamp is older than the one in the table then we have more recent version of the data in the database and should not overwrite it with the data that was sent to the api it is also possible to implement slightly smarter version of this which also checks if any of the other data in the table is different if the two versions are the same there no need to do anything the request to lookup what is in the table and the request to update it if safe should be contained within transaction to ensure that we don end up with race conditions believe the correct thing to do in the case that the `updated at` timestamp is out of date and the data cannot be saved is to return `409 conflict` error the recommendation is to return enough data to resolve the conflict but not aware of any recommendations on the form of the response think using our normal error format is fine short term there no need to do fancy conflict resolution handling as long term we will hopefully solve all of this with more advanced solution like operational transforms for now showing an error and warning the user to save their version elsewhere and then refresh is one option perhaps slightly nicer option is showing the warning in modal and giving the user the option to save anyway this would require adding force save flag to the put request this is slightly dirty short term solution but my thought is that it is better to prevent overwrites than to mask that they are happening by doing them blindly although this mostly applies to posts think it makes sense to implement it in such way that overriding `updated at` is prevented across all models by default >>>api data in_progress server
making ghost compatible with showdown main most of the bug reports here regarding markdown have already been fixed in showdown main so ve been working on adapting ghost custom extensions to run with showdown latest ve split ghost custom extensions into their own repository and ran them against showdown demo editor https github com showdownjs demo ve also tested them in ghost editor although haven ran the automated tested as haven had the time to properly install and configure casperjs on windows some bugs are still present most due to limitations in showdown own extension system which planing to address in the next showdown minor bump planning on finishing the testcase for each extension in the next week and then issue pr against ghost with the modifications in the meanwhile would love if you could take look at the extensions themselves and give some feedback https github com tivie showdown ghost imagepreview https github com tivie showdown ghost extra https github com tivie showdown highlight https github com tivie showdown footnotes if you regard them as good starting point can fix the remaining bugs implement the rest of the features and switch the repos control over to you >>>editor in_progress
test random failure in settings model seeing this one pop up regularly at the moment >>>bug tests
api test doc coverage overhaul this issue is bit out there ideally before we ship public version of our api we need to make sure the test coverage is excellent and also get coverage of the endpoints their options into our documentation doing both of these requires the same thing to happen for someone to build up extensive knowledge of each endpoint and what it is capable of and ensure it both tested and documented that pretty time consuming task testing the heart of ghost api lives in the functions in `core server api js` `posts api browse currently those functions are tested in the integration tests in `core test integration api` these tests go through the complete stack no stubbing or mocking and test what actually happens some of the endpoints are well tested there others not so much if you re using the api over http those functions get wrapped by the `http` method in `core server api index js` that method is sort of middleware taking request with the `req` and `res` functions converts the incoming options from being in request format to being in method call format of `object` and `options` calls the api method and converts the result into json or correctly formatted error to be sent in response the http version of the api is tested in the functional integration tests that live in `core test functional routes api` these tests also go through the complete stack no stubbing or mocking and test what actually happens but start with an http call rather than with method call again some of the end points are well tested there and others are not some endpoints are tested by one set of tests and not the others some have both as well as the http call wrapper around the methods soon we re also going to have get helper wrapper around the methods wouldn expect to have yet another suite of integration tests for that too instead believe what we should have is complete suite of integration tests for the method calls the tests for the http wrapper should then be unit tests which stub out the method calls and check that we get the correct response including status code headers and body format this means `core test integration api` should have 100 coverage for the tests and we then have unit tests in `core test unit api spec js` which just tested the methods in the `core server api index js` file all of the http tests in `core test routes functional api` can go away or we can keep single set of integration tests in `core test routes funcitonal api spec js` to check key concepts rather than every endpoint in detail coverage our coverage tasks currently only relate to unit tests integration tests tend to execute lot of intialisation code meaning that if they re included in coverage lot of lines get marked as covered when they re not being directly tested however it would be good to be able to get picture of how much test coverage there is on the api and so think it would be worthwhile to add second coverage task `grunt coverage api` or `grunt coverage integration` to run the integration tests or just api integration tests the grunt mocha istanbul https github com pocesar grunt mocha istanbul library we re using allows for configuration of multiple coverage tasks by adding new config https github com tryghost ghost blob master gruntfile js l266 and wiring it up to grunt task documentation documentation for the api can come in forms firstly it would be good to ensure that there is at least basic inline docs explaining what `object` and `options` are can be for each endpoint bit like this https github com tryghost ghost blob master core server api posts js l32 secondly we have api documentation setup in `readme io` but we need to populate it with the details of each endpoint anyone wanting to help with this will need to be added to the readme io project approach recommend that we start with the soon to be public endpoints read browse for posts tags and users once that is done we can extend out to edit add destroy for each of those and then to other important resources like settings >>>api docs tests
inline script in the editor has problems with put this in the editor ghost v0 var if alert yay then publish view the blog post in web browser would expect an alert box saying yay however we get javascript error inspecting the rendered html js code and we see var if alert yay it looks like some macro replacement magic is taking place replacing any characters with >>>bug editor in_progress
unable to add mailto links in navigation settings the upgrade to ember 13 has caused regression in https github com tryghost ghost pull 5008 my bad for not adding test when trying to add mailto links as navigation item the mailto link gets prefixed with the absolute blog url steps to reproduce visit the navigation settings page try adding mailto url notice it gets the base url appended it should be left alone technical details ghost version master post ember 13 >>>bug ember
pagination not working on tags endpoint the new `fetchpage` method does not construct working `count query for tags probably because the tags query it starts with already contains group by and an aggregate function for the posts count field >>>blocker bug server
update signup screen to use new profile image upload component the signup screen seen by invited users when they click to activate their account currently has no way of uploading the profile image we should use the new `gh profile image` upload component to add the functionality example implementation can be found in the setup two controller and template >>>ember
unable to test test functional client signin test js separately running `grunt test functional target client signin test js` fails every time with however the tests pass when run with the full test suite suggesting we have inter dependent tests >>>bug tests
user profile image component validation improvements the user profile image component was added in https github com tryghost ghost pull 5355 http puu sh iqsst png there are couple of finishing touches to wrap up if an invalid image is uploaded we should use gh alert to notify the user it failed currently once you add an image there is no way to remove it again if you decide you want to go back to having your gravatar johnonolan does this need to be possible also noticed that the email field is auto focused meaning if you go straight to upload an image you get an inline error about the email address being invalid should be an error saying it empty that quick change do we want to prevent the auto focus or is this error showing up ok >>>ember
user onboarding allow editing of user blog settings during setup this issue relates to the wiring navigation behaviour part of the user onboarding epic 5315 this issue replaces 5339 which was partially completed and became unclear in the user onboarding flow on step you see the form to add your user and blog credentials once completed you re taken to the user invite screen if you go back from here and then press enter you re told that the setup has already been completed the setup endpoint in the api now accepts put requests so the settings can be updated by resending them the form on screen two of the setup process should send put request if setup has already been completed which updates the details to the new version on successful completion the user should be moved to screen three again >>>ember installation
unable to complete invite user process steps to reproduce invite new user through the team page click the link in the mail fill in the form click create account nothing happens when clicking the create account button no visual indication or any network activity >>>bug ember
reset password screen has incorrect markup styles reached by clicking the link in the reset password mail screen shot 2015 07 07 at 15 13 27 https cloud githubusercontent com assets 415 8548556 5652780c 24bd 11e5 9561 cdbee7b731f7 png >>>beginner bug css
implement meta referrer tag with the advent of https as the new standard for the web referrer data has started to fall through the cracks in order to combat this we can implement an extremely simple meta tag which will bring them back moz have fantastic write up on how and why this is good idea https moz com blog meta referrer tag this issue is to implement default output of exactly within ghost head output on the next line after the `rel canonical tag >>>beginner
api permissions owner role should only be editable by itself the original spec for the owner role was that it should be different from an admin in the following ways there can only be one owner the owner cannot be deleted there must always be one owner only an owner can transfer ownership however this leaves gap in that it is possible for an admin to modify the credentials of an owner account admins are trusted users so this shouldn be problem however after further thought it seems this doesn really reflect the original intent of the owner role in that the owner was supposed to be privileged enough to maintain overall control until they decided to surrender it to another user therefore think it makes sense to change the permissions around the owner role such that the user with this role can only be edited by itself >>>api beginner
inline validation errors for valid fields aren cleared if other fields are invalid only observed so far when the validation engine is mixed in to model rather than controller it working ok with controller based validations as evidenced by it use in the setup two controller from initial checks it appears the validation check for the individual field is failing which results in the error message not being cleared >>>bug ember
emoji or unicode in general doesn get imported ve exported my settings since recently migrated from sqlite to rds and emojis didn get imported back update hmm is not only about the importing it also when save them back wonder if there misconfiguration on my end ve tried setting `charset` in the connection config no luck >>>bug importer
api apply pipeline refactor to the other endpoints in https github com tryghost ghost commit 51ac3f653251f59ace09255f8851fc5ee6b5759a refactored the post user and tag endpoints to use our pipeline https github com tryghost ghost blob master core server utils pipeline js promise utility this means that serving an api request becomes matter of taking inputs either just `options` or `object` `options` and passing them through series of functions which either return value or promise for value the output form one function is passed as the argument to the next forming chain somewhat similar to middleware stack if at any step there is an error or promise rejection the pipeline returns an error meaning that validation permission handling and data fetching can all be steps which return their own errors and prevent the process from continuing if they go wrong the best thing about this approach is that it wraps individual lines of endpoint code in functions which describe what happens like `validation` and `handlepermissions` rather than having large block of promise code this has reduced the codeclimate score as the vast amounts of code duplication are now obvious whereas before they were hidden by lines being in slightly different orders it would be great to continue rolling out this refactor across the other endpoints this could be done as single task or as one pr per endpoint some of them are trickier than others and in rough order of priority posts users tags settings authentication roles configuration themes upload slugs notifications db mail>>>api fix_wanted server
ghost overview this is place for me to bring together an overview of all of the work that currently ongoing towards the next release of ghost which will be with zelda we re undertaking enormous changes to the design of ghost ui at the same time we re hoping to land number of new features and improvements which build on the freedom zelda gives us and also leverage the major version bump as hint things might be rocky during the upgrade this time there are aspects to the changes that are going into each covered in more detail below zelda public api data migration zelda zelda is the ui redesign projects which also includes few major functional additions and changes autocomplete search box new onboarding flow overhaul of notifications alerts and inline validation rebuilding the tag component all of this work is tracked separately in 5314 public api we ve been talking for very long time about making our json api publicly accessible via oauth see the oauth epic https github com tryghost ghost issues 4004 the plan is to make this reality in but in limited way the read only public endpoints will be made available to themes via the get helper and also to public clients but without ui for registering new clients this means that it will be possible to fetch what we consider public data published posts tags and active users this will be considered public beta of the api the get helper allows for accessing that data inside theme so that it is possible to fetch tag list or recent posts etc issue 4439 javascript clients which run in the browser will also be able to access the data providing they have client id see 4180 it will be possible to insert new client ids directly into the db ui will come later we will also make default id available so that themes can easily make use of ajax to access the api see 4184 as well as making the data accessible we need to push to clean up the api and ensure that the available endpoints are truly useful the following are set of must have and nice to have api changes validation issues 2756 2758 in progress by erisds pagination with offset instead of page 5093 make the 401 error format consistent 5499 add `fields` parameter issue 5601 add the `filter` parameter issue 5604 move top level browse params to `filter` issue 5463 no more staticpages parameter better pages support api 5151 requires 5604 add `order` parameter issue 5602 ref 5463 finish pipeline refactor 5508 hold until validation is complete joins relations cleanup issue 5615 handling permissions auth public permission handling 5614 partial pr in progress remove auth from public endpoints 4181 implement auth for public clients with client id 4180 default client entry 4184 last but not least the get helper is currently single item initial get helper 4439 update get helper to work with filter param issue tbd improve the has helper issue tbd extras improve error messages figure out what to do with versioning data migration ghost internal migration system centres around changes to the database schema for there are number of candidates for things which may change the schema once schema change is initiated we can also hook in other migrations that don affect the database schema directly but require database version change to be triggered possible schema changes oauth clients 4174 this is required to make public api access reality user tour 5171 an additional field for the user table relatively straightforward and perhaps worth doing now post preview 5097 the spec for this is little simplistic so it may be worth doing this later when the spec has been reviewed and improved tag order issue tbd issue on this coming soon would be good to get done other migrations that need to be added in jquery removal 5298 this is long awaited change it would be preferable to get this done change private blog settings issue 5614 this is important for ensuring the api remains secure when public access is added extras update top gh contribs to better reflect who contributed to release refactor clean up and improve test coverage on ghost middleware 5286 prep work for channels see channels 101 https github com tryghost ghost wiki channels 101 >>>api epic
recurring functional test failures we re seeing couple of recurring test failures which means there likely timing error with these tests the main one is here an example https travis ci org tryghost ghost jobs 68531095 broken build plus the log link https s3 amazonaws com archive travis ci org jobs 68531095 log txt >>>bug tests
models make the changepassword and resetpassword functions consistent in the user model core server models user js` there are some functions which don follow the same pattern as the others most functions take either an `options` or both an `object` and an `options` argument the same as at the api level at the api level this is required see the rudimentary design docs https github com tryghost ghost wiki 5bwip 5d api documentation design at the model level it makes sense to keep it the same as this helps to keep the validation code minimal at the moment the `user changepassword` and `user resetpassword` functions take multiple arguments for each piece of required data example https github com tryghost ghost blob master core server models user js l595 which means the validation code in the user api https github com tryghost ghost blob master core server api users js l445 has to be more verbose to clean this up we should ensure that the `checkobject` function does some rudimentary checks and validation for the `password` object and then refactor the code to pass the object through to the model layer as single argument the result of these changes should be those functions taking `object` and `options` arguments which is consistent with everything else and no need for custom validation function in the api https github com tryghost ghost blob master core server api users js l445 >>>beginner data server
api make the 401 error format consistent at the moment the error returned from the api when you don provide authentication is in different format structure to other error messages from the api there super easy way to see what mean and test it using curl and the `authentication setup` endpoint curl http localhost 2368 blog ghost api v0 authentication setup setup status true curl post http localhost 2368 blog ghost api v0 authentication setup errors message setup has already been completed errortype nopermissionerror curl put http localhost 2368 blog ghost api v0 authentication setup type error message please sign in status passive the get and post requests both return json response in the correct format get returns 200 error with top level key and some data post returns 403 error with top level `errors` key an an error object however the `put` request returns 401 error with an error object without top level key there is rudimentary explanation of the design principles behind the ghost api over on the wiki https github com tryghost ghost wiki 5bwip 5d api documentation design which should shed some more light on what is wrong with this response the code generating the response is here https github com tryghost ghost blob master core server middleware middleware js l122 and an example of how errors are sent correctly is here https github com tryghost ghost blob master core server middleware api error handlers js l12 this should be straightforward change but some testing needs to be done to ensure it gets handled properly by the ember admin application >>>api beginner
require tree refactor or replace with dependency or both in `core server there file called `require tree js` which will load directory of directories or files and also has some code for parsing package json file it used mainly for loading `content themes` and `content apps` figuring out what in there and whether it valid hence the lumping together of package json stuff it bit of mishmash of directory reading code validation messaging it also kinda weirdly used to load all the model files in `core server models index js` essentially it seems to me to be bit of an iceberg it points at whole bunch of stuff that could be refactored cleaned up every time look at it end up on an alice in wonderland style tour of bits of our codebase that need cleaning up but it very very difficult to break down into small well spec issues perhaps we should replace some of the directory reading bits with dependencies and put custom tools in `core server utils` or perhaps we should look more carefully at how to group together code that deals with themes and apps sure there are modules out there for reading directories and ve seen one for validating package json files if we do need our own tools they should probably be in `core server utils` and be unit tested sure there are small bits that can be teased easily out so thought leave this issue here as route in to finding things to improve and an issue to tag against in prs >>>in_progress server
errrrr blogs no longer output urls for posts this is an enormous derp from me some crazy edge of untested code have fixed the underlying problem locally now adding test coverage flushed steps to reproduce go to the frontend of any blog running master click on post notice how you end up back on the home page aaaaaarrrrgggghhhh wonder how no one noticed for days technical details ghost version master post 7761873 >>>bug
group mail related functionality together ghost only sends types of emails at present welcome forgotten password user invite test email the code used for sending these emails the templates is currently quite spread out in the codebase recommend doing something like the following moving mail js to mail index js moving the `email templates` directory into the new `mail` directory reviewing the test coverage and seeing if it can be improved easily it would also be nice to maybe move the logic around sending each individual email into the mail api moving the `sendinviteemail` function from `api users js` into `api mail js` and doing similar for the welcome and forgotten password emails note that this requires changing api calls inside those functions to use the dataprovider directly otherwise there would be circular dependencies api mail js api user js api mail js there might be another way to do this the goal being to reduce complexity in the user and authentication api files and keep all mail related stuff together see also 5350>>>fix_wanted server tests
zelda mobile when mobile on content management screen single tap should open post for editing in place of double tap actually at the moment no quantity of taps work on mobile device when new route loads the mobile menu should close role label alignment is broken on small viewports view title being cut off in mobile browsers looks like flex grow issue hit area on mobile menu button is too small there is no mobile menu button on the about page tap actions on user menu dropdown are inconsistent as fuck sidebar nav items are too small main header is too big massive horizontal scroll when mobile menu is open about page is cut off at the top in mobile safari dropdowns need mobile positioning>>>blocker bug css ember epic fix_wanted mobile
blog title value is not correctly bound with ember go to blog settings change blog title save expected blog title updates actual blog title doesn update at all until browser is manually refreshed deja but can find an existing issue so maybe not >>>bug ember
browse api parameter design this issue recommends that we restructure the top level parameters for the api to only permit `include` `page` `limit` `filter` `order` and `fields` and explains why posts users tags are the most important resources in ghost and will be the most commonly queried our browse api needs to support an advanced set of querying tools so that those accessing the api directly via the get helper or via apps can perform the functions they need current state currently the browse endpoints support the following query parameters post `include` `page` `limit` `status` `staticpages` `featured` `tag` `author` user `include` `page` `limit` `status` `role` tag `include` `page` `limit` the `include` parameter is used to declare which related objects should be included in an expanded state in the result it is common to add include tags author` to post request the `page` and `limit` parameters are used to control pagination `page` defaults to `limit` defaults to 15 and accepts `all` as value all of the other parameters are intended for pre filtering the result set across other endpoints read we have url parameters like id or slug to fetch specific resource where these parameters are unique and guaranteed to return single result these filters are encoded in the url when using method calls url query parameters get merged together into options the problem with the current pattern currently in the api were adding top level parameters every time we want to add new filter adding `tag` then `author` then `featured` so on one small issue with this is the inconsistency across the endpoints although thats relatively explicable each resource is different the larger problem is that it creates an instant limitation if write api posts featured true tag photo author joe` this reads as posts which are featured and have the tag photo and the author joe but what if want to do an or or not theres no room to grow in complexity recommendation for the future my recommendation is to move our filtering parameters down level and create new `filter` parameter to house them api posts filter tag photo in the short term we can support very minimal set of combinations as the value of `filter` and long term this can be expanded to the rough equivalent of `where` theres bit more info on the filter values in the advanced filtering user content advancedfiltering section at the end as well as `filter` the top level parameters for the browse api would keep `include` `page` `limit` in addition we need to add support for two more api features order currently posts and users have default order which cannot be overridden and tags don even have default order the database returns it own default ordering is major missing feature of the api also needing its own issue the `order` top level parameter would allow us to do something like order name desc id asc` see issue 5602 for more details fields much less high priority providing `fields` parameter would allow the user to specify exactly which properties to return see issue 5601 for more details this gives us the following consistent set of parameters `include` `page` `limit` `filter` `order` `fields` page is meant to be changing to offset 5093 the funny thing about `status` it seems to me that `status` is in some senses bit of an oddball in our api whether or not to return published draft posts or active inactive users is incredibly critical to our business logic if request asks for publicly available resources published posts active users then all is well but if request asks for private resources then permissions need to be taken into account our permissions system isn very good at coping with logic like `if this is either public or the user has permission` and it also falls down massively when you get to relations case in point including the `post count` when querying tags does count which always includes draft posts regardless of the user permissions this needs an issue of its own to determine how to properly declare the difference between public and private access to ensure that the status is propagated through relations and to ensure that permissions are properly taken into account mentioning it here because filter status draft seems to me to obscure the importance of `status` one way to simplify this logic in the short term might be to remove the ability to do `status all` and or require `status` to be url parameter api posts is published only and api posts draft returns drafts this has some implications when we add more non published statuses in future like scheduled and also complicates the ui forcing multiple requests we may instead need to keep status as top level param and add some way to indicate switch the public vs privateness of the request always overriding status if the request is public advanced filtering this is covered in extensive detail in 5604 but just for clarity heres quick run down of how envisage handling advanced queries via the `filter parameter combos for or for and support for to change precedence seriously advanced operators for not for greater than for in paths for relations `filter author name joe bloggs tag photo video featured true `filter author joe author joanne tag photo depending on where this is used it may need to be url encoded the syntax works for urls method calls handlebars helpers and search boxes think it good balance between readable flexible the assumption is that `author` and `tag` are aliases for the slug property which can only contain meaning queries with these are largely easy to compose but there fall back to quoting strings with spaces etc also for clarity am very aware that this is super duper complex have been working on peg jison grammars to see what possible and am confident this recommendation will work for us summary ve written this rather long issue to explain the full thinking behind moving some parameters under `filter` and the big picture plan for how the api ought to look in the immediate future 2758 could be used to put in place the beginnings of permitting only `include` `page` `limit` `filter` `order` and `fields` at the top level related api order parameter 5602 api fields parameter 5601 api filter parameter gql filter queries spec 5604 api apply pipeline refactor to the other endpoints 5508 api no more staticpages parameter better pages support 5151 api pagination with offset instead of page 5093 >>>api
re add multi line placeholder for user invite in onboarding flow due to problem with compiling the template we had to remove the multiline placeholder for setup users see 5454 and the pr 5455 for where this got removed having multiline placeholder on the user invite textarea in the onboarding flow is part of the spec it an important ux detail to ensure it clear that emails should be added on new lines https camo githubusercontent com ed6dc6db78bbb6d94236589714ccda0499a0f6cb 687474703a2f2f7075752e73682f68584668742e706e67 there are number of options for how this could be done including but surely not limited to moving the placeholder text to the controller using some js to manipulate the placeholder after the dom is loaded using background image removing it on focus and adding it on blur if empty it fiddly little problem but one worth solving if we can >>>ember
bug corrections erase by cache issue summary hello we are three journalists using ghost for our blog we correct each other papers but some times our corrections are erase by cache if another writer don reload the content page before clicking the edit button sorry bad english steps to reproduce joe writes an article and goes to content on another computer bob opens that article and makes some corrections save and quit joe doesn reload content and just click on edit bob corrections are gone this is bug because well ajax is great but if many people edit post we gonna lost many corrections technical details ghost version client os mac os debian jessie server os not sure some linux think it simple host on gandi node version 10 database mongodb>>>bug ember
persist nav menu state between sessions add feature that tracks user preferences with the menu open or in autonav between sessions via localstorage essentially stop this from happening autonav https cloud githubusercontent com assets 1207005 12272337 38c9bd50 b91d 11e5 8119 424e8dfb1ad3 gif >>>ember
permissions for team area previously `settings users` was only visible to editors admins in zelda it should be visible to everyone in future we want to be able to click on user to take you to list of their posts but in mean time it should work like this the route should move from `ghost settings users to `ghost team everyone sees active users only editors and higher see pending invites only editors and higher see the invite users button only editors and higher are able to click to edit user for anyone who is not an editor clicking does nothing >>>ember users
bugs on url image uploader image https cloud githubusercontent com assets 120485 8178993 2c447dfc 140b 11e5 82ac 52062adcade8 png settings general blog logo upload modal trash icon shouldn be there at this stage input needs gh input`>>>bug media
ghost importer current state problems and future improvements this issue is to pick up where issue 4605 left off and consolidate the issues surrounding the importer into one place it is also to generate conversation on what people would like expect to see from the importer current state as it stands the importer can handle zip files containing images markdown files and the official json formatted file but not raw json it should probably be opened up to take raw json data as well problems there is some feedback at the moment if the import fails such as post with an unknown user id but there are other cases where it simply says the import has failed with no other useful information so we need to investigate all possible causes of failure and display more information if possible there is currently no visual feedback of potential problems we check the import file for posts and tags that have matching slug title or name but we do not display this information or compare it with the current posts and tags in the database which leads to duplications this can be found as well in issue 4685 there is no visual feedback of what the import file contained am about to make pr for this to get the ball rolling it is fairly rough and ready at the moment but better no information at all there are comments in the codebase about implementing dry run testing the import file comparing with the current database then providing feedback to the user prior to actually performing the import we could decide to complete the whole import process if no problems are found or have check box to let the user see details of the import first either way such as number of posts etc the feedback could come with options on how to merge the data for duplicate post the user could either use current database version of post use importer version of post use both posts incrementing onto current slug as currently happens use post with most recent published at updated at value the ui needs some love as well was playing around with moving the importer into modal this is okay but am not sure it is really required perhaps the feedback would be nicer in modal rather than the labs page there was some discussion on the ui in 3927 large import files can really mess with ghost presumably the import times out somewhere so this needs further investigation and either files have to be intelligently chopped up chunked somehow there was also discussion at some point about creating an export or backup more like the migrations backup when importing this could be automatic or provided as an option to the user and this is something think is necessary for the delete content button backup is probably better than export maybe choose limit on backups in the codebase or through the admin ui discussion on this would be great such as whether people agree or disagree and preferred approach if any future improvements it would be nice if we could have specific importers from various other platforms either via some automated check of the file page or via dropdown menu image acquistion checking through posts for images and downloading them automatically could be tricky but would greatly enhance the migration process create flows in modals or otherwise for users to fix through problems found if posts have an unknown user id they could see the users available and select one or create new user rather than having to dig into the import file summary of tasks allow raw json to be imported provide visual feedback on imported items me provide visual information on problems found me compare import file with database for better duplicate detection split the the importer processing up to allow for dry run option provide more controls to user on how to merge duplicates me investigate import failures with no information will try to find the ways of reproducing these at some point fix importer for large import files give ui some love discuss implement backups platform specific imports image acquisition automatic and assisted help with import failures >>>epic importer
zelda settings routes don redirect to signin issue summary going to settings general` without being logged in shows 401 error rather than redirecting to signin` the redirect works correctly for the posts route repro sign out navigate to ghost settings general` see 401 specs latest master 3f9560f11f186d585ab613ee1c2c92b506ad9858 chrome 43 0>>>beginner bug ember
`error sqlite busy database is locked` in importer tests on node 12 io js but not node 10 we re regularly seeing this error occurring during the importer integration tests it happens something like times in on the sqlite builds after switching my local dev environment to 12 can reproduce it fairly regularly although adding bunch of console logs seemed to make it less reproducible ve spent some time trying to track down what going on it tricky because although it definitely points to something to do with sqlite3 on recent node versions it could still be that this version of sqlite3 is more susceptible to or better at reporting errors with timing async issues caused by the tests doing lots of things very fast plus many of our test related dependencies have been updated recently and could have caused some sort of conflict it seems to mostly get thrown during the `safely imports data from 00x` tests that is the first test in each group from doing bit of console logging it seems to get through the import and commit the results and then get tripped up by the select block only map and filter have `concurrency` as an option but it may be worth trying to refactor to run the promises to use our sequence util and see if that helps tried wrapping each select in function just to add console log to see if it was one specific thing and again adding the console logs seemed to reduce the frequency of the failures the real issue is that not even sure where the error is coming from ideally we should be handling it properly by waiting for sqlite to not be busy and then sending the queries not sure whether this should be handled in node sqlite or knex or whether we ought to be doing something with it it all bit strange ran the tests many times without seeing an error >>>tests
notifications refactor pre zelda ghost had one type of notification and two locations top and bottom top notifications were coloured bar across the top of the screen bottom notifications were coloured bubble in the bottom left hand corner of the screen in zelda these components have been renamed to alerts and notifications alerts are coloured bar across the top of the screen notifications are coloured bubble in the bottom left hand corner of the screen while the use of top bottom notifications was fairly arbitrary based on loosely priority the use of alerts notifications is far more explicit alerts are for errors and important show stopping information which the user needs to be aware of permanently until it is either resolved or dismissed notifications are passive indications that something has happened and always have an action which takes you to view what has happened test cases if the user cannot do anything until the event is resolved it should be an alert if the information affects security privacy stability it should be an alert if something has happened and has view this action leading to different screen it should be notification if something has happened and has no action it should not be anything examples connection error alert your mail config is whacked out alert new version of ghost alert post published notification click to view post user signed up notification click to view user settings saved nothing tag added nothing post featured nothing required changes existing alerts previous top notifications are mostly correct don think any need to change errors previously bottom notifications need to move to alerts generic success messages previously bottom notifications need to die validation messages previously bottom notifications need to be inline where possible otherwise alerts any messages which don fall into the above categories should be documented>>>ember
zelda nav permissions permissions to be able to view access navigation and routes in zelda should work like this image https cloud githubusercontent com assets 120485 8031496 8e9aa616 0dc6 11e5 94e1 f9c484702af8 png >>>beginner ember
too long blog title overlap the right content field in the backend for the blog details in backend you re using `white space nowrap would recommend to wrap longer text parts because it looks better for my opinion https rschu me nowrap png https rschu me nowrap png additional information os debian wheezy linux version browser 64bit latest chrome canary firefox stable and opera stable node version 12 ghost build number 4>>>beginner bug css
vertical scrolling in the backend settings doesn work anymore hey guys since pulled the latest master update the vertical scrolling in the backend settings doesn work anymore maybe it the nested flexbox which is responsible for that hotfix use browser extension to delete in the gh app` css class the attribute overflow hidden or rewrite it with overflow scroll additional information os debian wheezy linux version browser 64bit latest chrome canary firefox stable and opera stable node version 12 ghost build number 4>>>bug
stop auto focus when editing post when you write new post the post title field is auto focused so you can start writing right away this is good when you edit post the the post content field is auto focused and the textarea scrolls to the very bottom to place the cursor at the end this is not desirable believe the correct behaviour is not to auto focus any field when editing an existing post >>>blocker bug
markdown icon confusion on editor layout hi from the screenshot hover the mouse cursor over the markdown logo reveals the website link yet my brain was thinking is this help menu or is this link to my site clicking on it reveals the help menu and am wondering if it should be reverted back to the help icon to improve accessibility screen shot 2015 06 02 at 21 14 08 https cloud githubusercontent com assets 566201 7946040 5503a208 096c 11e5 84fd 3114be291f89 png c>>>in_progress
fastclick library for better mobile support during the transition from backbone to ember the fastclick library was never brought back into the app it still dependency https github com tryghost ghost blob master core client bower json l12 so this issue just covers bringing it back into the fold so it run as part of the ember admin app which in all likelihood just involves the bootstrap index html file but bonus points for researching the best way to integrate it >>>beginner fix_wanted
event related potential leak in tests there is warning output by some of our tests mostly functional route tests think about possible eventemitter memory leak this only happens on the node 12 and io js tests not node 10 not sure if it really something to worry about guess it because event listeners are never removed but had quick go at trying to automatically remove them and that didn seem to help >>>tests
api add support for get tags slug slug both posts and users support getting resource by the slug this endpoint is missing for tags the endpoint should be added to the api routes https github com tryghost ghost blob master core server routes api js l19 support should be added to the tag model it seems it added at the api level by ensuring that the option can be passed through and gets used by bookshelf to select the right thing it should also be tested both at the model https github com tryghost ghost blob master core test integration model model posts spec js l259 and api https github com tryghost ghost blob master core test integration api api posts spec js l41 level to make sure it definitely working the result should be that doing an http get request to tags slug slug or doing call to `api tags read slug slug should return the single tag that matches the slug >>>api beginner
add events to settings model little while back did pr which added events to the post tag and user models and used these for generating sitemaps rather than direct method calls see the changes here https github com tryghost ghost pull 5069 files diff e05bf798b07f40dd2e22a828f86eee13r10 it would be great to also wire up these sorts of events whenever setting is added edited or deleted the tag model is probably the best example https github com tryghost ghost blob master core server models tag js l25 to follow on from events are included from the centralised event system new `emitchange` method is added to the model and the events are wired up to be fired when the model events from bookshelf fire finally there ll need to be some tests https github com tryghost ghost pull 5069 files diff f588c5c6615f7ef7a9b2876d55e59f93r31 in the settings model tests to check that the events fire at the right times >>>beginner server
themes has helper confused by ampersand in tag name just overheard in the help slack channel haven verified this myself roxana 02 21 looking for some help with the has helper im trying to target posts that have the tag products design but the helper isnt letting me can this be used with tags that include more than one word and an ampersand roxana 03 05 nvm it seems like cant use the ampersand replaced it with and everything works well >>>bug themes
improve ghost startup checks diagnostics ghost has number of checks that it performs when starting up to try to give useful and clear information about what is going wrong if ghost fails to boot up properly here an example http puu sh i3glj png overtime some of those checks have been moved around and refactored so that they don always fire at the most useful time meanwhile some other checks have made their way to our really nifty core utils startup checks js` file which happens before absolutely anything else here are some examples there is node version check in core server ghost server js https github com tryghost ghost blob f26179ae6a26e277d5dd3a5b9538b1c89f1254e8 core server ghost server js l49 which happens way too late to be really useful this can be moved into `startup check js` there is an upgrade warning message in the same ghost server js https github com tryghost ghost blob f26179ae6a26e277d5dd3a5b9538b1c89f1254e8 core server ghost server js l108 file which can now be removed there is whole bunch of validation which happens inside of core server config index js https github com tryghost ghost blob f26179ae6a26e277d5dd3a5b9538b1c89f1254e8 core server config index js l344 but none of this seems to fire for example if you try `node env rubbish npm start` you ought to get clear message `cannot find the configuration for the current node env` but instead nothing is output the node env check can be moved into `startup check js` with the following logic if the config js file can be found because ghost hasn been started before assume we re going to use config example js in which case the node env must be one of those referenced in that file the result of this should be that startup performs the following checks node version is supported node env can be understood npm packages are installed content path can be accessed and has the correct permissions sqlite3 database has correct permissions if it is configured from this point the config system will correctly validate that the config file can be read and has valid values ghostserver will do checks around it being possible to start server>>>beginner fix_wanted server
apps app attempts require of module in same directory error unsafe app require my app works fine with all code inside content apps fayspook index js` as in https github com tryghost ghost wiki apps getting started for ghost devs however when refactor the code by placing the app logic in separate module `client js` which `require client from `index js` this should work shouldn it or do these test cases fail or aren even performed https github com tryghost ghost blob c7713c1d2730d548591ff6b68ac7d0d423516f7e core test utils fixtures app good js https github com tryghost ghost blob c7713c1d2730d548591ff6b68ac7d0d423516f7e core test utils fixtures app goodlib js trying to find out what is going on here added some logging to https github com tryghost ghost blob stable core server apps sandbox js l19 causing this output maybe something fishy here with the variable `modulepath` finally very impressed by this sandbox approach in ghost admittedly my worn out brain gets pretty dizzy reading the code but reading hacking node require http bahmutov calepin co hacking node require html helps >>>apps bug later permissions
refactor mail js to not require init this is related to the optimise ghost boot up issue 2182 which is kinda old now it got some ooohs and some aaahs but noone really knew where to go with it picking on our mail module because think it an easy candidate for refactoring reading the code it doesn need to be promise based at the moment mail is included in `core server index js` and initialised as part of the app boot up it also used to create some alerts notifications about the state of email the main reason for all of this is to prevent people from getting to place where they ve forgotten their password and have no mail config which is nice but possibly little bit of overkill now that we have direct mail which works most of the time without configuration ideally think we should try to achieve the following no more `mailer init in server index js `require mail will just work anywhere move the two checks in server index js initnotifications to `utils startup check js` and shows console warning instead so that there are no more notifications in the admin ui on startup display an alert in the admin ui only if ghost attempts to send mail and fails because mail is not configured an alert is top notification in the new zelda ui they use the old server side notification api and need bit of work but for the purposes of this issue we can assume they work as expected >>>fix_wanted server
i18n proposed tooling and workflow this issue is intended to act as catalyst for getting the internationalization ball rolling discussions going and decisions made below are few things proposing is based on mix of my own research and previous conversations in the i18n slack channel obviously do not have all the answers and there is chance that the ones have could be improved on so please fill in what ever gaps you see or propose changes where ever you see fit glossary of terms i18n internationalization blos big list of strings admin the admin section that lives under the ghost url frontend non admin panel section where articles are published and publicly visible proposed tooling transifex http transifex com for managing translations transifex has pretty comprehensive api http docs transifex com api for interacting with their resources as well as few grunt plugins in case we need to update the dev workflow like this https www npmjs com package grunt transifex keyvaluejson this https www npmjs com package grunt transifex and this https www npmjs com package grunt transifex resjson it also has mechanism for keeping the source language file in sync with file on github which would make it really easy to keep things updated full details http docs transifex com faq can update source files automatically as long as your source file is accessible from public url such as this raw file on github transifex will periodically check the url for updates you can also use file from private repo in github as long as the url has the respective token that github provides if there are updates in the file transifex automatically fetches the file and updates your content ember intl http formatjs io ember for client ember translations part of the format js http formatjs io library collection compared it to ember i18n https github com jamesarosen ember i18n and ember cli i18n https github com dockyard ember cli i18n format js provides more complete feature set it does not officially support sideloading blos in the current but it is implemented in the branch see issue ref https github com yahoo ember intl issues 88 it goes beyond just strings but also includes template helpers for formatting dates numbers and time per locale includes template helpers for providing custom formatting for dates numbers and time follows well known icu message syntax http userguide icu project org formatparse messages for pluralization select and variable interpolation leverages the standards compliant window intl object and provides polyfill http formatjs io guides runtime environments client for browsers that do not have support for it as yet intl messageformat https github com yahoo intl messageformat for server side translations also looked at messageformat js https github com slexaxton messageformat js and i18next node https github com i18next i18next node but they seemed for fall short in some aspects also part of the format js http formatjs io library collection biggest sticking point is that it follows icu message formats http userguide icu project org formatparse messages and unicode cldr standards http cldr unicode org leverages native ecmascript i18n api functionality for date and currency formatting polyfill if no available in engine http formatjs io guides runtime environments server usage is kind of clunky but that can be hidden behind facade for better developer experience proposed rollout we should be doing staged rollout of the i18n functionality the ideal end state is for ghost to have the concept of language packs that the user can install on demand when ever they want but this long term vision is some what dependent on or at they ver least related to ghost apps being flushed out the phases detailed out below are intended to lead up to this ideal state phase harvesting strings regardless of what process or workflow we end up following to distribute translations all the hard coded strings both in the ember and node app will need to be moved in to source language file so phase would be to do basic implementation of the i18n libs mentioned above ember sample https github com morficus ghost blob i18n poc core client app templates navbar hbs l4 node sample https github com morficus ghost blob i18n poc core server index js l29 at the end of phase english would still be the only language supported in ghost and there would be no noticeable change to the end user phase start translating strings this can be done in parallel with phase once there is decent amount of strings are in transifex once we have our base source language file most likely `en json` the next step would be to setup transifex and let the translators commence the translating in to the initial target languages this process will be on going as the source langue file will continue to be updated and new languages may be introduced as well phase develop locale setting functionality both the node and ember app need enhancements to ask the user for their locale during setup modify locale in settings and allow for the locale value to be programmatically retrieved this might go through few iterations depending on how we want to allow users to control locales blog wide per user basis only during setup at this point i18n could be enabled under labs with limited locale support depending on progress of phase locale files will still need to be bundled with the release not big deal yet because there would be or locales at most proposed development process workflow the source language file `en json` for both client and server is the only language file that will be in the repo this file will be kept in sync with transfex using this process http docs transifex com faq can update source files automatically all other language files will be downloaded as needed long term the only language file that should be in the downloadable `ghost zip` file should also be `en json` but short term until apps are ready any other supported locale will need to be included as well hopefully this will only be necessary for or locales proposed workflows and organizational structure see the workflows and organizational structure section in this gist https gist github com morficus e2fabf24b44ff94978a7 file workflows md for information related to this topic >>>fix_wanted i18n
zelda post tag user auto complete search bar in the new zelda interface you may have noticed there search bar http puu sh i0e4u png however due to the technical challenges involved https github com tryghost ghost issues 5321 search is still way off being implemented into the ghost api managing large body of posts without any option to filter or search them is incredibly cumbersome and as ghost gets older and many of the blogs on it get bigger this issue gets more problematic therefore it seems adding rudimentary search capability would be better than nothing at all originally we had an idea for filtering menu https github com tryghost ghost issues 2640 but this never really took flight because it didn feel very useful the idea in zelda is to use the search box as an auto complete style interface much like we already have for tags http puu sh i0egp png this box should return results for posts with matching titles tags with matching names users with matching names names and preferably posts which have any matching tag or user author the display of the results should be split into groups for each of posts tags and users much like you see in slack as different endpoints will be queried to find suggestions for each resource type it is anticipated that each result set would load and update individually as you type this is also what you see if you use slack search box it feels really nice to use http puu sh i0e9s png there no design for the ghost version yet as this is problem is better suited to being developed as best as it can be to start with and designed afterwards the tag suggestion box fetches all tags using the tags api endpoint and the filtering is done client side the posts user api endpoints will also allow for fetching all content one possible optimisation we could make would be to add `fields` parameter to the endpoints so that we can fetch just the object ids along with the attributes we want to filter on and maintain these versions of the models separately just for the suggestions box but not sure how well this would work with ember data think it may make sense to use an existing solution like typeahead js https github com twitter typeahead js issues to implement this it supports multiple datasets and there are even existing ember components although haven found one that particularly up to date >>>api ember
api new put version of authentication setup this is needed for user onboarding wiring up setup signup correctly 5339 the authentication setup https github com tryghost ghost blob master core server api authentication js l190 function in the authentication endpoint of the api takes the name email password and blog title provided on the setup screen and uses these to update the owner user properties and the blog title setting it also does some extra stuff like checking that the setup process hasn already run and sends welcome email in the new user onboarding https github com tryghost ghost issues 5315 flow it will be possible to do backwards navigation to the setup screen but only whilst you re in the flow as nice to have we should make it possible to edit these values if the form has already been submitted in order to do this we need new function and endpoint in the authentication api that takes the same values owner user name owner user email owner user password and blog title and updates them it should use the `put` method it should only work if the setup process has already run at least once and it should not resend the welcome email this issue covers just the creation of the new endpoint the function to perform the update tests to show it working this is counterpart to issue 5339 >>>api installation
user onboarding wiring up setup signup correctly this issue relates to the wiring navigation behaviour part of the user onboarding epic 5315 in 5316 ve wired up the setup screens to be accessible via the top navigation items http puu sh hxtug png however at the moment if you submit the form on the 2nd screen you get setup and signed in and skip the 3rd screen what is supposed to happen is that submitting the form will cause the setup step to happen but you won be signed in or at least you won be redirected to the admin screen until you complete or skip step as mentioned in the epic https github com tryghost ghost issues 5315 there are couple of different ways to accomplish this functionality ideally the setup step is complete after submitting the form on step but it should also be possible to go back and update your details if you want to this latter part is quite fiddly as it effects both the blog settings and user rather than single model at the moment this is handled via special api endpoint which does both this api endpoint could be updated to have an edit version this api change is detailed in issue 5342 if you exit the flow after completing step and come back later or refresh you should be taken to the admin screen and skip step the invite user screen is convenience part of the flow but is not required so it doesn make sense to force users back to this screen >>>api ember installation
user onboarding invite users this is required as part of the user onboarding epic 5315 screen of the new onboarding flow see pr 5316 has text area for listing out email addresses of users you want to invite to your blog this screen is currently accessible by clicking the icon at the top of the screen if you submit the form on the 2nd page you will miss this screen http puu sh hxfht png the emails are split up and basically validated at present but there is no handling of displaying errors or actually inviting the users this can all be handled in the client side but it may be preferable to update the api to be able to do multiple user invites in one go and return success failures for each address individually prior to submission any validation issues should appear on the form page using the new red text under the field style shown here https github com tryghost ghost issues 5336 to indicate if any of the addresses are invalid emails after submission the user should be logged in and success or failure should be indicated by normal notification clicking on that notification should take you to the team page so you can review the invites >>>ember installation users
zelda inline validation this is required as part of the user onboarding epic 5315 one of the biggest changes falling out with zelda is an overhaul of the use of notifications ghost old notification system was used and abused for all user messaging all that is changing in zelda at the moment we have neat validation engine https github com tryghost ghost tree 4456f17c658c1381bcf623a6f7626c985033c6c6 core client app validators which defines the validation for each of our model this system fires on save and feeds back to the user via oldschool notifications this needs to be magicked into system that also works inline fields that fail validation need to go red and provide feedback inline to the field and on the fly that is on de focus rather than on save we want to roll this out across the signin signup setup auth flows but also across things like the settings panes so that we can eventually do all the saving on the fly without an explicit save button like the psm http puu sh i0aty png please ignore the missing icons for the auth flows which still need button any post save messaging is displayed in red below the form as shown on this screenshot and as currently permanently displayed on the signin screen grin to implement this new inline validation system we need way to redefine our validation rules system so that they can be applied to each field rather than an entire model perhaps leveraging ds error we also need to provide spaces for the messages along with the inputs for an example of the html for outputting inline validation see the install3 html file https github com tryghost ghost blob 4456f17c658c1381bcf623a6f7626c985033c6c6 core client app html install3 html when specifying the messages to display if validation rule fails we really like to be able to specify multiple messages and have the interface display one of them at random some rules might have one message others might have several the idea is to inject little bit of fun and personality into boring stuff like getting your password right wink the major part of this issue is going to be creating the new validation system wiring it into one form as an example would be awesome we can make secondary issues to wire it up elsewhere once the main system is ready >>>blocker ember installation
user onboarding upload profile image component this is part of the user onboarding epic 5315 both the signup and setup screens feature this new upload component http puu sh i04s2 png it comprises both small circular thumbnail image and an email input when you enter an email if it matches gravatar the gravatar image is pulled in http puu sh i059p png if you mouseover the image you ll see an overlay with the upload icon appearing http puu sh i05fg png clicking on this icon overlay should open file dialog to trigger an image upload dragging an image to the icon overlay should also trigger an upload there should be no intermediary modal as we currently have for uploads in the admin ui the hierarchy here is that the ghost logo shows but is not used as the user image until either gravatar image is loaded via the email or an image is uploaded an uploaded image always takes precedent over gravatar image even if new email address is entered the behaviour for fetching the gravatar is hardcoded into the setup screen as of the pr 5316 this needs to be broken out into reusable component the image upload behaviour is currently completely missing the ideal here would be to build flexible new upload component in ember that can be optionally tied to an email field in order to layer the gravatar behaviour in as well bonus points if the image uploader uses blueimp preview feature to display the image whilst it is being uploaded in the background wink >>>ember installation
speed up casper tests is it possible to replace our custom casper implementation with something like https github com ronaldlokers grunt casperjs to take advantage of async parallel and speed up our casper tests significantly >>>tests
nuke nprogress with the new app style layout everything is page ember application which loads instantly nprogress is legacy whose time has come to an end when loading progress indicators are required we re going to use proper context dependent ui elements which will be specced in later issue >>>beginner ember
bug `grunt dev` requires running twice something weird is happening with `grunt dev` whereby running it once doesn seem to work nothing changes or at least the changes aren picked up running `grunt dev` again makes everything work as expected the first few times this happens you think you re just losing it but no it really happening think halfdan was looking into this not sure where that got to but he said grunt clean seems to kill core client dist assets and grunt init seems to fail to create it again>>>blocker bug ember
discussion solving search in ghost the issue to add search to the posts api https github com tryghost ghost issues 306 is literally the oldest open issue in this repository its specialist subject so weve always hoped someone with specialist knowledge would come forward to help us solve it but unfortunately that hasnt happened to try to increase visibility of the problem we set up page advertising contributor roles https ghost org contribute search lead detailing that we were looking for someone to help solve adding search to ghost that didnt work either unfortunately adding search is particularly complex challenge this is another attempt to try to get engagement from the wider oss community on how to do this wed really appreciate the opinions and input of anyone who knows their search fu use cases there are two key use cases for search inside of ghost itself one being in the admin panel to find post tag user or perhaps even setting that you want to change this would make significant improvement to the usability the admin interface the other is adding search to the frontend of blog so that it becomes easier to find content the main things that need to be searchable are post titles and content tag names and description user names and probably meta titles and descriptions for the different resources there are plenty of use cases where other things would also need to be searchable so this will need to be extensible but these are the key fields approaches the best way to make both of these use cases possible as well as making the search feature available to any apps or other extensions of ghost in future is to make it available through the api there are generally two approaches to solving search that would work in ghost that am aware of the first being to use the fts features of sql and the second being to use third party search tool of some description the upside to fts is that if we get it working well it could work for all ghost installs without any need to install additional and likely complex dependencies the downside is that getting fts to work for all three of sqlite mysql and pg is sizeable challenge the status of fts in knex is unknown https github com tgriesser knex issues 203 but perhaps it can be done as bookshelf knex plugin in way that will benefit the wider community as well the upside to using 3rd party tool is that there are many modern and advanced systems that we could leverage to make an exceptional search feature the downside is that most of them require additional complex dependencies to be installed which mean they arent viable options for ghost core one of the tools that has been recommended is lunr js and there is plugin for ghost themes https github com jamalneufeld ghosthunter which combines lunr the rss feed to make search possible on the frontend supposedly lunr also works in node not just the browser but ive not found much information about it other tools that are popular for search include lucene and elasticsearch and there are also numerous modules for node built on top of leveldb and redis databases there are likely solutions out there that havent heard about so id be interested to hear ideas from others complex dependencies includes binaries or external services ghost is currently installable on almost any platform without too much fiddling with compilers etc and we want to keep it that way moving forward the ideal solution in my mind looks something like have rudimentary version of search built into ghost via the api using fts or something else that will work for 90 of blogs relatively small amounts of content implement this version of search to be easily extensible so that its very easy to create an app that replaces the search with something more heavy duty like elastic search or lucene to support larger blogs the immediate future as part of zelda we want to introduce search bar to the admin interface which provides auto complete style results for posts tags and users this should be possible using our existing api some minor modifications to allow us to fetch certain fields and ember its not ideal but think something incredibly rudimentary is better than nothing at all this will be specd in separate issue continuing this discussion im really really looking for the community to get involved and share their ideas here this is relatively specialist subject and know there are tonnes of developers out there that have great deal more experience implementing search than do id like to hear thoughts ideas and experiences on fts will we be able to make it work for all databases without having to write too much custom code could bookshelf plugin work is it an absolute nightmare not worth pursuing what about lunr is it viable server side option does it have too many requirements or not work for large data sets or is it the perfect basic option provided it can easily be overridden with elastic search or something else is there another solution that isnt mentioned here remember we cant have leveldb or redis or other complex dependencies in core and it has to work across sqlite3 mysql and postgres and what about the api what would good search api look like who out there has great restful search api that we should take inspiration from if you know someone you think could answer any of these questions please link them here and ask them to get involved thanks >>>fix_wanted
user onboarding flow navigation component this issue relates to the wiring navigation behaviour part of the user onboarding epic 5315 http puu sh hxtug png in 5316 ve dirtily re hashed the `gh activating list item` to do the flow navigation the `gh activating list item` component was originally used for the left hand settings menu on the settings screen which no longer exists therefore it can likely be repurposed converted into specific component for handling the flow navigation imagine there much smarter way to code up this set of steps with back and forward links and where certain items are disabled when you re in particular step step should be disabled if you re on step additionally the back button is only supposed to appear when not on screen and should take the user to the previous step >>>ember installation
zelda user onboarding the user setup and signup processes are two key flows in ghost that have never had as much love as we would like they re functional but it time to give them that little bit of extra which is what ghost is all about the current setup process is single screen where you fill out the title of your blog and some details about yourself once the form is submitted you re presented with the content screen and off you go for lot of people this is great it gets you straight to the action but for others we re not taking the opportunity to properly introduce them to our software the new setup process features steps the first screen is welcome message the second screen is very similar to the existing setup screen and the final screen gives you an opportunity to invite people to your blog screen welcome http puu sh hxfcy png the first screen is simple welcome screen it has steps that show your progress navigating through the process screenshot which may be video later on and button to take you to the next step the major piece of functionality on this screen is the live download counter defaults to many many and then polls ghost org count to discover how many blogs have been created with ghost screen setup form http puu sh hxfex png the second screen contains the same setup form that appears on the existing setup screen but with number of additions and improvements each of these items is discrete piece of work and will be described in an issue of its own user profile image 5334 inline validation fun validation messages 5336 5520 password strength indicator 5309 screen user invite http puu sh hxfht png the final screen contains textarea where the user can enter email addresses one per line to be invited to their blog users will get the author role by default this step can be skipped if desired the button on this page reads ll do this later take me to my blog until an email address is added and then it reads invite num user once this button is clicked the user is taken to the admin screen issues invite users 5338 re add multi line placeholder 5459 wiring navigation behaviour the wiring between the screens is intended to behave as follows the setup process is considered complete once the second screen has been correctly filled out and submitted the third page is displayed as convenience whilst you are in the flow if the user leaves the process or the process goes wrong after the second screen the remainder of the process should be skipped and the user should be either sent to the admin screen if they are logged in or taken to the login screen the icons at the top of the screen should act as navigation as far as is possible screen is not accessible from screen but all other combinations should be workable with back navigation possible between screens there may be need to make the 2nd screen become an edit screen for the values that were populated or make it uneditable alternatively we could keep the values back and not submit them until after the 3rd screen but this would mean that all screens have to be proceeded through in order to complete the signup process which isn really desirable issues first pass at new onboarding 5316 flow navigation component 5317 api new put version of authentication setup 5342 wiring up the signin 5339 allow editing of user blog settings during setup 5526>>>ember epic installation
zelda bugs regressions and todos in master thought open an issue to cover keep track of all the bits and pieces we know needs doing now that zelda is merged bugs small issues icon check` and icon chevron` have gone awol fix up sidebar nav 5313 5311 private blog form 5073 404 error pages are ugly publish unpublish menu closes before you can choose an item 90 of the time menu popover conflict notifications don close after seconds anymore to be fixed in 5409 signup on boarding password validation requires characters input says bugs on url image uploader 5433 settings routes don redirect to signin 5412 nav permissions 5403 title overlap on content screen 5402 vertical scrolling issue on settings screen 5401 permissions for team area 5434 localstorage state for navigation to be done in 5440 spin buttons 3928 re add multi line placeholder 5459 major issues notifications refactor 5409 post tag user auto complete search bar 5343 inline validation 5336 re implement the tag editing component 3800 roll out inline validation across the app being done in 5409 user onboarding flow epic 5315 api new put version of authentication setup 5342 user onboarding wiring up setup signup correctly 5339 user onboarding upload profile image component 5334 in progress by acburdine open pr 5355 user onboarding flow navigation component 5317 if you think you have found an issue we don know about drop comment and it ll get added to the list >>>design ember epic
zelda password strength component this is required as part of the user onboarding epic 5315 as part of the new fangled wonder that is zelda we re updating the create account and setup screens to be much more user friendly one addition that would be awesome for both screens is to include good password strength indicator that means something that calculates entropy rather than checking to see if you included number and some punctuation or some other not actually secure rules http puu sh hwmwv png the design for the metre is already in master merged in with zelda shown above it lives to the right of the password input and has little grey dots that are meant to light up green as your password strength improves the password should be evaluated as you type zxcvbn https github com dropbox zxcvbn seems like great entropy calculator and has an api that will work for this case however not sure if it good candidate due to the odd way it is expected to be used happy to see different lib used but it must use entropy and not character based rules the intention for this component is to display feedback to the user about whether their password is truly good password or not but the information will not be used as validation so that users are not actually prevented from signing up if they have bad password the result of this issue is expected to be new password field component which displays the indicator and calculates displays strength as you type please write ember unit tests for the component wiring it up into the right places would be nice too >>>apps ember installation
remove settings general email address on the general settings screen we have field for admin email address which is apparently used for important notifications it not everything to do with this ui back end db defaults can be removed and anything using this email address can be converted to using the blog owner email address instead >>>data settings
ways to fix the great jquery debacle no may surprise you it time to get rid of jquery from ghost ghost foot helper the problem currently ghost ghost foot helper includes jquery for everyone many moons ago when ghost theme api was first born this seemed like good idea as it seemed to be something the majority of themes would benefit from making it worthwhile to add to core overtime we ve come to realise this wasn good decision themes that don want or need it have no good way to remove it although it is possible to remove using an app apps aren officially ready and regardless forcing people to install an app to disable something is counter intuitive the result of all this has been many themes not including the required ghost foot helper which means code injection doesn work for everyone and that just the start of the problems ideally jquery should have been opt in rather than opt out it time to fix that the solutions just remove it unfortunately many many themes depend on it so just removing jquery from ghost foot would break countless themes with no warning this is no go add `jquery false type attribute to ghost foot this would sort of solve the problem but it would leave us supporting this forever it also still opt out and it really ugly let not do that add setting or config js option as with no we don really want to be supporting this jquery opt out in up down thing forever we want to solve the problem once and for all move the inclusion of jquery from ghost foot into code injection now that users can customise content output by ghost foot why not move the script tag there rather than having it hardcoding into the helper itself then every user has the power to remove or leave it as they see fit leave it as it is eurgh really so assuming we re all in agreement that is the awesome solution we ve all been waiting for we first have to give kudos to johnonolan who thunk it up now to the how `ghost foot` is row in the settings table which stores anything that anyone puts in their blog footer http support ghost org use code injection add custom code and save your changes section on the code injection screen the proposal is to write special migration function which runs when anyone is upgrading through specific version of ghost their old version is lower and their new version will be equal or higher at the moment the only system we have for this sort of thing exists for database migration therefore it may make sense to tie doing this to database change of which there are few in the pipeline this function will insert the script tag for jquery into the start of the `ghost foot` field with newline after and comment before saying to only delete the line if the user is sure their theme doesn require it at the same time the code can be removed from the ghost foot helper moving forward all existing installed blogs will be unaffected by this change jquery will continue to be present and so their themes will continue to work any theme which wasn including the ghost foot helper also won get jquery from code injection so the net effect for existing blogs should be exactly all newly installed blogs however will no longer have jquery included themes that require jquery and do not include it will be missing functionality to mitigate this we will start announcing that this change is going to happen on the dev blog and theme developer mailing lists theme developers will need to update their themes to include jquery >>>themes
ghost logo view blog link should be absolute the ghost logo icon in the top left corner of the ghost admin ui is intended to be link to the frontend of the blog http puu sh hsl0g png this is soon to be the view blog link in zelda https github com tryghost ghost pull 5273 new ghost ui design http puu sh hslqy png this link is currently sporting relative url but should be absolute using relative url causes problems with blogs served with mixed protocols or where different secure url is used for the admin compared to the front of the blog technical details ghost version master >>>bug
middleware refactor split files improve test coverage this is loosely part of the frontend refactor tryghost ghost issues 5091 that we need to do to make channels possible the problem ghosts middleware stack has evolved past the point where the current file structure is easily manageable originally we had files middleware index js which registers the middleware stack contained few middleware functions all of which was considered not unit testable and middleware middleware js which contained only middleware functions which were testable and had unit tests there is now 100 lines of code which sets up the middleware stack much of it with undocumented inter dependencies on the order things have to happen in there is also 700 lines of middleware functions in these two files with very poor test coverage the solution the immediate solution is to start splitting out middleware functions or groups of related functions like the spam prevention middleware into separate files each middleware file should have doc block which explains usage any known before after dependencies and information on which app they belong to blog admin api or combination each file should also be paired with its own test file with 100 coverage this is just the first step towards doing two things separating out the middleware that is global from that which is only for the blog admin api apps in more manageable way and using different mechanism for setting up the stacks something akin to express initialisers https github com jgable express initializers or some sort of dependency injection this task can be approached either all in one go if someones feeling brave or alternatively with each piece of middleware done separately and referencing this issue which make few good small beginner issues have already done the cache control middleware as an example here https github com tryghost ghost pull 5287 the end result of this work should be no more middlware middleware js and nothing left in middleware index js except the big stack registration 100 coverage is not required as general rule for ghost except in extremely important areas like the theme helpers and middleware you can generate coverage report by running `grunt coverage` tasks simple pieces to move but require unit tests middleware js authenticate index js redirecttosetup index js servesharedfile index js decideisadmin index js uncapitalise unused can be deleted middleware js whenenabled can be grouped into file middleware js statictheme middleware js forwardtoexpressstatic helper functions index js ghostlocals index js updateactivetheme index js activatetheme index js confighbsforcontext maybe decideisadmin all private blogging middleware from middleware js checkisprivate filterprivateroutes authenticateprivatesession isprivatesessionauth authenticateprotection the verifysessionhash helper func all ssl related middleware from middleware js checkssl issslrequired sslforbiddenorredirect middleware js spamforgottenprevention middleware js spamsigninprevention middleware js spamprotectedprevention middleware js addclientsecret middleware js authenticateclient middleware js generateaccesstoken >>>beginner server
email address missing from invite user email in the invite user email the email address of the user who invited you is intended to be displayed https github com tryghost ghost blob master core server email templates invite user html l28 however it currently missing http puu sh hquiw png imagine this is to do with me having removed user email addresses from the api result https github com tryghost ghost pull 5159 in certain situations the bug fix should bring it back in the email without resulting in it being returned to themes steps to reproduce sign into ghost invite user read the invite email technical details ghost version master >>>beginner bug
footnotes from different posts have same ids hello using ghost version if have two posts using footnotes on the home page for example their ids are always the same ie both first footnotes of each post will have id fn so when click of the second post on the page it will open the anchor of the first post footnote and not it own >>>bug
switch from using colors js to chalk this is straightforward dependency swap cleanup issue it low priority nice to have it seems colors js has fallen out of favour and chalk https www npmjs com package chalk is the new kid in town it works in slightly nicer way meaning we can get rid of the lines of code which are pure workarounds https github com tryghost ghost blob 3d5fe130c2dcbb0901f7d71da2d68b3c52348da0 core server errors index js l24 the resulting output ought to be the same as we have now with orange warnings and red white green errors just using different library to create the colors >>>beginner
bug editor doesn always load correctly the editor keeps loading like this for me http puu sh hkuxf png error in the console uncaught typeerror cannot read property replace of undefined which comes from `replace` here https github com tryghost ghost blob master core client app utils ghost paths js l13 reproduction steps either open the editor on published post or publish draft post hit the new post button>>>blocker bug
problems setting the post date entering date in the past for my post has been pretty painful here are some things that don work typing single digit day as image https cloud githubusercontent com assets 33569 7556051 49dfb1a4 f72f 11e4 93cf 2c98cab4de2b png shows doesn work ghost thinks the date is in the future typing anything invalid resets the date to what it was before typed valid string date entry problems https cloud githubusercontent com assets 33569 7556047 2a772068 f72f 11e4 8c2d 00c570b0fc0b gif >>>bug
bug inline code in link title in footnotes is broken the following markdown renders as this html example http imgur com cqctvri png using ghost v0 2>>>bug editor in_progress
improved session lengths since we switched to oauth for user logins we ve had sessions which only last one day the more you use ghost the more annoying this gets and with the editor now working much better on mobile devices where password managers don really work this is only getting more frustrating ideally we need to change the sessions so that they last for month making this change is simple but there is bit of consideration to be done as far as understand it our refresh token expiry date is automatically extended each time it swapped for an access token moving towards using refresh token for month would mean that refresh tokens may be kept around almost indefinitely ideally we probably like to swap refresh tokens for brand new token every once in while but not sure that the `oauth2orize` `passport` `ember simple auth` combo we ve got going on has any way to do that thoughts on post card >>>fix_wanted oauth
update welcome to ghost post to remove update quoting paragraph re spell check when you do fresh install of ghost the welcome to ghost post still includes the following paragraph welcome to ghost https cloud githubusercontent com assets 8148535 7350390 48bd456e ecff 11e4 9b5c ed71206ec000 png since spell check is now built in to the editor supported this paragraph doesn make much sense anymore steps to reproduce download ghost from https ghost org download install and start ghost locally go to `localhost 2368` the post created has the paragraph from the screenshot about spell check technical details ghost version download from https ghost org download and it looks like wisdomous isn an actual word >>>beginner docs
frontend controller refactor it always hard to spec refactoring issue as it always more art than science this refactor is one of the key parts of the work we need to do to refactor the entire frontend https github com tryghost ghost issues 5091 of ghost that is the blog rendering part so that we can make channels https github com tryghost ghost wiki channels 101 reality the frontend controller is currently made up of functions that are almost identical for each of the index https github com tryghost ghost blob master core server controllers frontend js l127 tag https github com tryghost ghost blob master core server controllers frontend js l164 and author https github com tryghost ghost blob master core server controllers frontend js l218 routes this hardcoded duplicated logic makes it hard to extend ghost or make these routes behave more dynamically we need to abstract this logic out bit to make it easier to work with the aim of this issue is to refactor these three functions into single rendering function and set of configuration properties for each route channel it can all continue to live in the same file but we should end up with more abstracted controller ready to move this into separate system the document on channels https github com tryghost ghost wiki channels 101 explains the kind of configuration properties we expect to have for each route channel it will all remain hardcoded at the moment it won yet become configurable or extensible that another step there is one goal for this issue of deduplicating logic and determining exactly what bits of information like the url or the number of postsperpage we need to customise for each one to make it work exactly as it does now >>>server
code injection css syntax highlighting is impossible to read screen shot 2015 04 22 at 20 39 47 https cloud githubusercontent com assets 120485 7282351 1fa85e68 e938 11e4 845c 961c7893db2e png >>>bug
prev next not appearing after updating to issue prev next no longer appears at the bottom of posts present in all browsers reverting to casper does not fix the issue broken prev next https cloud githubusercontent com assets 4729979 7281013 7b4ced70 e8ec 11e4 989d 987dc2893142 png theme casper ghost version os ubuntu 14 04 server node version 12 02 npm version >>>bug themes
welcome tour migration rules for tour items this issue is part of the welcome tour feature https github com tryghost ghost issues 5168 and should be implemented behind config flag not labs to start with an example of how to do this exists in this pr https github com tryghost ghost pull 5115 http puu sh hmaun gif there is decision to be made about whether existing ghost users are shown the tour or whether we should default the items to seen for exising users by far and away the easiest option from technical perspective would be to show the tour to all existing users there always chance they ll find something they didn know about and it only takes two clicks to dismiss them all if this is considered ok then this issue can be closed as there nothing to do here if it decided this would be too annoying and we need to ensure existing users don see the tour then we need to implement migration similar to the one that exists for permissions fixtures https github com tryghost ghost blob master core server data fixtures index js l159 which checks if the database migration is upgrading to or through the relevant version and inserts piece of json marking each item as seen into the user table for each user >>>data server
welcome tour persist the state of tour items in the client this issue is part of the welcome tour feature https github com tryghost ghost issues 5168 and should be implemented behind config flag not labs to start with an example of how to do this exists in this pr https github com tryghost ghost pull 5115 this issue requires other parts of this feature to be built before it can be done http puu sh hmaun gif description when tip or the whole tour is dismissed in the client we need to persist this data to the server by updating the user tour settings note that if the user skips the full tour this should mark all items as seen this way we can still add new tour items later when additions are made spec each tour item will need to at least persist when it is marked as seen due to the complex triggering rules explained in 5170 some or all items may also need to persist the fact that they have been triggered and should now be shown the `tour` field for user will be empty by default and populated as and when tour items need to save some data about themselves using json this might look something like content seen true editor triggered true seen true help triggered true if property doesn exist or isn set then it is considered false if user hits the opt out option then all of the tour items which currently exist in the client should be marked as seen by treating each tour item individually in this way we will be able to add new tour items in the client in future and they will be shown to the user because they will not yet exist in the `tour` field this means we can create completely new tour in future if the admin ui significantly changes or add new tour items for important new features the result of this issue should be that refreshing the page no longer brings closed tour items back and persists the trigger state >>>beginner ember
welcome tour update the user model this issue is part of the welcome tour feature https github com tryghost ghost issues 5168 and should be implemented behind config flag not labs to start with an example of how to do this exists in this pr https github com tryghost ghost pull 5115 http puu sh hmaun gif description on the server side the user model should get single additional field which stores json object containing each tour item and whether or not it is seen this data will be passed via the user api as per usual such that ember always knows the state of the currently logged in user tour spec the user model needs new field added to it recommended name is `tour` and it should have the same type and maxlength as `value` in the settings table the `tour` field should be nullable and not have default value tour items will appear there when they have some data to persist see adding new columns to our database schema in `schema js` means we need to ensure that migration is triggered this means we also need to bump our database version in `default settings json` and update the hashes in the tests that check this doesn change it will also be necessary to update several api tests and other locations to ensure that the api knows about and properly handles the new `tour` field note it would be ideal to bundle the additional post field needed for the preview https github com tryghost ghost issues 5097 feature into this database migration the result of this issue should be the new `tour` field being provided via the user api >>>beginner data server
welcome tour add triggers to tour system this issue is part of the welcome tour feature https github com tryghost ghost issues 5168 and should be implemented behind config flag not labs to start with an example of how to do this exists in this pr https github com tryghost ghost pull 5115 http puu sh hmaun gif description further to getting the positioning and interactions working for the icon and tip in issue 5169 we also need to wire up the triggers that will cause the icons to show at the right time these triggers may be based on user interactions time delays criteria being met or combination of all of them spec as yet there is no definite spec for what triggers will look like rather some loose ideas of the kind of events we want to base tour items on the triggers are likely to be based on criteria that needs to be met as well as events some items may appear at the same time an initial set that appear once the user is logged in and others may happen after another tour item is closed after certain amount of time has passed or after the user completes an action like publishing post some example rules after the user logs in their user data is loaded session user is ready and they visit the content screen the content tour item shown in the image above should be present it should remain present in that location until it is closed marked as seen show tour item on the help menu amount of time after the user was created and after the initial tour item are marked as seen show tour item on the post setting menu minutes after the user enters the editor screen for the first time it should appear immediately every subsequent time the user visits the editor until it is dismissed recording the information for how to trigger each item may be quite tricky it may be necessary to hardwire in some triggers to specific interactions using sendaction calls that perfectly fine it may also be necessary to persist whether or not an item has been triggered yet the won be properly possible without so it fine if the trigger state doesn persist with this issue the result of this issue should be the implementation of couple of example triggers for the two demo items with at least one of them having complex rules to show how it can be done >>>ember
welcome tour wire up tour system to display this issue is part of the welcome tour feature https github com tryghost ghost issues 5168 and should be implemented behind config flag not labs to start with an example of how to do this exists in this pr https github com tryghost ghost pull 5115 http puu sh hmaun gif description on the client side we need way to define tour items including an identifier which matches data on the server side the position of the throbbing icon and the content to be shown once defined that information needs to be wired up such that the throbbing icons are shown in the place and that they correctly show the tip content spec the tour will consist of number of tour items the exact details of which have not yet been finalised each one will display an icon which when interacted with will display tip with some content the idea of this issue is to create set of components etc that will display tour items in the right place and ensure the interaction of these items are correct for now ve kept the details of triggering tour items to display in another issue https github com tryghost ghost issues 5170 so the result of this issue should be at least one tour item which always displays in the correct place there needs to be way to define set of tour items to display each item needs at least the following information and possibly other details defined in sensible place an identifier 	this will match data on the server side in future and could just be semantic name like content position for the throbbing icon 	because of the flexible nature of the admin ui this needs to be based on an element on the page the content example shown would be something like `top 105px right 0x` relative to content list content` there may also need to be other information as to when the throbber can be displayed if it in the navigation bar it can stay all the time but when located on screen position of the tip in relation to its icon 	this would be one of top right bottom or left and defines where the content sits and which way the arrow points the content of the tip 	this is made up of parts title body and foot the foot should probably be the same for all tips the body needs to be full html potentially could use the identifier to reference template or just define the html inline this information should be used to effectively generate and display the tour icons in the correct location navigating around the admin ui should result in tour items which belong to screen disappearing with that screen the tour items should not appear at all on mobile the tour icons will need to be new component the tips should use the existing popover component these items already exist in html css form in this pr https github com tryghost ghost pull 5084 one addition to the existing popover behaviour that will be necessary as part of this is the addition of translucent layer behind the tip content to help it stand out should be `background rgba 54 83 109 08 as shown here https github com tryghost ghost pull 5084 files diff b8a0a97b38057780e937bcd711ad862fr9 the tips should appear when the icon is clicked on tbc may be hover and be dismissed when the ok thanks button or opt out of these tips link is pressed clicking outside of the tip or pressing esc should also close the tip this is built in to the dropdown popover behaviour in ghost closing the tip should hide both the content and icon immediately for now refresh will bring them back but keep in mind persistence will be added later and these items won always need to be displayed the result of this issue should be demo tour items which display correctly and can be interacted with to show the tip content it would be good idea to setup one in global location on the nav bar and one in screen specific location as per the animation above to demonstrate that this is all working correctly >>>ember
feature user welcome tour the user welcome tour is new feature intended to help guide users around the admin interface the first time they login to ghost http puu sh hmaun gif the tour will feature set of tips which are displayed in certain areas of the ui it is more advanced than simple series of steps as some tips cannot be shown until part of the ui is activated after user enters the editor each tour item consists of throbbing icon which is triggered at certain point when the icon is interacted with it reveals tip in popover component each tip provides the option to close the tip or opt out of all tips building the tour involves mostly client side work in ember but also small update to the user data model on the server side to store information about what has been seen or skipped this issue has been broken down into several small issues in the hope it will encourage new contributors to have go in detail on the server side the user model should get single additional field which stores json object containing each tour item and whether or not it is seen this data will be passed via the user api as per usual such that ember always knows the state of the currently logged in user tour this is covered in more detail in issue 5171 on the client side we need way to define tour items including an identifier which matches data on the server side the position of the throbbing icon and the content to be shown once defined that information needs to be wired up such that the throbbing icons are shown in the place and that they correctly show the tip content this is covered in more detail in issue 5169 further to getting the positioning and interactions working for the icon and tip we also need to wire up the triggers that will cause the icons to show at the right time these triggers may be based on user interactions time delays or combination of both think this makes sense as separate task 5170 but may need to be done in tandem with 5169 when tip or the whole tour is dismissed in the client we need to persist this data to the server by updating the users tour settings note that if the user skips the full tour this should mark all items as seen this way we can still add new tour items later when additions are made this is covered in more detail in issue 5172 there is decision to be made about whether existing ghost users are shown the tour or whether we should default the items to seen for existing users this is covered in more detail in issue 5173 last but not least the placement content and trigger for each real tour item will need finalising in place by john likely with some collaboration on wiring up new fancier triggers this doesn need separate issue grin note none of this should appear on mobile tasks mock up html and css for the throbber and tip components 5084 wire up tour system to display 5169 add triggers to tour system 5170 update the user model to store tour information 5171 persist the closing and skipping of tips in the client 5172 migration rules for tour items 5173 finalise the placement content and trigger for each tour item >>>epic feature
opening psm breaks editor mouse scrolling not sure what going on here but ve had this happen to me few times without figuring out how to reproduce it now can issue my mouse scroll doesn work in the editor after opening the psm repro focus on the editor open the psm close the psm clicking off of it or either does the same try to scroll the editor you can you can unbreak the scroll by unfocusing the editor click on the title input for example long gif showing all these things broken scroll https cloud githubusercontent com assets 1207005 7219187 011efdcc e694 11e4 94e7 d590f14ec37d gif specs osx 10 10 chrome 42 2311 90 ghost pro using two finger gesture mouse pad scroll >>>bug
navigation url and current handlebar helpers inconsistent results when using blog navigation directly outside of navigation hbs partial the url and current handlebars helpers do not work correctly when using the navigation template driven helper to pull in the navigation hbs partial the url and current handlebars helpers work as expected both cases iterated over the navigation items using foreach navigation in both cases label worked as expected tested this on index hbs page hbs post hbs >>>bug
ghost admin should not error if the currently active theme is missing if you try to start ghost and access the admin panel when the currently active theme is not present in the `content themes` directory the following error is thrown http puu sh hgiy1 png the admin panel should function 100 without theme present so that you can change theme to one that is present this is regression the frontend should show the error the currently active theme casper is missing this also appears to have lost some styling steps to reproduce run ghost at least once stop ghost remove the active theme start ghost try to access ghost to change the theme technical details ghost version master >>>bug
api add `featured` filter option to posts browse currently the `api posts browse` endpoint takes the following options https github com tryghost ghost blob master core server api posts js l48 page limit status staticpages tag there is an open issue to swap `page` for `offset` https github com tryghost ghost issues 5093 and another issue to swap `staticpages` for `page` https github com tryghost ghost issues 5151 as well as add generally better support for querying pages it would also be good to be able to filter posts by whether or not they are featured `api posts browse featured true or `api posts browse featured false making this work involves adding this as an allowed option in the model >>>api
api no more staticpages parameter better pages support note this issue is pretty blocking for the get https github com tryghost ghost issues 4439 at the moment the posts browse endpoint supports property called `staticpages` if set to true this includes any posts which have `page true` set on them pages perfect for the admin ui however it not great as general api feature there is currently no way to fetch just pages which is weird and the `staticpages` parameter is horribly named the ideal thing here think is to pass do `api post browse page true as that matches the name of the property in the database we should also support `api post browse page null all so that the possible values are true false or either null or all depending on what makes sense so that we can still support returning both for the time being in addition it would be best to create an alias of `page` for posts with page true at least in the helper itself so that you can do get pages instead of get posts page true the blocker for doing this is 5093 because `page` in the api currently refers to pagination rather than the `page` property if we use `offset` directly instead of page for pagination in the api not only do we get more flexible interface but we also get the `page` keyword back for use for actual pages two other possibilities would be to have `api post browse ispage true in which case we probably want consistency in `api post browse isfeatured true not sure about this to have `api post browse postorpage page very wary of anything generic like `type` because that just spreads the idea there might be more options like this in future in the long run pages and featured might get reimplemented as hidden private tags https github com tryghost ghost wiki tags 101 visibility instead of properties on the post model itself so think keeping the most simple interface `page true` is best >>>api
bug author tags not showing up when using prev post or next post issue summary in my post hbs wrote prev post title posted on date format mmmm yyyy by author excerpt words 80 prev post everything but the author was outputted technical details ghost version master latest commit 9ea2f5535e456a13d41f4aec06445317fdef1f31>>>api bug themes
ghost head not working on error page in ghost the theme currently use has custom 404 error template in error hbs it uses the ghost head helper in the template this worked fine in all versions after upgrading to however get the following error when browsing to non existing page error error hbs cannot read property of undefined error whilst rendering error page error template has an error typeerror error hbs cannot read property of undefined at object ghost head users frank src openminds frank ghostblog core server helpers ghost head js 269 31 at object users frank src openminds frank ghostblog core server helpers index js 60 28 at function waiter resolve users frank src openminds frank ghostblog node modules express hbs lib async js 83 at object users frank src openminds frank ghostblog node modules express hbs lib hbs js 394 18 at object eval eval at users frank src openminds frank ghostblog node modules express hbs node modules handlebars dist cjs handlebars compiler javascript compiler js 209 23 11 166 at ret users frank src openminds frank ghostblog node modules express hbs node modules handlebars dist cjs handlebars runtime js 144 30 at ret users frank src openminds frank ghostblog node modules express hbs node modules handlebars dist cjs handlebars compiler compiler js 462 21 at rendertemplate users frank src openminds frank ghostblog node modules express hbs lib hbs js 481 13 at render users frank src openminds frank ghostblog node modules express hbs lib hbs js 529 at renderit users frank src openminds frank ghostblog node modules express hbs lib hbs js 591 18 forum thread https ghost org forum installation 18712 ghost head not allowed in error hbs after upgrading to >>>bug themes
publish button is unbound to post type changed post from page to post but the publish button still read update page it should ve updated to update post guessing we just haven added the model type to the ember cp reproduction publish page turn the page into post save the button still says update page version browser chrome>>>beginner bug ember
bug author level users cannot access their user profile if you re logged into ghost as an author level user it is not possible to get to your user profile page clicking the link causes the page to hang there is this error in the console but not 100 sure it related http puu sh hcurz png steps to reproduce login as an author click on the `your profile` link technical details ghost version 0>>>bug
secondary autosave wired to never fire the original spec for autosave was to have two triggers one would fire after seconds if the user stops typing in the editor one would fire every 60 seconds if there was something to save it seems from reading the code testing that the two have been conflated together such that they both only fire in the case that the user stops typing in the editor and given that whenever save happens both autosave timers are cleared it seems that the secondary autosave can and will never fire the difference between the two is that the first should be saving incremental updates to the post and the second is there as background save and would also fire if any of the meta information for the post had changed if had edited tag or uploaded an image autosaving meta data is less important than ensuring we keep the changes to the post so this isn critical however it seems the current setup needs little work for it to work as intended >>>bug
autosave console error have been doing spot of testing pre release and noticed that the editor is still giving the following console error under certain conditions `uncaught typeerror cannot read property getvalue of null` originally noticed this here https github com tryghost ghost pull 5046 issuecomment 83015717 but wasn able to reliably reproduce have now also isolated the reproduction case steps to reproduce load up new editor type title then click or tab into the main editor so that you switch from new to edit mode route start typing few characters into the editor then stop wait seconds for autosave to fire when autosave fires it fires twice erroring the first time and working the second note that this bug is not particularly serious because the second autosave works just fine so autosave is not broken per se it seems to me that this is because the autosave function in the controller gets bound to model scratch both on the new route and then again on the edit route once we transition guess the new controller events are still bound but the new controller no longer has an editor technical details ghost version master>>>bug
update semver due to sec advisory no issue explanation here https nodesecurity io advisories semver redos>>>blocker
no more feature flag for code injection closes 1993 remove the feature config flag that means code injection has to be enabled>>>blocker
admin gets stuck on tag management screen when browsing the tag management screen on latest master it is not possible to navigate to any other page the following fires and nothing happens `get ghost api v0 settings type blog 2ctheme 200 10 055 ms`>>>bug
new published link does not respect subdirectories see comment https github com tryghost ghost commit 91124646edb9df1f5ef94e7bd7d3a81961735758 commitcomment 10624608 >>>blocker
remove duplicate subdirectory in rss urls this is quick and dirty fix for now which is pretty bad because we keep having issues in this area ideally we need to be refactoring towards using smarter url functions centralised in `config url js` and properly tested however wanted to ensure that at least fix for this was included in the next release plus want to refactor the rss feed to be event driven and that will mean moving all of this code therefore it seems like good idea to get all these changes in before do that fixes 5064 >>>blocker
add media content support to rss refs 2263 4888 adds media content element to ghost rss feeds containing the post cover image if one is available removes the prepending of the image to the field keeps the prepending of the image in `>>>blocker
invited users appear in sitemaps when user gets invited to blog the method to add their url to the sitemap is incorrectly called when the sitemap is next generated the api call to fetch all users correctly does not return the invited users steps to reproduce open the authors sitemap login to your blog as user who can invite users invite user refresh sitemap notice invited user is present restart ghost note the invited user is not included technical details ghost version all versions with sitemaps>>>bug
feature post preview links v2 this is rework from the original spec discussion in 4595 to start with the problem we want to solve there are two slightly different use cases here users commonly want to view version of their post that has their theme and all of their embeds enables so that they can see what the finished product is going to look like users commonly want to share post with few trusted people to get feedback before publishing following on from the discussions that were had in 4595 lets implement post previews for our users with two different modes private default and public can be enabled disabled by default the preview will be available to anyone who would normally be able to see the draft post according to the existing permissions system if desired the preview link can be converted to being public and disabled when needed as these urls are going to be sharable they should be short and pretty ideally something like `http my ghost blog com c7djz` with the to make this easily identifiable as preview url and then small number of random characters as short as possible we can achieve this by using something like the hashids https www npmjs com package hashids package to create hash from the post id using the dbhash as the salt this url should only work whilst the post is draft once published this url should 301 to the proper url the preview route should add the private cache control header rule that we use for the admin and api so that this page is never ever cached as well if the url is in private mode and the user doesn have permission to see the post the url should respond with 404 rather than 403 think in order to make it possible to switch between private and public mode we ll need to add new `preview` field to the posts table which defaults to `private` this field would be used when handling the route to determine whether to require the user have permission to see the draft believe it should be possible to do this by passing in the logged in user as the context to the api when in private mode and passing the internal context when in public mode the ui for getting the preview url the switch between private public are still in the works there will be need to inject code into the preview using the ghost head foot mechanism so that we can clearly mark the view as preview and perhaps include other ui elements therefore think it makes sense to implement the private preview url first and then layer on the sharing functionality as second piece >>>feature
api pagination with offset instead of page this is needed in order to fully support channel customisations see 5091 as part of the move towards refactoring the ghost frontend into fully customisable and extensible set of channels one of the features or customisations we want to make available is the ability to set different number of posts per page for the first page vs subsequent pages in channel make it so that the homepage shows post and every subsequent page in the index channel shows 10 at the moment pagination in the api is managed by passing in `limit` how many posts per page and `page` number this enforces that every page in the set must be the same size this limitation can be overcome by telling the api `limit` how many posts you want and an `offset` where in the list to start from calculations around the required offset for given page can then be done based on the channel settings therefore we should replace the `page` concept in the api with an `offset` concept instead for all of our findpage methods see also 2896 >>>api
epic frontend refactor channels this is wip epic still working out the steps needed to get from and ll break it down into sub tasks sub issues as and when in the meantime the goal is clear and documented here the frontend of ghost that is the server side code which renders blog using the active theme has been somewhat unloved for little while now it essentially consists of some hard coded routes in routes frontend js` which in turn call the monolithic functions in controllers frontend js` it time for this part of ghost to be refactored into something more elegant and importantly something more extensible on the wiki https github com tryghost ghost wiki channels 101 you ll find new document titled channels 101 https github com tryghost ghost wiki channels 101 which introduces and explains the concept of channels for the frontend in short channels are the abstracted concept of list of posts the homepage the tag archive the author archive or any other group of posts you could conceive of and the very end of the document it talks about working to slowly remove hardcoded bits of the fontend and refactor it into configuration generation code before finally moving towards making channels model api endpoint just like posts tags and users this issue is the epic where we ll keep track of our progress towards achieving this new world order refactor out the hardcoded slug keywords 4519 convert sitemaps rpc pings to use events 5069 move rss from frontend controller refactor to use events move post processing of author data out of the frontend controller 5159 support offset rather than page in the api 2896 refactor frontend controller 5192 need to solve dynamic routing for channels rss feeds for each channel linked in that channel post urls when in channel pagination when in channel move structured data to be generated for channels>>>epic server
re implement top notification position styles references 5071 re implements the previously broken top notification styles moves the top notification outlet outside the to ease styling we have several nested position fixed absolute boxes that make this tough moving the outlet makes it easier screen shot 2015 03 26 at 12 01 38 https cloud githubusercontent com assets 390392 6847545 670e616e d3bf 11e4 8e39 f1acd615ada9 png screen shot 2015 03 26 at 13 41 30 https cloud githubusercontent com assets 390392 6847550 6a05ac42 d3bf 11e4 9578 7b79b529a384 png >>>blocker
zelda private blogs login form settings design main issue https github com tryghost ghost issues 4993 the password protected blogs feature has two pieces of design work needed to complete it the design for the login page which is going to live at private the spec design for the location of the password and message inputs somewhere in the settings panel >>>design
update notifications little while back we added system to ghost which regularly asks ghost org if there new version of ghost available ghost org replies with little bit of json like this this tells ghost what the current version is and when it is allowed to ask again inside of ghost this is wired up to our notification system and if the version number goes above the current version of ghost special notification is shown at the top of ghost on all pages which doesn go away until the blog is upgraded the major problem with this is that it incredibly invasive and annoying so we re currently only using it for major version updates rather than minors so as not to infuriate our users when we do fast releases clearly that makes the system significantly less useful the second problem is that the message in the notifcation is hardcoded inside of ghost and that makes it not particularly useful there no way to say hey this interesting thing happened and that why you should update there also no way to send notification outside of version change which is quite limiting to make this whole system significantly more useful both to us and to our users want to make the following changes move the update available notification to the about page http puu sh gpuvk png as this is where the version information is currently shown lets show the update information here it means that users have to check the page to find out but it does at least mean the information is always to hand in an easy to find place add support for custom messages the updates endpoint on ghost org is going to be updated to send back little bit more json that will look like this by default when we want to display message to our users it will look like this the intention is that ghost will read these and display these custom notifications in the top notification spot where update notifications used to go allowing us to push particular release or feature without interfering with the general concept of is there an update available the top notifications will need to be changed to be dismissible unlike the existing version note at some point since there has been regression in the notification system such that top notifications are no longer shown in the correct spot at the top of the screen but appear in the normal bottom left toaster location this will need fixing each custom message from ghost org will have properties firstly guid which should be stored in an array of `seennotifications` in the settings table once message is dismissed so that the message is not shown again secondly version string which adheres to semver this is to indicate which versions of ghost the notification should be shown to finally the html content for the notification is provided in full but should be sanitized via the caja tools already in the ghost admin client to ensure this cannot be abused once we have this in place we then have different notification concepts driven on versioning whether or not there is an update available which is simple factual information and custom messages which provide an opportunity to communicate important details to our users >>>feature fix_wanted in_progress
refactor sitemaps to use centralised events this is the result of me being bored on plane for few hours it refactor of the sitemap generation to use centralised event system the idea is to use this for sitemaps and xmlrpc potentially rss and other things too this is now working pr with tests and bugfix once this is in ll do further work to update xmlrpc and rss to be generated based on these events fixes 5104 refs 4348 2263 create centralised event module hook it up for posts pages tags and users use it in sitemaps instead of direct method calls check events are fired in model tests update sitemap tests to work with new code fix bug where invited users were appearing in sitemaps>>>blocker
urls images in rss broken if blog in subdirectory version 10 if your blog is not top level but in subdirectory https example com blogs user then urls for assets such as images will appear in the rss feed with the subdir duplicated in the url example https example com blogs user content images 2015 03 image jpg becomes https example com blogs user blogs user content images 2015 03 image jpg note the duplication of blogs user >>>blocker bug
change to unpublished post title doesn update post url when change the title of an unpublished post the post url doesn update understand that if post has already been published changing the url might not be desired but prior to publication often making dramatic changes to the post title which like reflected in the url what makes this more pressing is that the post url isn displayed on the same screen so it very easy to miss >>>bug ember fix_wanted
improvements to the excerpt helper it unquestionable given the vast number of issues prs forum posts support requests and other mentions of our excerpt helper that it leaving lot to be desired yet as demonstrated by the wide range of different ideas on how it should be improved it hard to find consensus on what better actually looks like having looked through the issues discussions prs and what themes are currently using there are two broad categories into which the concerns fall into the first being improving the excerpt that ghost generates from the content and the second is adding features for custom excerpts custom excerpts are niche requirement and we want to focus our efforts on making apps possibility so that it is possible to add an excerpt field or subtitle field or standfirst field or whatever custom field suits your use case rather than adding these things to core https github com tryghost ghost wiki what makes it into ghost core 3f therefore this issue exists purely to address the former improving the generated excerpts there are two key things which makes the current excerpt helper output quite undesirable it cuts off mid sentence ugly it strips all formatting confusing the formatting problem has meant many themes and ghost users are using content instead of the excerpt helper this is not ideal as it outputs images and other media that don really make sense for an excerpt as well as resulting in the need for some sort of appending feature https github com tryghost ghost issues 2163 to make it possible to display read more links it also still doesn solve the cut off problem to solve the cut off problem we want to introduce excerpt paragraphs which will return the first text paragraphs from the content to solve the formatting problem it makes sense to change the helper so that it leaves valuable links and text formatting in place rather than stripping all html the combination of these two things working in tandem should lead to better excerpt the media script and all other non formatting tags should be stripped from the content first and then from the remaining text content we can return as many paragraphs as the excerpt helper requires moving forward think the excerpt helper default should also be changed from `words 50 to paragraphs when processing html in this way it important to do it in such way that bad html doesn trip up the code at the moment we make heavy use of the very smart downsize https github com cgiffard downsize library for truncating html however the excerpt helper does it own brute force https github com tryghost ghost blob master core server helpers excerpt js l23 stripping of html therefore this is likely to need bit of rethink the following is list of elements that will be permitted in excerpts `a abbr bdi bdo blockquote br cite code data dd del dfn dl dt em ins kbd li mark ol pre rp rt rtc ruby samp small span strong sub sup time ul var wbr` this list was generated from https developer mozilla org en docs web html element and includes all block and inline text formatting elements once all other elements are removed the first paragraphs should then be returned not including any empty paragraphs in the long term the excerpt tag whitelist will become extensible via filter so that extensions to the editor can also declare additional elements that should appear in excerpts thinking of things like mathml here in the short term the next step here is to review the downsize https github com cgiffard downsize library and determine whether these features can be added or whether this needs bit of re think >>>fix_wanted themes
bullet list followed by numbered list breaks editor can think of any reason why this would be invalid just like 5039 this breaks in editor as well as on the front end image https cloud githubusercontent com assets 120485 6663528 28228fa8 cbd0 11e4 8d26 5182aac8bfdf png >>>bug editor
github flavoured markdown can handle github flavoured markdown whenever you place certain markdown inside triple back tick fences gfm both in editor and on front end still tries and fails to render it so far for me it breaks spectacularly when placing the following inside code fences images code fences strikethrough text doesn work with spaces either image https cloud githubusercontent com assets 120485 6663301 ff90b094 cbcd 11e4 9b77 37c607e9cc57 png works fine when spaces used image https cloud githubusercontent com assets 120485 6663483 b9e2431c cbcf 11e4 909b 76355568e925 png >>>bug editor in_progress
bug url helper breaks subdomain urls navigation issue original report https ghost org forum bugs suggestions 18510 navigation links with subdomain of the base url do not work in the menu using subdomain of your blog main url in the navigation helper results in the base url being output on the frontend the url is correctly stored as an absolute url in the settings table therefore the problem must lie in the handling of the url in `config url js` in short the input is correct but the url `` helper output is incorrect steps to reproduce example my blog is `hannah wf` host github project at `mycode hannah wf` enter the following into the navigation settings page http puu sh gzcgx png what gets output by the navigation helper technical details ghost version master 10 >>>bug
markdown conversion assumes lot of the places where we do special handling in our markdown conversion we pull out blocks so that they are kept as is however in much of the code it is assumed that the tag will appear without any attributes it assumes that there will be exactly this doesn account for the fact that all html tags can have attributes and that it may appear something like this causes some small subtle and annoying bugs with the special rules like underscore handling footnotes highlighting etc all of which will incorrectly affect whatever appears inside the tag >>>bug editor in_progress
blog globals not working in navigation pagination special partials navigation seems to be having strange issues have some code in partial called `navigation hbs` which include in `default hbs` the affected code is the following full code issue cannot use global variables this line gives the following issue then tried replacing with the actual code had the issue was fixed but new one appeared the following code did not return anything you can try it by yourself the theme am working on is here https github com viruzx basic plus ghost theme>>>bug themes
enter keystroke behavior when editing blog logo and cover when changing the url of the blog logo and blog cover with `filestorage false` pressing enter after typing the url does not add the image but behaves like the cancel button was clicked clicking save adds the image as expected mozilla macintosh intel mac os 10 10 applewebkit 537 36 khtml like gecko chrome 40 2214 111 safari 537 36 >>>beginner bug fix_wanted
bug creating code block after list no matter how many blank lines type it always show two blank lines image https cloud githubusercontent com assets 5842525 6554861 ef36309e c69a 11e4 863b 690728cae214 png >>>editor
tags sometimes disappear on post save ve seen this happen on at least one occasion as tend to have one tag per post thought was imagining it and simply hadn added my tag yet but alas this is seems to be an ongoing issue steps to reproduce this is as yet unknown ve had play around and not yet seen it happen whilst was looking for it it does appear to happen whilst the editor is open it doesn require refresh to notice that the tags are missing have sneaking suspicion it may be related to an action in the psm but haven found out what yet technical details seen in not sure before then>>>bug
code injection line numbers and syntax highlighting we currently have the lovely code injection 1993 feature which is accessible via the labs page in order to get this ready to be fully shipped and no longer classed as labs feature we want to upgrade the textarea to have nice syntax highlighting and line numbers for the html js css code that will likely be pasted in there are three main things to do to complete this decide on what editor library to use to add the new functionality this could be codemirror or suggestions are welcome codemirror is being dropped from the main ghost editor so there no longer requirement that it be that make sure the syntax highlighting and line numbers are styled to look like they fit in the ghost admin this might take bit of toing and froing with the core team wrap the fancy textarea functionality up into little ember component so we can reuse it elsewhere in the admin this might be bit of punt for `beginner` issue but confident it suits someone new to the ghost codebase as it mostly wiring job >>>beginner ember
feature password protected blogs one feature that is in high demand is an easy way to password protect the frontend of blog this could act as an under construction type page or as way to only circulate your content amongst certain group of people the proposal is to provide simple configuration option in the settings panel http puu sh gmrsr png note that the structure and labels here may change once password is filled out in the password box on this page visiting any page of the blog should result in temporary redirect to new page served at private which shows the message if available and form to enter the password this new page should have default template design issue 5073 5073 and be overridable customisable by providing `password hbs` template in your theme entering the password into the box should provide access to the original page requested the password should only need to be entered once month so that users are free to browse around once they have entered the password the rss feed and sitemap should probably simply return 404 for these blogs the message field should probably accept html and or markdown >>>feature
navigation url validation is too strict the test for whether or not url `isrelative` in the new `gh navitem url input` component is supposed to check if the url is relative one and prepend the base url if so to make the url absolute however it ends up checking if the url is valid url as it is and if not it appends the base url meaning any invalid url ends up with the base url appended this has positive side effect in that it prevents the field from being potentially misused to save unsafe urls like `javascript alert it also has negative side effect in that it prevents users from using valid uris which are not urls like `mailto me myaddress com` think that the `isrelative` check needs to be updated to do better job of checking for what is or isn relative url we also then need to add correct validation santisation to prevent the url field from being misused >>>bug ember
user should get password attempts this is the silliest bug in the history of ever currently if you try logging in and fail your password few times you eventually see this http puu sh gl2hy png it tells you to try one final time but even if if you do enter the correct password this time around you get this http puu sh gl37y png because unbeknown to you your account was already locked on the last go around and you don really have another attempt remaining >>>bug
bug psm breaks when using keyboard navigation steps open psm click on url field keep pressing tab until it breaks psm bug https cloud githubusercontent com assets 120485 6443926 27019df8 c103 11e4 9603 ad1f7ceb5ebd gif >>>bug ember
image src in rss feeds have trailing slash images in rss feeds have slash at the end of the `src` attribute causing the image to not show you can see it the demo rss feed http demo ghost io rss positive this was working as intended in so could be regression technical details ghost version on ghost pro >>>bug
feature reading time helper opening for discussion this one has been requested many many times in one form or another want to get sense of whether it worth pursuing essentially this would be simple reading time helper available both in admin and in themes which would output the estimated average reading time based on the length of your post think this feature is generally useful and wouldn add much overhead anywhere >>>feature
feature post notes opening for discussion here really simple feature which we could ship with extremely minimal work required post notes use case when writing or researching an article it common to gather together source material and ideas before slowly forming them into coherent post not all material is always used and not everything needs to go into the final post post notes would allow you to have simple free form scratch pad of sorts to store additional data alongside each post which is only visible within admin only additional ux note this would require modification to the post settings menu to open alongside the editor rather than on top of the editor which is to say that you would be able to write in the editor while keeping the post settings menu open image https cloud githubusercontent com assets 120485 6390858 a7d424c6 bdb8 11e4 88d0 26a6e74cfa2e png >>>feature
navigation saving with last field filled but not added makes ordering jump this might be fixed by 4943 haven checked yet just wanted to get it written in steps to reproduce fill in the last field the one with no handle save expected the new nav item stays at the bottom observed the nav item jumps halfway up the list of navitems>>>bug
navigation saving with empty label deletes item rather than erroring steps to reproduce delete the label for one of your nav items leaving the url save expected behaviour an error message should pop up letting me know that can save with an empty label >>>bug
navigation delete not behaving correctly after re order steps to reproduce open navigation make sure there are at least two items in the list move the bottom item up in the list try to delete the item that was just moved and nothing happens try to delete one of the items that is now below the moved item and everything above it is deleted >>>bug
navigation invalid sort metadata when item saved without pressing enter steps to reproduce open navigation add new navigation item but don hit the or press enter but save the screen try to re order the list and changes won persist there also an exception in the console >>>bug
urls used in embedded javascript within posts get parsed trying to add snippet of javascript in page post and there url as variable it gets automatically detected by the markdown parser and it gets unfortunately converted to an anchor tag is that expected behavior >>>bug
reauthenticate fails saw this reported recently in irc and have also had report of this via email from ghost pro user it seems that the form won submit have not yet tried to reproduce it and don have full details of the blog however do have this screencast of it occurring which think is enough to confirm it definitely thing wink http puu sh fmdml gif it seems to me that there either console error blocking submission or perhaps it something to do with password manager type issues again technical details ghost version >>>bug
rss link lose in the rss only link to the home page `http ghost org link` original link http ghost org new page link` casper theme>>>bug
icon scss camera appears twice on lines 155 167 there is each variable named camera with differing values though the icons look the same lines 331 367 refer to camera to make css rules >>>css
mobile navigation does not close when going form mobile to desktop sized viewport when resizing the browser from mobile sized width to desktop with the mobile navigation open the navigation should close right now it doesn the class `global nav expanded` on is not removed when resizing it works correctly when clicking to close though steps to reproduce resize your browser down to 900px or less open the navigation resize to more than 900px see error in the console and broken layout technical details ghost version 43f2be4d798d57d0e9170f142cd15e4d2799ec1c also present in client os mac os 10 10 browser chrome 40 bug https cloud githubusercontent com assets 390392 5980657 abb55f06 a8aa 11e4 950f 25128bfbf0d8 gif >>>bug ember
bug favicon not being used by rss readers most rss readers like feedburner and feedly look for favicons automatically at the website root ex blog com favicon ico the problem with this is that when you have favicon in your theme the default favicon still shows up at the website root because the theme favicon lives in blog com assets favicon ico the favicon works just fine in browsers because you can specify the location in the html the only problem is when there is direct request specifically for the favicon at the root that the default shows up instead of the custom one ex http ghostforbeginners com favicon ico shows the default but the site has its own custom favicon working just fine >>>bug fix_wanted themes
use first theme available if casper doesn exist on first run currently on first run the server crashes if the casper theme is not present suggest using the first theme available if casper doesn exist and only throwing if no themes are available would this be desirable behavior can submit pr if so >>>fix_wanted server themes
bug meta description doesn work inside of foreach posts issue summary right now meta description returns an empty string when used inside of foreach posts on the other hand doing log meta description prints the correct string to the console steps to reproduce this happens wherever there foreach posts for simplicity sake here are steps to reproduce this with the default theme casper replace excerpt with meta description in `partials loop hbs` visit page with post list for example the frontpage and notice the empty text instead of the post description think got patch ready but first wanted to ask whether that intentional or actually bug technical details ghost version 8>>>bug
wish better diagnostics when unsupported node env is set if `node env` happens to already be set to an unsupported value several `grunt` command will fail to work with no indication of what the problem is this could happen to potential contributors who checking out the project but happen to have different `node env` value already set via bashrc` that was my case here what the failure looks like you you can try explicitly setting `node env boom` to see what happens ideally diagnostic would be printed in this case like `node env boom` is not supported `>>>fix_wanted server
discussion use knex migrations knex seed instead of our migration system when ghost first started out bookshelf knex had no solution for migrating the database through versions so we built our own there are some really nice things about our migration system in fact someone proposed knex steal it https github com tgriesser knex issues 127 ghost migrations our migrations work by us modifying the `schema js` file and updating the databaseversion number in `default settings json` when ghost starts it checks the number in `default settings json` against the local database version and if number in ghost is higher it knows it needs to perform some migrations it then runs comparison between the local database and `schema js` figures out what has changed and generates the alter table and alter column statements to update the database that means that when we release new version of ghost if the database version number changes then when user upgrades the migrations will automatically run sometimes if you re on master especially if you re developer you can get stuck because the database version number changes in one commit and one of the `schema js` updates doesn happen until later commit the workaround for this is to start ghost with `force migration true` env var this forces ghost to compare the local database with `schema js` and then generate and run any migrations that are required it all works pretty neatly and the really nice thing about it is that it is all based on big json object that describes the database which is useful for other aspects of models and validations the downside there are few downsides to our migration system one big one is having to maintain it knex doesn yet fully support all the possible alter operations that you might want to do on database so as it adds more options we need to add them to the possible statements that can be generated by our system more importantly ghost migration system focuses 100 on the database structure and has no provision for modifying the data in the database in systems like activerecord migrations often contain data modifications as well useful for doing things like changing default values ghost has fixtures system https github com tryghost ghost tree master core server data fixtures which is totally separate and is little more than some hard coded functions which detect if migrations are going through database version and therefore need to adjust some data deep within this are the permissions fixtures https github com tryghost ghost tree master core server data fixtures permissions which are woefully lacking in any sort of migration capability https github com tryghost ghost issues 3910 and this is holding us up from adding new permissions meanwhile knex has added its own migration system http knexjs org migrations based on activerecord and more recently added the concept of seed files http knexjs org seeds cli so the big question is the system in knex now more sophisticated than ours will it solve our fixtures problems as well as other migration issues https github com tryghost ghost issues 4687 issuecomment 70423880 and should we switch >>>data
navigation url default value base url preview this is part of the navigation epic 4535 this issue covers the rules of what the default value for the url field should be and how it should behave for each item in the navigation ui image https cloud githubusercontent com assets 120485 5228785 917b5448 7717 11e4 9b1d 1e24a48e5729 png entering relative url will be very common so to make this easier the base url should be provided as default url rather than as placeholder it should follow these rules by default the value should be the blog base url including subdirectory if value base url set the colour like placeholder else colour is black like value on focus the colour is always black like value if value base url on click focus always puts the cursor at the end if value base url and cursor is at the end pressing backspace should delete the whole url if value null on focus out then the base url should be re inserted this should make it easy to add relative url and to clear the field to enter an external url in future it be great to add autocomplete suggestions to this input >>>ember settings
next post and prev post helpers this requires 4262 there is an open pr 4772 with the addition of the ability to fetch the next and previous post via the api we need to make it possible for theme developers to access this functionality the get https github com tryghost ghost issues 4439 helper provides one avenue for doing this something like however that little unintuitive for feature like this which is highly requested and likely to be used by large number of people so it makes sense to provide slightly nicer set of helpers next post and prev post as each of these will fetch all of the properties of post they ll need to work as block helper next post title next post and prev post title prev post each helper will need to determine the current post id make query to the api to fetch the data and then ensure the data is provided such that helpers like title and url will work correctly inside the block >>>themes
feature advanced tag management as of we ve shipped the basic tag management feature https github com tryghost ghost issues 4248 there are number of cleanup and improvement tasks that we still need to track and the big picture vision for tags described in the tag 101 https github com tryghost ghost wiki tags 101 document on the wiki covers number of advanced features that we can now add one at time remaining tasks from 4248 dry up the code issue 4642 use tag meta data on tag archive pages issue 4677 tag management functional tests issue 4507 enforcing uniqueness of tag names issue 4687 advanced features include issues to be raised as and when we re ready to implement the query helper https github com tryghost ghost issues 4439 ordering specific to post alphabetical and by number of posts visibility private tags primary tags like category hierarchy improved tag ui in the editor 3800 search and filtering at present the tag 101 https github com tryghost ghost wiki tags 101 document is the best resource for details on the advanced features >>>feature
bug new posts are added to the bottom of the post list issue summary when you create new post the latest post appears at the bottom of the post list until refreshing or leaving then revisiting the admin interface new post issue https cloud githubusercontent com assets 3655670 5693745 4eeff4b2 98fa 11e4 98e6 a08a4fea4f21 gif steps to reproduce login to ghost note the order of the posts create new post and publish it return to the content menu and note the new post appears at the bottom of the list this is bug because the default ordering of the post list is reverse chronological order thus the latest post should appear at the top of the list technical details ghost version client os mac os 10 10 server os mac os 10 10 ubuntu linux 14 04 node version 10 30 browser chrome 39 2171 95 64 bit database sqlite additional information really new to ember so please feel free to call me on my ignorance but thought this was relevant it seems that when the new post is added to the store loosely assuming it has something to do with ember data it is just stored as the last item until we do completely new request to the server refresh screen shot 2015 01 10 at 08 49 pm https cloud githubusercontent com assets 3655670 5693939 cc5f4cea 9904 11e4 9c1e 36fff21050b8 png >>>blocker bug
has helper doesn check for exact tag matches the has helper `tags lookup is using regex and only doing partial match of the tag steps to reproduce create post with the tag produce or any other tag which can be substring of another tag and publish it create post with the tag reproduce or any other tag which is superstring of the first tag and publish it update your theme to check for the superstring tag something like has tag reproduce hello world has check your blog and see that both posts output hello world not just the post with reproduce as tag tag matches should be exact technical details ghost version master >>>bug themes
bug imports from ghost installation imported owner account login not permitted gives incorrect error message issue summary when importing data from ghost installation blog old to different install of ghost blog new and then logging out of the blog new admin account on blog new user attempting to log back in to blog new with the different account details for the imported owner account from blog old is given an error message saying that the account is locked due to too many login attempts urging them to use the forgotten password link even though this account has never attempted log in before on this new installation of ghost when user follows through with password reset the account works fine steps to reproduce export ghost settings and data from one ghost install import into different installation log out of ghost on the installation which the data was imported into attempt log in with account credentials contained in imported data and settings see incorrect error message screen https cloud githubusercontent com assets 7681885 5681762 3c897f94 97e9 11e4 86cc 84ef5b1d0a2a png expected behavior user is given correct error message explaining why they are unable to log in or user is able to log in to imported accounts without any issues when importing from another ghost installation if password reset is required on import call to action technical details ghost version release node version 10 25>>>bug
bug publish confirmation notification when publishing page when you publish new page the notification says post published view post if we re publishing page it should say page published view page >>>bug
user signup validation is broken if you try to signup an invited user on master you get bunch of validation errors as if you didn fill out the form http puu sh ec3x1 png steps to reproduce log in to ghost and invite new user log out of ghost click the link in the new user invite email fill out the form and hit create account technical details ghost version master introduced since >>>blocker bug
infinite scroll in posts list dead on large monitors posts list infinite scroll dead on large monitors discovered on 30 monitor running 2560x1600 resolution issue summary unable to load next batch of posts in the posts list inside admin when browser is larger than the initial 15 items steps to reproduce make sure there more than 15 posts in the list tested with 20 it doesn matter if they re all draft resize your browser to window height greater than 1500px go to http localhost 2368 ghost http localhost 2368 ghost to see the posts list try to scroll the posts list when trying to scroll the posts list nothing happens would expect the list to load the next batch of posts into the list posts list dead scroll https cloud githubusercontent com assets 67565 5637891 a1251d40 9600 11e4 9661 348608c6cd46 gif workaround is to resize the browser windows for vertical scroll to appear and then scroll the list again to load up the next batch of posts workaround posts list dead scroll https cloud githubusercontent com assets 67565 5637898 b0799b18 9600 11e4 82af eeee216ec78d gif technical details ghost version master latest commit 04180bc83b5e99947d1c3820e3032c62e82a08c2 client os mac os 10 10 server os mac os 10 10 node version 10 35 browser 39 2171 96 chrome 41 2251 dev database sqlite>>>bug
informing users when the autosave goes wrong this is effectively the follow on from 4543 we ve now got autosave working much more reliably and more importantly if things go wrong it will recover further still in we got better session handling on the editor such that if you get logged out which is common problem which interferes with autosave you get the option to log in again via modal on the editor meaning less chance for losses however there still no warning to the user if autosave isn working for some reason couple of different options were proposed in 4543 and 4558 which centered around the idea that warning should be displayed if we get more than failures in row to take directly from jaswilli comment on 4543 https github com tryghost ghost issues 4543 issuecomment 65112840 instead of flag indicating that an error has been shown we could have counter that gets incremented when auto save is invoked and is set back to zero after successful save that way we could do something like the main problem with these ideas is that we don really know what going on so it probably worth thinking about introducing better logging of events in ghost and using ghost pro to build picture of what needed still wanted to record this before closing 4543 as something we probably need to do >>>design
bug tag settings menu shows multiple url and submit items for tag image field when using filestorage false issue summary the tag settings menu that is activated upon navigating to the tags section of settings shows multiple url input boxes and multiple submit buttons if the filestorage false config option is set when navigating to other tags in the tags section of settings the total amount of url input boxes and submit buttons increases on each tag that one navigates to when navigating away from the tags section of settings example going to users and returning to the tags section and navigating to the tsm for tag the initial number of errant url input boxes returns steps to reproduce set the filestorage false setting in config js enable tagsui true in config js go to ghost admin page and navigate to settings tags select tag to activate the tag settings menu slide out see the tag image field being displayed improperly as in the first attached image select different tag from the one initially selected from within the tags section of settings to enable the tag settings menu slide out once again see that the number of url fields and submit buttons has increased as in the second attached image the correct behavior should be one that matches the rest of ghost while the filestorage false setting is being utilized one url field and one submit button technical details ghost version release client os windows vista sp2 with all recent updates server os heroku platform cedar 14 stack node version 10 35 browser chrome 39 2171 95 database postgresql tags1 https cloud githubusercontent com assets 7681885 5607610 efc90e02 942f 11e4 9ad4 443329538cb3 png tags3 https cloud githubusercontent com assets 7681885 5607611 f41ef20a 942f 11e4 81d2 aca5ef5bf641 png >>>bug
excerpt on front page omits cuts off sentences with links it looks like the excerpt of blog posts on the front page gets confused and omits cuts off words after it encounters link this is the text wrote in my latest blog post blog post editor https cloud githubusercontent com assets 1968991 5590794 47d52754 9140 11e4 84e8 e08fee1fdfa4 png the excerpt on the front page looks like this front page excerpt https cloud githubusercontent com assets 1968991 5590798 654a8234 9140 11e4 9034 5a2a3e12ee99 png if remove the link from the first sentence in the first paragraph everything works as expected am using ghost self hosted nodejs 10 33 >>>bug
feature dashboard the dashboard will eventually be the first screen you see when you log into your blog it will show stats trends and anything else you want to be there enabled by apps in the initial visual concepts https cloud githubusercontent com assets 390392 5580277 0a729a0a 9040 11e4 903d 91ca6966973f jpg of the dashboard had apps in mind but were not there yet the first steps towards having fully functioning dashboard are creating the foundations it looks deceptively simple but behind the scenes theres lots happening though we dont need all of these in the first steps they should be accounted for to ease development when theres more happening drag drop widgets which includes touch screens display settings screen for individual widgets be vertically and horizontally flexible show dynamic data text graphs images have done an experimental wip pr 4382 which is first pass as the base markup structure with drag drop but its by no means perfect it doesn look great either https cloud githubusercontent com assets 390392 5580280 1e603108 9040 11e4 857c 94ff1a74a71a png the first version the first version of the dashboard thatll ship will be simplified only showing set number of standard widgets what goes there how it looks and how it works is all up for discussion >>>feature
updating user account by matching email to that of existing user produces error steps to repeat add two users set one user email to match the other click `save` observe error object object in message pop up>>>bug
bug nav issue for editors on small screens if you are logged into ghost as an editor and are using small screen then navigate to settings you are taken to users screen and the back button fails to take you anyway leaving you stuck on that page solution is to change link to content page for editors>>>bug
bug footnote markdown syntax inside code ticks showing html issue summary when trying to put the inside of the code `` it shows the full html instead of the markdown syntax screen shot 2014 12 21 at 10 28 01 pm https cloud githubusercontent com assets 4715098 5521845 d624d938 8960 11e4 85ee de82ec45fd74 png steps to reproduce open post type in the following with on either side you will see the full html instead of the markdown you have typed technical details ghost version client os ubuntu 12 04 server os ubuntu 12 04 browser chrome database sqlite digitalocean>>>bug editor
error when saving post with two or more new tags steps to reproduce open create post and add two or more tags that don yet exist will be created and added on the backend save post tag add error https cloud githubusercontent com assets 214142 5520253 e65c6564 893d 11e4 9035 2d8762e47d51 gif >>>bug
regression paginated scrolling on settings users page the next page of users is no longer loading on scroll there were some changes to the markup made month or so ago suspect we re just no longer capturing the scroll event >>>bug
support importing markdown files this is part of the epic 4605 we now have zip support in the uploader meaning that it is possible to import from set of files rather than single file this issue describes the basic markdown file support that should be built into the importer in order to handle roon imports there are likely more features that could should be added like handling frontmatter and it is also likely that the importer will get restructured to be an app or series of apps in future when importing markdown files the following rules apply if single markdown file is imported this should become post if multiple markdown files are imported via zip each one should become zip the content of the markdown file is handled as follows if it has level one heading marked up with my heading` this should be treated as the post title `post title` and removed from the content if it has an image with no alt before level one heading this should be treated as featured image `post image` and removed from the content the remaining content of the markdown file should become the content for the post `post markdown` the filename is handled as follows if it contains status published or draft then this status should be used for the post and the status should be removed from the filename if it contains date or date and time then this should be used as the created at date for drafts or the published at date for published posts and removed from the filename the remaining filename should be used as the slug if there is no title in the markdown the slug should be used as the title as is note roon exports include deleted images these should be explicitly ignored note dates should be assumed to be utc >>>importer
tag names unique constraint is there reason why the `tags name` column doesn have unique constraint searched through the issues and didn really see any direct discussion despite there being some previous issues on attempts to prevent duplicates think historically the tag input widget has attempted to enforce uniqueness of tag names but now with the addition of the tag management page tags can be created edited to have duplicate names unfortunately there are areas of the code that assume tag name is unique the tag suggestion list in the editor as well as the `updatetags` method in the post model class for example if you create two tags with the same name things start behaving badly can really think of use case for two tags to have the same name it seems to me that we ought to add unique constraint to `tags name` in addition to trying to prevent this in the various tag uis >>>data
importer improve post and tag de duplication there was some work done in 4155 to de duplicate posts and tags when importing however this only handles de duplicating posts and tags which are being imported and doesn check the existing posts and tags on the blog to make sure there aren duplicates there this means it quite easy to accidentally import your content into blog twice ideally we check using the same rules that the same content doesn already exist on the blog and not import any duplicates >>>importer
update tag management ui with the post count once 4654 is merged it will be possible to add the post count to the tag management ui this will require updating the client side models in ember to recognise the post count property and making sure it doesn get sent back to the server updating the api call on the tag management screen to send include post count` replacing `n a` in the ui with the real post count updating the delete modal with message similar to the one in the delete user modal which explains that the tag will be removed from posts think that it >>>ember
structured data in 3900 we added structured data to posts using the open graph twitter card and schema org formats this improves the functionality of ghost posts within social media and search engines making them more shareable and searchable it all done in ghost core without impacting on themes and it pretty awesome now it time to roll this out across other parts of ghost blog rather than just on post pages we want ghost head to output fancy structured meta data on the home page and the first page of the tag and author listings for the homepage the focus is on this being representation of the entire blog if someone is sharing this url they re sharing the site itself for the tag and author listings what being shared discovered is the tag category or author and the content is all related all of these pages have the potential to have cover image so it should be easy to create really nice preview nb that the data below is only intended to be output on the first page not page etc of any of the listings open graph the below represents proposed output for the homepage in ghost head based on the open graph protocol http ogp me specification should be tested against https developers facebook com tools debug and https developers pinterest com rich pins validator for the tag front pages for the author front pages this needs some sort of workaround to get an absolute url for the author cover rather than image twitter cards the below represents proposed output for the homepage in ghost head based on the twitter cards https dev twitter com docs cards specification should be tested against https dev twitter com docs cards validation validator for the tag front pages for the author front pages this needs some sort of workaround to get an absolute url for the author cover rather than image nb all image meta tags should be conditional on whether the blog author tag has cover image if there isn one the `twitter card` value becomes just summary schema org json ld don believe any of these pages really fit into any particular schema so best to leave this out for now >>>themes
don use display none for hiding accessibility text display none hides content from everything including screen reader users for accessibility use the clip method described in this article https developer yahoo com blogs ydn clip hidden content better accessibility 53456 html here is the problem css hidden display none text indent 9999px visibility hidden >>>beginner css
whitespaces at the end of codeblocks it appears that if one uses three lots of the tack quote to enter code block and then copy the code from the rendered page many of the lines have trailing whitespaces this breaks the multiline command which is meant to be executed in bash however if you wrap the code with pre and code tags then it works fine but looks messy as you have to start and end the code on the same line have checked that the whitespaces appear in the html when one clicks view source which appears to be the issue in case it related am using customized vapor theme https github com programster vapor >>>bug editor in_progress
middleware corrupting favicon the middleware that serves the sitemap xml and favicon ico files is treating the favicon file as text instead of binary check needs to be added so that favicon ico isn processed like sitemap xml is >>>beginner bug server
ghost password forms do not play nice with password managers we have had number of reports of our password forms not working including signup setup and imagine the change password form as well see 3881 3978 4224 and 4618 use 1password which seems to work intermittently and we ve also had reports of it not working with the firefox built in password manager and passifox googling ember password manager shows couple of results which indicate this is likely something to do with ember suggested workarounds include having `name assword which we do and setting `autocomplete` which we don see http discuss emberjs com support browser autocomplete feature saved passwords 2322 this needs bit of investigation to see if it something we can fix easily across all password managers or if it is something to do with ember that is not easily fixed >>>bug ember fix_wanted
test coverage reports for while we had working working `grunt test coverage` task which produced nice test coverage report using blanket js think might have been the only person who used it and now it doesn work it makes it very hard to see where tests are missing which is shame because adding missing test is great way for new contributors to get stuck in all want for christmas is working test coverage santa don mind whether it uses blanket or another tool don mind whether it only works via grunt or whether it also wired up to travis would like it to work for as much of our test suite as possible don expect it to work for the casper tests but everything in `test unit `test integration `test functional module and `test functional routes uses mocha so should hopefully be ok `test client also uses ember mocha not sure if this can use the same coverage tool though it is also important that the wiring in the gruntfile is done so that the `grunt test coverage` command will execute on windows but requiring globally installed npm modules is ok mocha is required think >>>tests
tag management delete flow currently deleting tag is simple matter of hitting this huge button http puu sh druos png it very easy to do the delete tag mechanism should be small plain text link as per the original screenshot design http puu sh drurx png also clicking the link should cause modal similar to the ones we show for posts and users http puu sh druu4 png it might be good idea to add the number of posts the tag is linked to on this screen as has just been added for users 4583 but note that deleting the tag won delete the posts this is just an indicator of how many posts the tag will be detached from >>>ember
in multiple image url translated to in markdown which will be translated to >>>bug editor in_progress
creating new post with whitespace only title will not trigger auto save steps to reproduce click on new post to create new post enter title that is only one or more whitespace characters click onto the body of the post instead of the title being set to untitled and the post being auto saved the title placeholder remains and auto save never happens >>>bug editor
bug change password form doesn work for mu if you ve got blog with lots of users and you like to reset one of your users passwords you get presented with this form http puu sh dp8lt png which doesn work because you have no idea what the old password was this screen should only show and use the old password if you re changing the password on your own account if you re admining someone else account the field shouldn be shown and the check that it is valid should not be done >>>ember
regression active menu state on settings navigation image https cloud githubusercontent com assets 120485 5377084 a148a830 8086 11e4 9858 1e301d975610 png live in this should be white not brown brown is the hover state this is really really ugly nb afaik this is an ember bug not css bug the css is correct when you load the page but it fails when you change routes >>>blocker bug ember
pressing return in tag settings menu deletes the tag pressing the return button in the tag settings menu not the meta page deletes the tag issue summary when editing tag title pressed enter expecting it so save no the tag was deleted this is presumably because the delete button is the only button there technical details ghost version master latest commit 5d67f4a7b17c3ab0b06175b88e4017e68e72cc5b browser chrome 39>>>beginner bug
bug sitemaps handle drafts incorrectly sitemaps are displaying newly created draft posts it correctly excludes draft pages https github com tryghost ghost blob master core server data sitemap manager js l80 but not draft posts https github com tryghost ghost blob master core server data sitemap manager js l119>>>bug
bug sitemap sort order sitemap sort order is currently by last modified date from oldest to newest it should be exactly the other way around newest at the top oldest at the bottom example http john onolan org sitemap posts xml>>>beginner bug
ghost importer handle updating image paths in the data this is part of the epic 4605 in the case that both images and data are being imported at the same time we need to make sure that the paths to the images we end up importing correctly match up with what is in the posts this means for each post that gets imported we want to check the content of the post for matching filenames strip out any absolute path and update the relative path to include content images etc if it doesn already once 4608 is completed the importer should get bunch of data back from the image import to use to make these updates to the posts >>>importer
ghost importer find and copy any image files this is part of the epic 4605 once we have zip upload support in ghost issue 4607 it will be possible for users to attempt to upload all manner of files via the importer if the zip file contains images the image types accepted by ghost are defined in the config we should attempt to move these into ghost content images directory with some basic rules if the zip file contains folder structure we want to try to maintain it as much as possible if the zip file contains images in content images ore even just images we shouldn duplicate those folders inside of ghost content images directory but move the images into place if the zip file contains something like content images 2014 or content images photos we should create the `2014` or `photos` folder if it doesn already exist no file should be overwritten as part of the import if the file exists already we should use the standard de duplication mechanism appending numbers to the filename to create new file the image importer should keep track of all the directories it has normalised or created and all the files it has had to deduplicate and report this information back so that it can be used later on to update paths in posts >>>importer
ghost importer accept and handle zip files this is part of the epic 4605 the first step in the march towards an improved uploader with more options is making the importer accept zip file as well as json file if the zip file contains json file that file should be used to attempt the normal import process all other files can be ignored for now >>>importer
ghost importer image import and other improvements the ghost importer has languished for while only able to import data if it in ghost json format https github com tryghost ghost wiki import format this works really well for backing up and moving ghost blogs around official and unofficial tools have popped up to help convert other blog formats to ghost for wp tumblr and other platforms one thing ghost import export format is lacking is the ability to import images this feature has never been high priority because anyone self hosting can copy images into place and anyone on ghost pro can email support to have their images imported this is workable but it not ideal not least because it means anyone importing images from another platform has to manually ensure their image paths are updated before importing with the need to migrate roon users to ghost easily this feature has had major bump in priority at the same time as making import accept images we also want to improve the general importer code to reduce complexity and provide more feedback finally we want to open up the ghost importer to handle different format importing from md files the md file import may get moved to an app when the app platform launches but for the time being this will help many many roon and other platform users move to ghost tasks image import accept and handle zip files issue 4607 find and copy any image files issue 4608 handle updating image paths in the data issue 4609 other tasks remove versioning from importer like the exporter pr 4673 provide better feedback on imports issue tbr support importing posts from md files issue 4691 all the sub issues will be raised shortly>>>epic feature importer
discussion ghost file storage ghost on heroku there is very very old issue called more filestorage abstraction 2852 that details some changes we need to make to ghost to make the file storage layer more easily extensible 2852 has languished for while but is very important so this discussion is an attempt to come up with better spec for what we want to do break it down into smaller issues and hopefully get the work completed background on the types of file ghost stores currently there are types of files written by ghost images and data exports backups images are properly handled via the storage class https github com tryghost ghost tree master core server storage exports are not in the near future we also want to add api endpoints and uis to allow users to upload themes and apps and write those files through ghost as well the problem many paas style services like heroku don have local persistent storage they tend to completely overwrite the local install whenever new version of the app is deployed and so the database and files which change need to live elsewhere ghost happily supports configuring an external database via config js and we need to do the same or similar for file storage we want to make it possible to easily extend ghost to use 3rd party storage option storing images on aws so that it easy to install ghost on heroku or other paas there actually really nice write up http blog kida io ghost on heroku on how to do this which includes storage class for aws https github com kimar ghost aws s3 blob master s3 js but you still need to hack ghost to use it this should be possible without any need to hack ghost core the solution ghost has the concept of storage class so the hard part is essentially done what we need now is standardised place to put 3rd party storage classes and standardised way to configure ghost to use different storage class and provide necessary configuration additionally we need way to validate storage class and check that it works my proposal is as follows the standard place to put storage class should be content storage the standard way to configure ghost to use storage class should be via `storage` configuration object using content storage creates clear place in user content land where users can provide class to override the default this is better than just putting file in `core server storage` because it keeps the upgrade process far easier further if ghost detects file in `content storage` it could potentially use that to override the default without requiring configuration at the moment we have `filestorage` config flag that can turn storage off so that users aren prompted to upload files if they re using paas environment don really think anyone is using this though `storage` is also nicer name for the config object the new `storage` object could be used to provide all manner of details to both ghost and the storage class can imagine that in future we might want to provide configuration such that images are stored differently to themes apps this information would be needed by ghost and each storage class would need its individual configuration think that the configuration object inside of `storage` should be keyed on the name of the storage class so if you have content storage s3 js` your config object would be this line of `storage index js` https github com tryghost ghost blob master core server storage index js l21 could then be changed to always pass the object its own config if we want to require config to enable storage class rather than just defaulting to using whatever is in content storage as an override then something like and in future perhaps this is how imagine we can build system that is really useful right away and fully extensible in the near future it doesn require apps neatly side stepping any chicken and egg situations there it is super simple and think it works for lot of use cases other than heroku what like is some feedback on my proposal do you have better idea did miss something do you have use case that this will or won work for once the spec is tied down and accepted then will start raising smaller issues to hopefully get this work underway >>>media
feature post preview links this is partly follow on from discussion that was originally had on pr 4398 to start with the problem we want to solve there are two slightly different use cases here users commonly want to view version of their post that has their theme and all of their embeds enables so that they can see what the finished product is going to look like users commonly want to share post with few trusted people to get feedback before publishing my suggestion for how to solve both of these cases is to make draft posts visible on the frontend of the blog by accessing url something like preview uuid the uuid is 36 character random id which is globally unique and completely unguessable this url should only work whilst the post is draft once published this url should 301 to the proper url the preview route should add the private cache control header rule that we use for the admin and api so that this page is never ever cached as well this is the same as how previews work on many publishing platforms including https draftin com https exposure co and https roon io the main argument that has been raised against this is that if you or someone you share the preview with accidentally post the link somewhere public then anyone can see the post which may not be desirable believe that the kind of complex sharing system we need to build to combat this would be an enormous pre optimisation for limited edge case anyone who really doesn want the previews can turn them off by modifying their theme and eventually via apps however do suggest that we clearly mark previews as previews using something like ribbon red bar or red icon which warns the user they are reading preview >>>feature
allow multiple underscores inside code block if do this indside code block 95 95 95 95 the output is 95 95 95 95 95 95 95 95 might be related https github com tryghost ghost pull 1552>>>bug editor in_progress
bug sitemap image errors image https cloud githubusercontent com assets 120485 5321101 b7f5cba4 7cc0 11e4 838b 16d1dd6ac47a png google doesn like images without protocol not sure what the fix for this is should gravatar images even be picked up by the sitemap >>>bug
bug sitemap url in robots txt must be absolute sitemap url in robots txt is currently relative this is not valid example http blog ghost org robots txt should be validate against https support google com webmasters answer 6062598 hl en >>>bug
discussion sitemaps what should be included tags currently all tags that exist in blog are being shown in the sitemap does it make more sense to only show tags that are assigned to at least one published post thinking of the case where tag has been created for yet to be published post and the author may not want the tag name to be public information static pages should all static pages be included by default know we ve been telling people unofficially that static pages can be used as secret share link to preview feature now all static pages are part of the public sitemap authors like tags does it make sense to only show authors with at least one published post otherwise any and all users that have been created are going to show up in the sitemap last and very minor don think the index page should indicate that the sitemap has been generated by `https ghost org by default if we can get the `config url` into the xsl then there probably shouldn be link at all >>>fix_wanted
bug user menu appears behind cover photo http puu sh dgqqe png technical details ghost version master latest commit 658dea9e6be835e92437a3d1ecedca4713bb3464 >>>blocker bug
more explicit user deletion warning image https cloud githubusercontent com assets 120485 5301710 90eca15a 7be3 11e4 8f99 58668dde0e13 png this is not scary enough one of our users just deleted spare user on his blog not realising that it was the one which had all his content from an import associated with it there are lots of complex ways of handling this which we can look at later eg transferring posts to another user but for now this error message should simply be more explicit would like to change the copy to if user has posts should display how many posts they have else if user has posts also delete button should be on the right cancel on the left cancel delete `>>>beginner users
strip footnotes from excerpts fixes 4572 remove both inline and bottom footnotes from excerpt output before stripping the remaining html don output red errors for codemirror as codemirror gets confused by footnote syntax>>>blocker
code injection pr 3489 rebased and updated this is the code injection pr rebased on master and updated with the latest and greatest works for admins owners if `codeinjectionui true` is set in config js note this also comes with an update to the settings pane to ensure that the about labs and other navigation options are only available to users with the correct permissions >>>blocker
remove findall where findpage exists this is cleanup task following on from 4573 findpage supports `limit all` and therefore the findall methods can be removed from the models where findpage is present posts tags and users this will involve refactoring the delete all content https github com tryghost ghost blob master core server models index js l44 feature and anywhere else where those methods are being used >>>api data
adds markdown highlight support closes 4574 adds highlight showdown extension with tests here what roon does roon highlight http puu sh dfhgo png here what ghost does with this pr ghost highlight http puu sh dfhfv png >>>blocker
add highlight markdown support to ghost ghost has acquired roon io http blog ghost org roon blogging platform with very similar approach to ghost as part of the acquisition we re going to be making couple of feature additions to ghost so that roon users can migrate to ghost as smoothly as possible roon uses redcarpet https github com vmg redcarpet to convert markdown to html and as always with markdown this means there are few discrepancies roon supports using highlight to output highlight which highlights text you know like you used highligher http puu sh dfhgo png adding this will ensure that roon users don end up with unhappy all through their text >>>editor
add limit all consistently to users posts tags refs 623 4348 this fixes sitemaps to list all posts pages tags and users makes the api behave consistently across all paginated resources>>>blocker
remove console log refs 4270 stops all text that processed from being logged to the console >>>blocker
add xsl for sitemaps fixes 4555 there no easy way to declare an xsl with the node xml module so needed to move the declarations to both be strings ideally the code to serve the xsl would also be inside the sitemap module but think we need to refactor bit to get there easily added the xsl from 4559 with minor amends to make the tables and urls display correctly>>>blocker
post settings menu date doesn reset if you change the publish date of post in the psm it will stick as the custom date even on brand new posts until you refresh steps to reproduce create new post set the published date to be something different either save or leave unsaved doesn matter create new post open the psm notice the date is the date you set for the previous post technical details ghost version master latest commit >>>bug ember
post settings menu cmd ctrl doesn save date or slug there are still few bugs with the post settings menu saving with cmd ctrl this is because think the properties aren explicitly set in the editor controller save method believe it would be good to do something to make this behaviour require less manual wiring perhaps implement save method on the psm controller that gets called by the editor controller it might be good to abstract out the concept of scratch properties as well again to reduce the amount of manual wiring steps to reproduce open the psm change the date or slug but don focus out of the field press cmd ctrl reload the editor notice your changes are lost technical details ghost version master >>>bug ember fix_wanted
add sitemap xsl following on from the epic merge of 623 let add nice xsl stylesheet to make the sitemap pretty demo http marketplace ghost org sitemap xml note ve got the wiring done locally am just awaiting some style guidance from johnonolan >>>server
critical bug save is not reliable we re getting reports of content going missing even after manual saves and on posts that were seemingly published at this time there is no clear reproduction case all we know is the following is happening user opens editor and starts writing content something goes wrong posts appear to save but do not what we know is that there are code paths where save errors are not handled in terms of showing an error autosave is known to not show errors which needs revisiting and there may be other code paths save errors are likely not being handled correctly in relation to the beforeunload alert modal which warns users not to leave if their content isn saved we could recover more gracefully from failures try again it seems that there are code paths in which save can appear to work but not have manual save with green save notification >>>bug
new navigation helper this is part of the navigation epic 4535 image https cloud githubusercontent com assets 120485 5228785 917b5448 7717 11e4 9b1d 1e24a48e5729 png once we ve got data stored in the database for navigation items see 4539 we need to add new navigation for the content in the above screenshot this helper would output exactly current state if the current request url matches the url in nav item then nav output adds current class like this means that inside the helper we need to loop through the items from the database and check if any of them match the current request url if it does we should add new `current` property to that item in the list and pass this to the template handlebars template this should work like the pagination helper so the format can be overridden with `navigation hbs` partial the default to override being something like filter the navigation helper should pass the data through filter after it has been processed for the current state and before it gets passed to the template >>>themes
navigation menu drag drop this is part of the navigation epic 4535 and requires 4537 4539 image https cloud githubusercontent com assets 120485 5228785 917b5448 7717 11e4 9b1d 1e24a48e5729 png clicking on the drag handles should allow the user to use drag and drop to reorder the items in the list the items shouldn lose any data and the trash icons should work correctly after dragging the reordering doesn need to save until the save button is pressed notes on the interface cursor state for drag handles should be move there should be no other hover state for drag handles there should be no special highlight or state when nav item is being dragged grab handles and trash icons should have padding around them for increased hit area >>>beginner ember settings
manage the navigation menu setting data this is part of the navigation epic 4535 and requires 4537 image https cloud githubusercontent com assets 120485 5228785 917b5448 7717 11e4 9b1d 1e24a48e5729 png the list of navigation items should be stored as json object in the settings table this means creating new default setting https github com tryghost ghost blob master core server data default settings json called `navigation` with the type `blog` it should have one default item home pointing at the root url which will be stored as just on save the values from the interface should be serialized into json object and saved via the settings api the json object needs to contained ordered name and url pairs something like pressing the button should add another new row item pressing the save button should save all the rows which are not blank pressing the trash icon should remove the row item drag and drop reordering is dealt with in 4540 think the base url should be stripped from the start of each url when it is stored so that we only store relative paths and the navigation continues to function if the url changes if the url doesn start with the base url then we store and use the absolute url >>>data ember settings
new navigation menu interface this is part of the navigation epic 4535 image https cloud githubusercontent com assets 120485 5228785 917b5448 7717 11e4 9b1d 1e24a48e5729 png the navigation menu lives on its own settings screen under settings navigation it uses the compass icon added in 4536 to start with this ui should be built behind config flag the same as permalinks tag management etc the navigation ui should start out with one default entry home pointing at blog url and with one empty entry below it with placeholder text this will be loaded from the default setting notes on the interface ignore the application frame in the screenshot that just old mockup focus on settings pane content cursor state for drag handles should be move there should be no other hover state for drag handles there should be no special highlight or state when nav item is being dragged hover state for the trash icon should be red` add icon is the exact same one from the content screen grab handles and trash icons should have padding around them for increased hit area there will be no concept for this first version of nesting hierarchy >>>ember settings
feature navigation image https cloud githubusercontent com assets 120485 5228785 917b5448 7717 11e4 9b1d 1e24a48e5729 png the navigation ui provides simple user interface for creating list of links to output in your theme the interface allows for the clickable text and url for each link to be entered each item can be reordered using drag and drop edited removed and new items can be added to the end of the list in the theme api we get new navigation helper which works with default `navigation hbs` template much the same as the pagination helper sub issues create the new screen issue 4537 handle the data as setting issue 4539 drag and drop reordering issue 4540 base url preview issue 4807 helper output issue 4541 accessibility questions should we wrap with imo feels like clutter rather let the theme define the wrapping element should we put the aria role into the ul like to promote better accessibility standards by default is this valid use of the role attribute >>>css ember epic feature settings
ghost labs new settings page and no more ugly debug in order to do 4409 we need to get new labs page wired up this should be new sub screen in settings settings labs johnonolan or pauladamdavis needs to sort out an icon for this all of the things which are currently on debug should be moved onto the new labs page debug should redirect to settings labs there may well be some new design elements or headings for this page johnonolan to confirm it might be nice to have short what is this style blurb explaining that these are all experimental unfinished settings >>>beginner ember
regression ghost logo hoverstate in main nav this logo should not have bg colour when hovered this is regression menu bad https cloud githubusercontent com assets 120485 5226220 116564b4 76f5 11e4 90db 3c06332285b5 gif >>>bug css
api user read defaults to status active raising this issue as mentioned here https github com tryghost ghost pull 4440 issuecomment 63212635 to discuss whether the default behaviour of user read is correct it was changed from defaulting to all to active users only where an active user is user user with one of the statuses active warn warn warn warn locked as opposed to being invited or invited pending the change was made as result of issue 3542 and subsequently caused 3630 because we needed to add status all everywhere to get invited users there was discussion on irc which can be found here http 107 20 237 151 8081 logs 23ghost 20141113 pm60706 about whether this the correct default the general thought was that it fine for user browse to limit but if you make call to user read it ought to return the user if the id exists however although this does make it necessary to add status all` when fetching users believe the thinking behind it is that an invited user is not real user yet they don have name proper slug password or anything that makes them user they are just an email address in the system furthermore this behaviour mimics the post api where both browse and read default to returning only published posts therefore not fully convinced change is necessary but as it is impacting on the client side in unusual ways figure we ought to finish the discussion and decide what should be done about it >>>api users
api make it possible to get post count for each tag the one remaining server side feature we really need for tag management is the ability to get post count given the current structure of the api and the outcome of 4498 the idiomatic way to do this would be to implement includes for the tag api so api v0 tags include posts` this will include all the posts associated with tag and then we could count the number of objects in the array this ought to work for consistencies sake so needs to be added even if we don use it for getting the post count bonus points for if you come up with way to make our models always return their related objects when `include object name` is passed in to the api without having to hardcode it for each relation using this method to get post count is going to produce some additional load over what actually necessary so think we ought to think about approaching this in cleaner way current thought after the discussion in irc during and shortly after the 9th dec meeting https botbot me freenode ghost 2014 12 09 msg 27148344 page is to use include post count` as the query which creates dynamic `post count` property which is included in each tag in the response `tags id post count there are some hints on how to get counts here https github com tgriesser bookshelf issues 126>>>api
make the named frontend routes customisable in `core server routes frontend js` there are number of named routes which use english words including `tag` `author` and `page` these need to be abstracted out so that they can be customised for two reasons translations when we support i18n properly we ll want to allow users to translate those words flexibility if you re running music blog you might want the route to be genre rather than tag and perhaps you rather the route be by rather than author at the moment these routes are hardcoded strings https github com tryghost ghost blob master core server routes frontend js l40 repeated multiple times through the codebase and depended upon for creating logic https github com tryghost ghost blob master core server controllers frontend js l91 elsewhere in ghost this needs to be abstracted out into information that can be used to dynamically build the correct routes and assign the right context notes on refactoring at present there are effectively main contexts which have top level route and set of subroutes index lives at tag lives at tag tag slug author lives at author author slug all three of these have the following subroutes the first page of results page page num subsequent pages of results rss the first page of the rss feed rss page num the subsequent pages of the rss feed also note that at present feed is an alias of the base index rss route only when in fact `feed` should probably be an alias anywhere where `rss` is used and should always 301 can imagine apps reasonably wanting to specify other aliases for this fundamentally the main thing we need to achieve is making it possible to replace the words `tag` `author` and `page` with other words without things breaking the other information here is intended to paint bigger picture of what this refactor needs to move us towards >>>server
tag settings menu autosave note that there was some work done towards this in pr 4500 all of the fields in the tag settings menu tsm should autosave themselves in the same way as this works on the post settings menu http puu sh d43oe png when editing or creating tag save should be triggered on focus out from the text inputs but the model should only be saved if the value is not blank and has changed from it previous value saving should cause nprogress to fire the auto saving behaviour should still allow the values to get reset when moving between the tsm for different tags or new tag the save button can be removed >>>ember
save tag settings menu data on ctrl cmd we ve got ctrl cmd in lots of places now see 4369 or 4414 let add it to the tag settings menu as well even though we re going to make it auto save see 4500 for those of us who hit that shortcut instinctively it feels nice if it works consistently everywhere >>>beginner ember
typeerror cannot read property statuscode of undefined when migrations migrations creating owner typeerror cannot read property statuscode of undefined at request callback project ghost raw core server models user js 868 29 at self callback project ghost raw node modules request request js 372 at request eventemitter emit events js 95 17 at null ontimeout project ghost raw node modules request request js 913 12 at timer listontimeout as ontimeout timers js 110 15 error problem finding setting title error at error notfounderror project ghost raw core server errors not found er ror js 18 at project ghost raw core server api settings js 230 31 at trycatch1 project ghost raw node modules bluebird js main util js 45 21 at promise callhandler as callhandler project ghost raw node modules bluebird js main promise js 660 13 at promise settlepromisefromhandler as settlepromisefromhandler proj ect ghost raw node modules bluebird js main promise js 675 18 at promise settlepromiseat as settlepromiseat project ghost raw node modules bluebird js main promise js 845 14 at promise settlepromises as settlepromises project ghost raw node odules bluebird js main promise js 988 14 at promise rejectpromises as rejectpromises project ghost raw node odules bluebird js main promise js 981 10 at async consumefunctionbuffer as consumefunctionbuffer project ghos raw node modules bluebird js main async js 77 12 at async consumefunctionbuffer project ghost raw node modules bluebird main async js 40 14 typeerror cannot read property statuscode of undefined at request callback project ghost raw core server models user js 868 29 at self callback project ghost raw node modules request request js 372 at request eventemitter emit events js 95 17 at null ontimeout project ghost raw node modules request request js 913 12 at timer listontimeout as ontimeout timers js 110 15 >>>bug
tag management meta data screen the tag settings menu needs to allow for editing meta data for the tag screen http puu sh d12vc png this should be absolutely identical to the one on the post settings menu perhaps it can be split out into it own thing http puu sh d130l png the only difference here is that the url preview should include the tag part of the url please note that 4499 mentions separating out the url preview component out into it own customisable component as it lives in several places >>>ember
about page functional tests let add some functional tests to cover the about screen in the settings panel this screen outputs some dynamic data which changes over time but it would be nice to verify that each item has valid value the version number should be number the database should be one of sqlite3 mysql or postgres there should be 20 contributors and so on and so forth this just ensures that refactors don impact on that page rendering as it something we don tend to look at very often recommend that these are added to new `settings about test js` file or similar and not bundled in with the existing settings test >>>tests
tag management functional tests let add some functional tests to cover the new tag management screen to do this we ll need to add the `tagsui true` setting to `config example js` we should then add tests which verify as minimum the list on the tag settings page is output correctly the tag settings menu tsm opens and closes correctly values on the tsm are correctly saved and update the tag list recommend that these are added to new `settings tags test js` file or similar and not bundled in with the existing settings test >>>tests
tag management cover image upload one of the major features of the new tag management screen is the ability to make the tag archive pages look little bit nicer by adding cover image this should work exactly the same as the existing implementation on the post settings menu with the more recent improvements to make sure it resets properly http puu sh d10nd png this could potentially be split out into reusable component for the post and tag settings menu as well as any other similar menus we add in future the result of this issue should be working dropzone on the tag settings menu which stores the uploaded file path in the image property of the tag model and resets correctly it should automatically work with the image helper >>>ember
ux issue tag management list needs larger click area need to get johnonolan to confirm this but think that more of each tag item in the tag list needs to be clickable at the moment it just the tag name http puu sh d10fo png think this ought to be more like the user list where the whole item is highlighted and clickable http puu sh d10hb png >>>ember
bug settings menu doesn close on transition if you move away from the tag management screen without closing the tag settings menu tsm blank space is left behind screenshot http puu sh d10x1 png steps to reproduce make sure you have `tagsui true` in config js visit the settings tags page select tag to open the tsm hit the browser back button you should see slightly odd looking screen the menu space is left empty but it should have closed technical details ghost version master 09658f8377eb009632cec92376e2dc0625989be1 >>>beginner bug ember
tag management dynamic url preview this is sub issue of the tag management epic 4248 dev note to see the tag management ui you need to add `tagsui true` to your config js file the tag settings menu which has been added as part of this work has dynamic url preview in the description underneath the url field http puu sh czv1s png it lives inside beneath the field it shows the true blog url the tag prefix used for outputting tag archives and the tag slug it dynamically updates as the slug is changed in order to save some space the blog url should be shown without the schema as it is possible for the slug to be long the preview needs to handle wrapping nicely think there is some capacity to build this as reusable component there are similar things on the meta data screen and on the user profile we may wish to add it to the post settings menu and can imagine there being other uses in future the component needs to know about base url prefix path like tag or author and slug property that it is supposed to observe and dynamically update whether or not to show the schema could be an option >>>ember
discussion json api include many to many relation ids by default this is discussion split out from https github com tryghost ghost issues 4232 the json api http jsonapi org standard that we try to follow has lot of opinions about how to include linked objects in response the standard is still in development and keeps changing so we only use it as guide one of the things that we tried to do was to include the ids of all related objects by default and then expand linked objects out into the full object if the object is named as an `include` so for example the post object returns this by default but if you add include tags` the tags will be expanded out like there are couple of problems with this first the json api standard says these linked items should be inside links object like which doesn fit how we want to use the api with the ability to access easily guessable keys like `post author` or `post tags` we have to wrangle bookshelf to treat all foreign keys and other relations differently in order to achieve it and the only benefit would be following the standard secondly the requirement to always include the ids of many to many relations means at the moment in the post model telling bookshelf to do loads of extra joins just to pull out the id and ignore everything else further although we aimed to do this it has only been done for tags and fields on the post model and not implemented anywhere else because the implementation of this is manual there are loads of places where it is missing tags should return posts user should return ids of roles permissions and posts roles permissions should return users apps etc the list goes on so the question is does it really make sense to go back through the api and add this everywhere it is missing doing lots of additional queries we don really need when the only benefit is that one to many and many to many relations are consistent with each other as we are not actually matching the json api linked object standard anyway or does it make more sense to drop this feature temporarily from where it has been implemented for simplicity and efficiency the long term plan if we really wanted to add it back could be to build this as bookshelf plugin or similar the plugin would automatically pull just ids for all many to many relations from the join table rather than joining again to the other resource table and fetching all the data you can get the list of all ids for tags related posts from the `posts tags` table without having to also look at the tags table this would be more efficient and it would be fully automatic tl dr propose that many to many related resources are not included in the response for resource at all unless explicitly required by include >>>api
add dynamic titles across the admin ui it would be really nice if the admin panel had custom titles for each page rather than the plain old ghost admin that it been for ages the desired patterns for titles would be screen title blog title where `blog title` is the setting from `settings general` and `screen title` is the name of each screen as short as possible content editor settings users profile debug forgotten password and so on so on the ghost dev blog when on the editor see editor ghost development blog there are number of ways to do this one of which probably the official way is to use this bower module https github com paddle8 ember document title google also turns up number of other methods >>>ember
permalink validation this is mostly done already but there are few improvements updates needed in order to ensure that permalinks saved to the database are definitely valid validation of settings is handled by special validation function https github com tryghost ghost blob master core server data validation index js l85 which uses the configuration in default settings json https github com tryghost ghost blob master core server data default settings json l57 to know how to validate each individual setting as you can see here https github com tryghost ghost blob master core server data default settings json l57 there are already some validation rules for permalinks but they are not complete the full spec for what constitutes valid permalink can be found in https github com tryghost ghost issues 1631 most notably the author` url part is missing there no affordance for custom strings and there is no assurance that at least one of slug` or id` is present as well as updating the rules it would be great to see some tests added which verify that the validation is not permitting invalid permalink configs to be stored >>>api tests
clean up the html data attributes in default hbs `core server views default hbs` is the template for the basic html page that is served by ghost in order to render the admin panel it contains the minimum amount of stuff as ember controls building the page if you check out the tag you ll see it has number of data attributes https github com tryghost ghost blob master core server views default hbs l37 these should not be here we now have configuration api endpoint https github com tryghost ghost blob master core server api configuration js which is intended to serve this sort of data to the admin ui the current ghost config initializer https github com tryghost ghost blob master core client initializers ghost config js takes the information from the data attributes it needs to be rewritten to load the data from the configuration api endpoint similarly to the notifications intiializer https github com tryghost ghost blob master core client initializers notifications js we ll need new configuration model to make this possible the data attributes can then be removed from the tag and the helpers https github com tryghost ghost blob master core server helpers index js l53 which output the data can be removed along with their tests bonus the `bodyclass` helper doesn actually exist so believe that this can also be removed from the `class` attribute note this issue is marked as `beginner` as it is hopefully quite straightforward for someone with just little bit of ember knowledge >>>beginner ember
build the permalinks ui as an ember component this is split from the permalinks epic 1631 the custom permalink ui has been built out in html css with some mock js which you can find here https github com tryghost ghost blob master core client html permalinks html https cloud githubusercontent com assets 120485 2731445 bef43b3e c62c 11e3 979f 9afc39bfd3ff png please note as this is complex feature depending on couple of issues to wrap it up the ui should be added behind config flag something like `permalinksui true` how this ui should work taken from https github com tryghost ghost issues 1631 issuecomment 63340350 with certain keys such as comma final to be determined the current value of the input is taken and added to the permalink structure pressing backspace in an empty input deletes the last parameter gif are worth thousand words permalinks https cloud githubusercontent com assets 390392 5073973 2eab79d4 6e7e 11e4 9e2e 0a84be63338d gif in detail we need to be able to interact with this component in few different ways typing url valid chars and should result in them being added to the current url part typing terminator space comma tab or enter should result in the current url part being ended and new one begun please note this needs to be done in locale sensitive https github com tryghost ghost issues 4356 way typing special tag should allow users to enter an item of dynamic data such as slug` id` year` month` day` or author` what the special tags will be will it be y` or year` or something else is still to be tested out and decided so this ought to be easily configurable in the code pressing backspace should delete the entirety of the current url part as shown in the gif typing any other character not supported by the component should probably result in nothing happening the component should stop allowing input once url parts have been added see 1631 for full details of what is valid also the url in the component should be the blog real url>>>ember
transient failure with featured posts in casper tests ve now seen this one couple of times so figured raise it full log https gist github com erisds 1c75dc29ba00c8148e31>>>bug tests
database migration improvements this issue is placeholder epic and is in the process of being updated to include full details of all the changes and improvements we need to make to our database migration systems in order to make the process simpler one of the things that makes migrations really hard is the need to update the importer make migrations easier to do remove versioning from the importer implement permissions migrations issue 3910 add the missing column modifications to knex issue 6471 make migrations safer make it impossible to change the schema without doing version increment pr 4688 make it impossible to change the permissions without doing version increment pr 4688 >>>data epic
investigation image processing manipulation this issue replaces at least for now issues 1688 1734 and 4333 as the one true place to discuss all of our image processing needs in ghost and the possible solutions please note that this issue is not about storing or managing uploaded images only about processing them on the way to the server image processing features when it comes to uploading images in ghost there are few issues we need to be able to resolve cropping an image to square see 4333 for full details removing exif orientation data see 1688 for full details simple 90 rotations so that we get the right orientation of an image optimising an image for display resizing enormous digital camera photos to sensible file and display size see 1734 generating different sizes of an uploaded image for use in different situations see multiple image sizes multiple image sizes below for more detail multiple image sizes there are few ideas for ghost features that have been floating around forever that would require us to be able to generate multiple sizes of any one image serving different sized images to different devices so that blog is more optmised for mobile providing themes various image sizes to display in different places featured image might be small on the index and huge cover image on the post page which would be accessible by doing something like image size small allowing themes or apps to define the image sizes they use and ghost generating them any sort of image management app would need thumbnail the current state of image processing ghost doesn currently have any form of image processing built in because we haven yet found good solution for doing this pretty much all node libraries for image processing have imagemagick as dependency and that is not viable solution for ghost due it it being program that ridiculously hard to install this leaves us with few alternative options client do the processing on the client side purejs find pure js module for image processing compiler compile imagemagick using something like emscripten node pre gyp create or change an existing node module which wraps imagemagick to use `node pre gyp` which is the same thing we use to install sqlite3 api use 3rd party api for image processing other some other solution we haven thought of yet several of these solutions have been discussed or covered in the comments on 1688 and 1734 so they are worth read what we know so far client it may be possible to do simple cropping or resizing using the canvas element and or file api but this won work for any sort of regeneration of sizes so it won present full solution javascript load image mentioned here https github com tryghost ghost issues 1688 issuecomment 30852861 is probably worth looking into though purejs lwip https github com eyalar lwip is the only one knew of mentioned in 1734 but it turns out even that is actually largely written in is there really not single purejs one out there this needs investigating compilers there was quite an extensive discussion on modules that we could potentially compile into js and how on https github com tryghost ghost issues 1688 issuecomment 30776652 this is worth further investigation as we might be few small steps from solution here node pre gyp if we could identify one of the imagemagick wrapper projects which has the features we need and might be active and willing to accept pr this might be viable option node pre gyp has taken pretty much all of the pain out of sqlite3 installs still as this is nowhere near as important dependency as sqlite wonder if it will resolve the issue quite enough to be worth the problems some people will still have api there are few that have been mentioned although can find the references now worth investigating but this is likely to require keys and other complexities other anyone got any bright ideas in summary there quite bit of research and investigation to be done to come up with couple of potential solutions for image processing in ghost and weigh up their pros and cons don think there is going to be an obvious winner but we need to gather together clear picture of what available to us so we can make decision the key thing is that we only need crop rotate resize exif modification some optimisation tools we aren trying to detect faces or anything anyone and everyone is welcome to jump in on this with any solution they can come up with not looking for one person to do all the research but rather for people to volunteer their suggestions know know only haha >>>fix_wanted media
bug ghost admin focus changes from email to password on first load issue summary device iphone when you go to log into the admin when you first click on the email address field it will automatically switch you to the password field you end up typing your email into the password area steps to reproduce go to blog com ghost with your iphone click on the email address input form watch it change to the password field ghost focus change https cloud githubusercontent com assets 4715098 5035755 7005034e 6b2e 11e4 9d70 e2738ae86a4c gif technical details ghost version client os ios server os mac 10 10 browser safari database sqlite>>>bug
return computed `url` field with the post object this is split out from the much railroaded pr 4398 https github com tryghost ghost pull 4398 issuecomment 61773595 it is bit of magic bullet in that it should help to resolve 4322 3961 and 1756 as well as help us to deliver the planned post preview link https trello com xd58r4vt 62 post preview links and navigation menu https trello com xzsdna14 35 nav menus features although it has massive impact the scope of this issue is quite small rather than trying to generate the post url from the permalink setting whenever we need it in the frontend controller or in the admin client we should do this inside the model layer and return it as computed property along with the post object bookshelf provides us with mechanism to do this the `tojson` method in the post model which is already used to make sure we return an `author` property rather than `author id` the code for generating url from permalink should probably still live in `config url js` although the methods in url js may need to be changed around to make the right ones available to the post model as result of this issue the `urlfor` method should be updated to use the new `url` property rather than calling `urlpathforpost` but it is not expected that the property be used elsewhere or that any of the other issues be resolved this issue should require updates to our tests note slightly in two minds about whether this field ought to be called `url` or `permalink` leaning toward `url` because then it matches up with the `url` helper and we can reserve `permalink` for if we implement some other concept of `permalink` many platforms use url with an id and having something like that could help us to implement historical redirects when permalink structures change >>>api data
improve validation ux for the user website field the history of the `user website` field is little messy at various times it has been not validated at all validated strictly as url with protocol and now it bit confused http puu sh cpdkb png on the server side we validate `user website` using custom validator extension `isemptyorurl` which checks that it is either an empty string or valid url the protocol is not required see code https github com tryghost ghost blob master core server data validation index js l26 on the client side we strictly validate `user website` using the standard `isurl` but also requiring protocol of either `http or `https see code https github com tryghost ghost blob master core client validators user js l53 what we should be doing is validating that it is valid url without requiring protocol on both the server and client `validator isurl str require protocol false then on the server side when the data is saved if the protocol is missing from the url we should prefix the url with `http this ensures that when the url is output on the frontend it ll work as an external link as intended bookshelf allows us to modify properties on their way into the database using the `format` https github com tryghost ghost blob master core server models user js l89 method similarly to how we can modify properties on their way out using `tojson` the server side user model already has an example of using `tojson` https github com tryghost ghost blob master core server models user js l89 in order to delete the `password` field the fix for this issue should follow the same pattern extending the `format` method in the user model and updating the `website` attribute if necessary this issue is marked as beginner because it has very small scope although it touches both the client and server side the changes are only couple of lines >>>beginner users
query get helper one of the main new features we need to add to ghost is query helper for themes this is helper that gives theme developers access to the api to make custom queries for data they like to display this helper will only provide access to the `get` api endpoints that don require user authentication that is getting published posts and all tags with all the sorting and filtering options which are available propose that this helper be block helper called fetch after that there are number of ways we could specify the details of the api call we want to make just accept string parameter that contains the api call url fetch posts limit fetch posts 12 include tags take the resource as parameter and use named attributes for the query params fetch posts limit fetch posts id 12 include tags also have the resource be named attribute fetch resource posts limit fetch resource posts id 12 include tags some other format we need to find format that makes sense to theme developers using the api call url as string is very simple to implement but all the and and look quite complex even though urls are fairly well understood thing the second option is kind of inconsistent with itself but it looks nice it also similar to doing something like date published at format dd mm yy where there can be parameter and an attribute and just like the date helper defaults to published at the fetch helper can default to posts the third one makes everything consistent but as soon as you start using named parameters you need to do something like `id 12 or `slug welcome to ghost if you want to specify an id or slug etc to fetch specific resource thoughts on postcard please >>>themes
navbar user menu doesn close in safari the navbar user menu dropdown does not close when clicking an item inside to or clicking outside the publish button uses the same component but actions instead of link to` have added console log to the close function https github com tryghost ghost blob master core client components gh dropdown js l67 l69 and the close function does fire but doesn work safari navbar https cloud githubusercontent com assets 390392 4992034 287312e2 6993 11e4 834a 84a3fa908624 gif steps to reproduce log into ghost click the user menu button get angry technical details ghost version master latest commit 0b35df49e459b2acea501a5dd0d9661dfb7eb6ab client os mac os 10 10 browser safari desktop >>>bug
bug post cover image dropzone is not reset issue summary post cover dropzone is not reset cleared for new post steps to reproduce create new post open post setting menu and add image save draft publish or click off post settings menu click new post and click on post settings cover expected behaviour empty dropzone expect http puu sh cmey7 02ab35aee6 png actual behaviour dropzone with trash icon actual http puu sh cmeri 4d8ae67f96 png technical details ghost version master latest commit 0b35df49e459b2acea501a5dd0d9661dfb7eb6ab >>>bug
update visual style for content mgmt now that we have multi user we re missing some vital contextual information in the post list the author this issue is to update the content management list visual styles add author profile picture nb it would be useful to have 4333 done first sexy detail when hovering the user picture fade out the post status and fade in the the user name revert again on mouseout move featured post star to an absolute position over in the bottom right corner rather than bottom left image https cloud githubusercontent com assets 120485 4979396 c88f8690 68f6 11e4 88b7 b65a75a2f422 png >>>css
don output meta tags with blank content if user doesn enter anything for their post meta description the meta description tag is still output but with an empty content like if the content is empty the tag should never be output in the first place ref this comment https github com tryghost ghost issues 4413 issuecomment 62363069 >>>bug
bug editor transitions on reload for authors this is minor issue and ve not checked if it also happens for editors but if you re on post on the editor and you reload the page if you re developing and have livereload on the editor transitions back to the content screen steps to reproduce log in as an author load post on the editor and make sure it is saved reload the page find yourself on the content screen technical details ghost version 3>>>beginner bug
add save shortcut to settings screens on post `ctrl cmd s` saves the post don see any reason why the same shouldn be the case for the various settings screens save `settings user xx` user screen with ctrl cmd save `settings general` screen see the `core client utils editor shortcuts` for an example of how to make an os specific shortcuts hash and `core client routes posts js` shortcuts actions hashes for an example of how this should be implemented in the two settings routes >>>beginner ember
bug editors can see self in user list issue summary my editor user can see anyone in in his users group including himself repro steps invite an editor log in as the editor and go to settings users what the owner account sees screen shot 2014 11 07 at 08 37 05 https cloud githubusercontent com assets 1207005 4955275 20107f7e 6694 11e4 8ed7 86f07bb94da1 png what the editor account sees screen shot 2014 11 07 at 08 36 59 https cloud githubusercontent com assets 1207005 4955278 26936d2a 6694 11e4 8359 bfa840a65cfc png >>>beginner bug
changing user slug seems to change all the user slugs when you edit user slug and then go to edit another user slug the second user slug appears to be set to the value that you changed the first user slug to don believe it actually changes the slug in the database think it just showing the wrong pre filled value ve not tested this with more than two users but don see why two users with different roles would be related like this so my guess is that it would effect all the other users happy to test this further if you like me to steps to reproduce have at least two active users in my case was logged in as the owner administrator and had second user setup as an editor edit either user slug save and go back click onto the other user the other user slug is pre filled with the value you just changed the first user slug to if you have any trouble reproducing this let me know and ll provide more information technical details ghost version client os mac os 10 10 server os ghost org node version no idea it ghost org site browser chrome 40 2209 dev 64 bit safari database mysql>>>bug
ghost labs checkboxes to override config flags we re starting to develop certain features behind config flags like tags and perhaps soon oauth public api custom permalinks code injection apps and maybe even search or i18n as we roll these out people are going to want to play with them and we want people playing with these new features in advance finding bugs discovering usability issues etc so how about as well as having config flag we make ghost labs page that provides the ability to turn on these options the ghost labs page would be hidden page lot like our ugly debug tools that would simply live at settings labs with no internal link we can add labs setting to the settings db that stores json object with boolean value for each feature we add to the page and whether it on or off which overrides the config value this might be teeny bit fiddly to implement but think it could be lot of fun and great way to get more feedback on features whilst they are in development it would give us space to try things out that we aren sure about or provide different potential solutions and experiment little bit with what works best in practice >>>settings
remove images from meta description preview html from images is currently making its way into the seo meta description preview images should be ignored completely in meta description preview image https cloud githubusercontent com assets 120485 4936480 e0a3d154 65b9 11e4 8ac9 ddc2dfc66b02 png >>>bug
autosave causing the do you want to leave nag on new posts this has been reported as happening in mac os chrome via twitter https twitter com webalys status 529882514760818688 have not been able to reproduce it but my mac is not yet on yosemite user has confirmed it only happening on new posts it not yet clear whether the alert is the browser one http puu sh ce2d5 png or our modal http puu sh ce2ah png but guess the browser one on slight tangent but possibly related if it is the browser one ve seen reports of it firing when focusing from the title to the main editor on some more obscure browsers which makes sense but shouldn be happening and in ie ve repeatedly seen the message which is supposed to display appear as null having worked with `window onbeforeunload` before seem to remember it works slightly differently in different browsers and is quite sensitive to subtle things like whether the return value is empty `null` or `undefined` steps to reproduce open post enter text in the title enter text in the body wait for autosave technical details browser chrome does not happen on ff os mac osx possibly related https code google com chromium issues detail id 341476 >>>blocker bug
incorrect menu transition on publish button correct fast fade in out menu good https cloud githubusercontent com assets 120485 4899952 5c85aecc 6421 11e4 88d9 c811511da84c gif broken slow fade in out menu bad https cloud githubusercontent com assets 120485 4899958 6584d674 6421 11e4 973a 1843eb3e57ba gif >>>bug css
implement authenticated access for public clients authorization code grant this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for in order to allow installed and web applications to execute authenticated request against the ghost api we need to implement the `authorization code grant` rfc 6749 flow the application initiates the authentication process by redirecting the browser to the ghost authentication endpoint using the following request `response type` code `client id` client id generated by ghost `state` random value to prevent csrf `redirect uri` redirect uri must exactly match one of the values listed for this client `scope` tbd ghost verifies the validity of `client id` and `redirect uri` user authenticates with username and password ghost redirects the user back to the client success redirect error redirect the client needs to ensure that the `state` parameter is the equal the one sent to the server the client application now issues another request to get valid access token from the temporary access code `grant type` authorization code `code` code received from the authorization process `redirect uri` redirect uri must exactly match one of the values listed for this client `client id` client id generated by ghost `client secret` client secret generated by ghost if the access token request is valid and authorized the server issues an access and refresh token to allow the client authorized access to the api the client can now access the ghost api using the access token an example on how to implement the implicit code grant flow can be found at https github com jaredhanson oauth2orize >>>api oauth
clicking meta data adds hash to the url issue summary clicking on the meta data button on the post settings menu appends hash to the url so that editor becomes editor this is ugly and sad we do our best to never have appear in the url it would seem we left behind an `href somewhere though reproduction steps edit post click the cog open the psm click on meta data specs chrome 38 macosx10 latest master 8d96cb2f6793d231f805e2ed5fb328cdde8be91f>>>beginner
bug error without message could make new error file core server errors index js https github com tryghost ghost blob master core server errors index js line 110 if `err` is like this code 401 error expired token >>>bug
notifications disappear behind header navbar issue summary on landscaped short screen notifications will go behind the navbar notification index https cloud githubusercontent com assets 1207005 4876271 8b4ee724 62bd 11e4 8ea5 d0dd6343180a gif specs chrome 38 latest master mac osx yosemite desired ux see this comment https github com tryghost ghost issues 4379 issuecomment 61418002 pending pauladamdavis consent>>>beginner css
bug tags are suffixing rather than using the original ve seen this happen twice now and will try to come up with reliable repro steps have tag on my blog sinks canyon http blog novaugust net tag sinks canyon was surprised when one of my latest posts about the canyon wasn in that list but when looked at my post it does have the tag however its tag was given the slug `sinks canyon 2` so it kind of orphaned itself blog novaugust net tag sinks canyon even though it the same tag it created new tag when it should have just recognized that was using the same tag at guess this may be because manually typed out the tag rather than using the tag suggestion tool update fixed my blog tags not thinking about the fact that linked it from this issue `sinks canyon 2` doesn have any posts anymore but it looks like hw is right about there being trimming issue>>>bug
hitting cmd on the meta tab clears the data this might well be related to 4366 something seems to be bit wonky with keeping the data correctly in sync on save of the meta tab if you hit `ctrl cmd s` after filling out the meta title and description the post is saved but the fields are wiped clean steps to reproduce create new post go to the meta tab in the post settings menu psm fill out the fields press `ctrl cmd s` without closing the psm see that the fields are now blank technical details ghost version master 3>>>bug editor
drop codemirror from the editor with reference to the split screen editor epic 1294 https github com tryghost ghost issues 1294 the ghost editor undeniably needs some heart no matter how you consider what the editor might look like in the future there is one underlying problem to ship improvements like spellcheck we need to build completely custom editor that an enormous undertaking and it would detract from all the other features we want to ship that is unless we drop formatting syntax highlighting from the left side of the editor boom yep talking about dropping codemirror in favour of plain textarea codemirror currently has two main jobs it formats syntax highlights the markdown and provides an api for interacting with the entered text however what it does under the bonnet is generate completely custom representation of the document which is neither markdown or html this breaks the browser spellcheck https github com tryghost ghost issues 1240 doesn work reliably on mobile touch https github com tryghost ghost issues 960 which meant we had to remove it from mobile touch devices and the way it interprets markdown is quite different to our html conversion which causes weird https github com tryghost ghost issues 959 bugs https github com tryghost ghost issues 1909 and adds complexity if we strip out codemirror we will lose formatting but what we get instead will be an editor with working spellcheck working mobile uploads and significantly reduced complexity because we only have two document representations markdown and html and we are in control of them both this means we can focus on making the conversion between them better adding advanced markdown features in the future we ll be able to bring back formatting if we want it using contenteditable but in the meantime we can more easily focus on the features we want to bring to the editor the markdown we want to support and creating our own way of modelling documents because the editor is so significantly less complicated ve been working on prototype testing out how to interact with selections in the textarea to make sure that image uploads will still work on all devices etc and to me this feels like taking back control and really ridiculously excited about it >>>editor
post settings meta fields too long errors don go away if you run into the top limits on the meta title and description fields 150 and 200 fix the problem and try to save again the error message still shows original report https ghost org forum bugs suggestions 16907 old meta data won clear after error steps to reproduce create new post fill out meta description to more than 200 chars close psm save reopen psm fix meta description to 200 chars close psm save see there still an error but it did actually save think technical details ghost version master 3>>>beginner bug editor
auto indent of partials causes problems with rendering code blocks in blog posts there is an ongoing discussion about this on the handlebars repo https github com wycats handlebars js issues 858 issuecomment 61109359 it was originally discovered as sort of bug in ghost via weird issue on the forum https ghost org forum using ghost 16929 indentations syntax highlightling and applies to themes which use partial to output content https github com haydenbleasel ghost themes blob phantom post hbs l15 raising it here as way to keep track of it essentially in handlebars any partial which is indented is now rendered with that indent applied to the beginning of every line output by the partial so if have partial like and output it in my `post hbs` like then every line of the partial including every line output by content will have spaces applied at the beginning just like the my partial line has this sort of makes sense it makes for nicely aligned source code but it also fudges with anything in the partial which is whitespace sensitive like or essentially if you have nicely formatted code block in your blog content when it gets rendered to the page all the lines of code will weirdly have extra spaces at the start the solution is simple enough don use partial or don indent your partial but this behaviour is very hard to predict in my opinion the discussion on the handlebars repo https github com wycats handlebars js issues 858 issuecomment 61109359 might lead to compiler flag we can use to disable this alternatively we could downgrade back to handlebars for rendering themes if we do neither of these then we have to be very careful to document this behaviour >>>bug themes
encode helper is broken in many fabulous ways hey just working on an issue https github com haydenbleasel ghost themes issues 13 for one of my themes where can use the encode helper on the homepage basically ve made the sharing links twitter facebook etc similar to the one in casper partial so it can be included on any page but encode title or encode meta title both return 5bobject 20object 5d` on the homepage looked through the ghost docs and there wasn any sign of post template only restriction so opening it up as bug here >>>themes
debug page doesn redirect unauthorized users issue summary when an unauthorized request is made to route that requires authentication the user is suppose to be redirected to ghost signin but if you go to ghost debug you will instead get 401 error screen and nothing more repro steps log out navigate to ghost debug specs chrome 38 osx 10 latest master f7d9769bffe0ec059b7e47c989876174251597a9>>>bug ember
comma for starting new tag in other languages have found that if tag have in word it starts new tag ve found that it is because russian is placed on keybord where englisch placed seems that it hardcoded for english language can your please help to find in which place it is that can fix it at least for my installations >>>beginner bug i18n
make settings user adapter hit api users slug to fetch user from `core client routes settings users user js` and actually if you have large number of users and haven loaded all of them when you go to users user default pagination 15 means that this perhaps won find the user is this bug waiting to happen >>>ember
tiny visual issue with editor floating headers on scroll this is so subtle could even be imagining it when scrolling in the editor in can see tiny vertical shadows in the floating headers http puu sh cri2d png sure they weren there before >>>bug css
add library to crop profile images when uploaded profile images need to be square for consistency in output in order to achieve this we should do what pretty much every site does and provide small crop tool after the image has uploaded see gravatar or twitter if you want an example believe there common js library for this >>>bug media
an escape is needed for meta description if the post does not have meta description but has double quotation mark in first 40 words of this post then the html meta tag will be broken we can find that this happened in ghost head js file line 54 56 metadescription has been assigned safestring value which will not be escaped by handlebars line 114 129 blog title has been escaped but metadescription not and finally been used in html string concatenation line 140 144 we can find lots of html string concatenations in the code which will cause xss if we use it careless maybe full scan to the code is needed since the ghost is not personal blog but blog platform now >>>bug
permalink unit tests and frontend route improvements having looked around our current permalink implementation believe there are number of small issues with the handling in the frontend single https github com tryghost ghost blob 4067bfe4c15ace3e6d8bc074c98ed1be5437eb90 core server controllers frontend js l296 controller that will result in bugs once we add 1631 ve added the `beginner` label to this because believe that this issue should be good fit for someone who is comfortable with server side js unit testing but is brand new to ghost codebase essentially the problem is that the frontend single route is wildcard https github com tryghost ghost blob 4067bfe4c15ace3e6d8bc074c98ed1be5437eb90 core server routes frontend js l54 but post must only ever be served from single valid permalink the structure of the permalink is set in the database and valid structures are defined in 1631 the frontend controller needs to take the permalink setting the url from which it is being called and validate that all parts of the url strictly match are valid according to the permalink at the moment there is validation for the date and after 3858 is completed there should also be validation for the author but this needs to be refactored and added to to validate that all items in the url are complete and correct take for example the slightly weird but perfectly valid permalink structure of blog slug author year id the frontend controller should split the provided url into parts and then look up post which matches both the provided `slug` and `id` check that the first part string `blog` is exactly blog check that the third part matches the slug of the post author check that the fouth part matches the year in the post `published at` field if any of these steps fail 404 should be returned the point of this issue is to refactor this validation step so that the code is clear and easily readable to add validation so that string sections are definitely checked and to add thorough unit tests for the code it probably makes sense to do the lookup in the `frontend single` controller but split the checks out into new method in `server config url js` which verifies that given url is valid url for given post so very similar to the `urlpathforpost` https github com tryghost ghost blob 4067bfe4c15ace3e6d8bc074c98ed1be5437eb90 core server config url js l58 function `checkurlpathforpost` would also take the post data and the url provided and return whether or not it is valid this would drastically improve the code quality in `server controllers frontend js` https codeclimate com repos 53abbc5e695680579600cbb2 core server controllers frontend js >>>beginner bug tests
autosave is overly ambitious issue summary if open new post and click in the editor find myself with new post with the title untitled why save post that doesn have any content in it now cleaning out extra untitled drafts whenever decide not going to write post after all repro steps new post sit for few seconds click in the editor you ve just saved your post specs ghost ghost pro chrome 38>>>ember
theme feature detection the ghost theme api moves pretty fast pretty much every release includes some sort of change and we need way to make it clearer what version of ghost theme will work with rather than using version number and depending on theme developers to provide an accurate ghost version number which their theme works with let do this in really smart way and actually detect which features ghost theme is or isn using some features being missing constitutes an outright error like no asset helper some might represent warning use of the deprecated features and some might be positive like themes already supporting image therefore think we can do something really interesting with simple set of tools to detect use of helpers and other things set of rules and converting the information into standardised output that we can generate and display for any theme the idea here is to do this as an independent npm module which can be dependency in ghost used to check theme when it is activated but also offered as web ui where theme developers can check their theme bit like http package json validator com and then it can also be included in or used by other sites and projects my goal here is to make information about theme features compatibility and quality far more transparent so that we can give our users far better experience when using 3rd party themes ve been working on this just little bit and once ve finished laying the groundwork ll link this to the repo and start opening issues there to improve it so people can get stuck in improving it if they re interested features to be detected details coming soon >>>themes
crazy failing test we have very very weird failing test it passed fine on my pr 4307 and works locally but on travis no amount of restarting is stopping it from failing and it only happening on sqlite3 can figure out how autosave could be interfering with this even though it would be triggered by createtestpost it shouldn come into play again after that any one got any ideas like at all pass post can be changed to static page tests type assertdoesntexist file home travis build erisds ghost core test functional client psm test js 149 code test assertdoesntexist post setting static page checked can turn off static page subject false selector post setting static page checked full output https gist github com erisds d5aa0b1a19a52004c1c0>>>blocker tests
set link prev next tag to https if urlssl is set the tag for next previous in the head doesn update when the normal url and the urlssl change this fixes that bug fixes 4266>>>blocker
cut off post meta title when it too long the whole point of the search engine result preview is to show when where content will be cut off image https cloud githubusercontent com assets 120485 4680257 a362876e 5609 11e4 8eb5 5c1765e1d697 png if title is longer than 70 characters then the the preview should show the first 70 characters of the title followed by >>>bug
show all invited users and infinite scroll active closes 4239>>>blocker
adds twitter cards to ghost head issue 3900 adds twitter cards to ghost head helper updates test to check for twitter card data updates privacy md fixes issue with image urls that are linked by url rather than uploaded>>>blocker
stable branch shows blank admin page summary stable is not stable anymore admin page is blank with nothing on the screen steps to reproduce clean clone of ghost checkout stable npm install grunt init npm start go to ghost setup first informations submit observed result when it done you have nothing of the admin page it juste the background and you got an error in the console `brace expanded properties cannot contain spaces user firstname lastname should be user firstname lastname expected result admin page displayed entirely and correctly additional information ghost version stable last commit 1a303b0328df553f06d638d4a58ac417bb4b2118 server os osx 10 node 10 32 >>>bug
travis timeouts during integration tests we did have lovely period where the tests behaved themselves unfortunately that is no longer the case and the integration tests are regularly timing out seems to be getting worse these are definitely random failures but think it likely caused by code change it definitely driving us all potty an example from https travis ci org tryghost ghost jobs 37595786 another example from https travis ci org tryghost ghost jobs 37810065 >>>tests
enables ssl in the link tag for the prev and next page fixes 4266 enables ssl in the prev next links in the head tested on vagrant machine screen shot 2014 10 13 at 15 07 57 https cloud githubusercontent com assets 2955483 4614686 af1194b2 52e2 11e4 9b56 b53f89e3658a png screen shot 2014 10 13 at 15 07 21 https cloud githubusercontent com assets 2955483 4614687 af12940c 52e2 11e4 86d7 949784b61d57 png >>>blocker
next and prev rel links in head should detect https have added ssl certificate to my ghost blog and noticed that the next and prev rel links in head won use https for links but every other link does you can check it live on https www peleke de vs http www peleke de ghost see bug 685 >>>beginner blocker bug
api full bread tag endpoints this is part of the 4248 tag management epic in order for folks to manage their tags we need to extend the tag api from only supporting browse to supporting browse read edit add and destroy these endpoints should be very similar to posts for now and provide the basic operations according to user permissions the permissions for these already exist in the system bonus points for paginating the `get tags endpoint with `limit all` for fetching all of them >>>api fix_wanted
api next and previous post many moons ago 529 was raised to describe future in which theme developers were able to access information about the next and previous post according to the chronological order which posts are published on the blog back then bookshelf didn support subqueries we didn have clear plan for the api and we didn have any idea about having query helper all of these things combined to make this issue quite tricky to solve the solution that was put forward was an always on addition to the api which meant making extra queries for every post page this seemed like unnecessary overhead for the `get posts request for feature that wouldn be used by everyone not having performance tests made it riskier now that we have clearer idea of what our api is supposed to look like in short json api but with inline objects rather than `linked` it is much easier to design clean solutions to problems like this one the proposal for adding next previous support to the api is to update the posts endpoint to accept `next` and `previous` as `includes` get posts include next previous` it should be possible to add one or both of these options and get the corresponding post returned in the response in the following format implementing this at the model level is going to require some fancy bookshelf ery may be worth using the subquery support here performance testing would be very much appreciated notes `next` is the post published after the current post so should be more recent `previous` is the post published before if the `next` or `previous` posts are requested but don exist because we are at one end of the list or another the key should be included but the body should be null to make the api consistent we should always return `next` and `previous` keys with the id of the post such that adding them to `include` causes the whole object to be included rather than the keys to magically appear this definitely needs perf tests and will likely be separate issue this is just an api addition and won make this feature available to themes>>>api fix_wanted
create tags management stubs for ember this is part of the 4248 epic to get things started on the client side the html added in 4171 should be moved into ember this has three bits new settings subroute tags settings tags` make new tags route inside of the settings routes add the route to `router js` link the route from the settings hbs template new settings view tags follow the pattern of extending the base settings view https github com tryghost ghost blob master core client views settings users js to keep mobile compatibility pull the correct markup out of the static html page and put it in settings tags handlebars template no functionality for the tab management page needs to be implemented at this point we just want to be able to get to the page >>>beginner ember
auto save draft posts issue 1413 if the user stops typing for seconds typingpause action is sent from the ghcodemirrorcomponent editor base controller ties the typingpause action to its autosave if post is being autosaved and does not have title the title is set to untitled the title being written over like that feels bit odd what if the title was set to your post title so that the user can see ah it just defaulted to what was in the placeholder there also personally like having nprogress fire on save but it could be that no one else will realize what just happened whereas here am literally counting down the seconds to it >>>blocker
editor keyboard shortcuts are not scoped to the editor in the editor we have all manner of shortcuts like `ctrl cmd b` which add formatting to posts we also have more general shortcuts like `ctrl cmd s` for save save should work no matter where you re focused in the editor but the formatting shortcuts should only ever fire when the cursor focus is in the editor at the moment if you use the more common shortcuts like bold the effect they have is only visible if focus is in the editor however if you use the ctrl cmd shift shortcut which opens modal with the html for the selected text you ll see that it fires no matter where you are focused but has no content put the cursor in the title this is indicative of the fact that all of the editor formatting shortcuts are firing but not working no matter where focus is this isn major problem but it should be really easy to fix so that the code doesn execute if the focus is not in the editor textarea >>>beginner bug
bug save draft error an error seems to have popped up but very rarely which will make debugging difficult when saving draft and then clicking on content button an error message pops up as per screenshot error http puu sh c4jl4 76da373256 jpg is this possibly an ember related issue >>>bug
feature tag management here the original ui issue 3926 and the markup was added in 4171 the big picture vision for tags is written up in the tag 101 https github com tryghost ghost wiki tags 101 document on the wiki which covers tonnes of advanced features in order to ship tag management we need to deliver minimum working version here what we think it should look like screenshot of simple tag list http puu sh czyoy png this list shows each tag in list the list needs to have infinite scroll applied to it much the same as the users or posts list the number on the right is the number of posts that the tag is associated with clicking on any one of the tags in the list will open up the tag settings menu or tsm screenshot of edit screen http puu sh czaa0 png this allows for editing the tag name slug description and post cover image there is also meta data screen the same as in the post settings menu editing the slug updates live url preview this screen should only appear for users with the role editor or higher development how to the tags ui is hidden behind feature flag to see use and develop with the tags settings you must set `tagsui true` in the `development` object of your `config js` server side tag api full bread baby currently only browse is implemented 4263 output number of posts associated with tag issue 4521 ensure api permissions are correct client side add new page to settings 4260 bread wip pr 4489 add infinite scroll done in pr 4489 add autosave and remove save button issue 4517 add the cover image issue 4506 add number of posts issue 4683 requires 4521 permissions only editors and up add meta data screen issue 4509 fixup the delete flow issue 4633 dynamic url preview issue 4499 dry up the code issue 4642 themes use tag meta data on tag archive pages issue 4677 make sure image helper works for tags issue 4506 bugs improvements bug settings menu doesn close on transition bug ember issue 4504 ux issue tag management list needs larger click area ember issue 4505 tag management functional tests issue 4507 enforcing uniqueness of tag names issue 4687 see tag 101 https github com tryghost ghost wiki tags 101 for description of advanced features we ll be adding later like hierarchy visibility and search >>>ember epic feature fix_wanted
change keyboard shortcut context when opening modal issue summary you can use cmd backspace to delete selected post from the content page this brings up the are you sure modal where you can hit delete to kill your post for good because used keyboard shortcut to enter the modal expect them to keep working and hit enter sadly rather than confirming the delete ve moved the background from xx` to editor xx` with no effect on my modal repro steps go to the content page in admin use the keyboard shortcut to delete post cmd backspace hit enter you didn delete your post you went into the editor problem guidance goal add enter key to confirm modal without conflicting with route shortcuts we use keymaster https github com madrobby keymaster for our keyboard shortcuts which are implemented in mixin for routes https github com tryghost ghost blob master core client mixins shortcuts route js keymaster has feature that allows scope switching which believe is the solution here keymaster scope https github com madrobby keymaster scopes perhaps what we need to do is update the shortcuts mixin to provide default scope and have the modal set the scope to modal when it opens and then back to default when it closes >>>ember
regression login form styles image https cloud githubusercontent com assets 120485 4543590 9a8f7104 4e2c 11e4 8654 15a4a9ca38b9 png this is quite broken vs styles font size on the text inputs used to be smaller 4rem believe email wrap used to have border radius 2px 2px pass wrap used to have border radius 2px 2px >>>css
prep tests in prep for node v12 node v12 has been on the horizon for while and looming closer and there has been much talk of getting ghost ready for it so let do it ghost node version support is loosely tied to that of node sqlite3 https github com mapbox node sqlite3 blob master package json and they have had support for node 11 13 for some time suggest that we add tests for the most recent version of v11 11 14 test out some of the more complex features that aren yet covered by our tests and if everything is ok add 11 14 to the supported engines in the `package json` file know that jaswilli has done some of this already so will let him call first dibs wink >>>tests
settings users page doesn show all users at one point the active invited users list in settings users was set up to do infinite scroll but think it got lost in gui2 currently it will show either all the users which have already been loaded into the store or up to 20 users via the api call it makes since the user list is split up into two sections invited and active not sure that infinite scroll makes sense as it results in behavior like active users showing up and then on scroll the invited section will all of sudden appear so the question is bring back rework infinite scroll behavior or tear it out and just display all users right away >>>blocker bug design ember
case sensitivity for email addresses in user operations there are at least couple issues right now relating to user email addresses and case sensitivity an invitation to an email address with at least one uppercase letter will result in an invitation that will not be allowed to create new user account logging in with an email address is treated in case insensitive manner which is good but password reset requests require the user to know the case of all the letters in their email address as it exists in the database the api methods need to be adjusted to not lowercase email addresses and or use `getbyemail` to query for the correct email address >>>bug
error deleting content when number of posts 999 and database is sqlite3 sqlite3 has limit of 999 bound parameters so if collection of models is greater than 999 and eager fetching of relations is attempted `withrelated` the query will fail screen shot 2014 10 02 at 54 09 pm https cloud githubusercontent com assets 214142 4498642 1e8804b4 4a7a 11e4 8de3 469eb86b9f66 png what probably needs to happen is `findall` in `core server models posts js` needs to be adjusted to not eagerly fetch relations by default but instead just take `options include` and assign it to `options withrelated` >>>beginner bug server
create theme image helpers with absolute attributes currently we use handlebars to output raw data from image author image these output relative url paths to the image files it would be helpful if these were turned into helpers supporting an absolute value eg image absolute true author image absolute true with output including blog url` prepended to the image path primary use case for valid output in meta tags eg in 3900 >>>themes
various broken theme behavior when using symlinks assuming identical content of casper mod and casper mod in the following directory structure if casper mod is symlinked folder the tag view tag hbs will not be read specifically themepaths hasownproperty tag hbs doesn return as expected and you get index hbs instead similarly any specialized page views aren read you get the default view the name doesn show up properly when switching themes in settings suspect all the above are related to the way symlinks are read or handled though >>>bug server
bug authors should not be able to change post author issue summary user with the role author should not be able to change the post author steps to reproduce invite new author with the author role sign up as that user create post and enter title open psm and change the author of the post saving will succeed but result in an error author foo https cloud githubusercontent com assets 176576 4432412 853d0646 4692 11e4 8831 7b4b7e867ea1 gif technical details ghost version master node version v0 10 32 browser chrome latest database sqlite3>>>beginner bug ember
bug editor nav item is broken when editing unsaved draft small thing but expect the editor nav item to still work when editing an unsaved draft it should give me the same modal and then reload the editor navbug https cloud githubusercontent com assets 120485 4430736 29d37dda 4642 11e4 81ab e32a535516f0 gif >>>bug
bug non square images don fill the circle in the user list to fix an issue in firefox where user images did not correctly fill the circular container in the users list made it `background size 105 this needs to back to `background size cover and double checked to make sure it looks correct everywhere pasted image at 2014 09 27 14 21 https cloud githubusercontent com assets 390392 4430722 80f77c5c 4641 11e4 9a75 40a7e1f5afe3 png >>>beginner bug css
sort psm authors alphabetically this list should be sorted alphabetically to make it easy to find people when there are lots of authors image https cloud githubusercontent com assets 120485 4430713 0211787a 4641 11e4 8737 7786549b0d7c png >>>beginner bug ember
wip fix minor styling bugs no issue this is result of an internal conversation about some bugs in where some issues were discovered which require really small fixes these fixes include on android the psm could be horizontally scrolled notifications on the setup and authentication screens where cut off at the top screenshot https cloud githubusercontent com assets 390392 4430393 ddb0e2f4 462c 11e4 9ba2 4a1742393232 png the setup screen wasn scrollable will rebase and rename before removing the wip badge >>>bug css
resetting password doesn log me in issue summary when successfully re enter my password having entered it twice am then redirected to the sign in screen even though the admin client knows my email and my password at this point it makes me write it all over again it would be nice if resetting my password just logged in me this is the behavior intuit just want to make it clear don think the api should do this think ember should >>>ember
bug correct header element is hidden on mobile to help make ghost feel more native we use webkit overflow scrolling touch which enables elastic like scrolling in places where `overflow auto is used however this doesn play nicely with `position fixed elements so things get stacked incorrectly as seen in the screenshot below the markup for the settings screens needs to be changed bit to allow the proper use of webkit overflow scrolling touch slack for ios upload https cloud githubusercontent com assets 390392 4420993 8bdb0408 457f 11e4 8acd c1485f4942b6 png >>>bug css mobile
default client entry for ghost frontend this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for this requires 4180 in order to work to make life for theme developers bit easier it would be nice to add default entry into the `client` table for the ghost front end theme developer would be able to use the pre populated `client id` to implement custom javascript functionality to allow javascript access out of the box for themes new client entry would have to be added during migration >>>oauth
implement authenticated access for public clients implicit code grant this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for in order to allow public clients to make authenticated requests to the ghost api we need to implement the `implicit code grant` rfc 6749 flow user initiates the authentication process from javascript client running in browser javascript client redirects the user to the ghost authentication endpoint using the following request `response type` token `client id` client id generated by ghost `state` random value to prevent csrf `redirect uri` redirect uri must exactly match one of the values listed for this client `scope` tbd ghost verifies the validity of `client id` and `redirect uri` user authenticates with username and password ghost redirects the user back to the client success redirect error redirect the client needs to validate the `access token` and ensure that the `state` parameter matches the one sent to the server the client can now access the ghost api using the access token an example on how to implement the implicit code grant flow can be found at https github com jaredhanson oauth2orize >>>api oauth
make ember admin work with new access control this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for the changes for making oauth work for external clients are going to cause some updates to how we use oauth with ember admin ghost admin is special application as it is the only application that is allowed to use username and password to login directly using the `resource owner password credentials grant` rfc 6749 to keep the ember admin working correctly we will need to update the values for new fields created in 4174 `client id` generated random number `redirection uri` null `trusted domains` null if the client is of type `ghost admin` the url from config js should be used `logo` ghost admin logo `status` enabled `type` ghost admin `description` tbd in addition to that the `client id` needs to be available to the admin this could be done similar to how we make filestorage settings available authentication needs to be updated to use the new `client id` as well >>>ember oauth
remove authentication for public endpoints this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for requires 4179 and 4180 the authorization method needs to be changed to allow access to the following api endpoints without requiring authentication `get ghost api v0 posts status published `get ghost api v0 posts status published `get ghost api v0 posts slug status published `get ghost api v0 tags `get ghost api v0 settings type blog `get ghost api v0 settings type blog `get ghost api v0 users `get ghost api v0 users slug `get ghost api v0 users email while implementing this issue it would be good to investigate if it is possible to do the authentication only if bearer token is available in the request body and let `canthis deny access if authentication is required attention third party access to public endpoints should not be allowed before all permissions are in place 3911 >>>api oauth
add access control for public endpoints public clients this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for requires 4174 access to public api endpoints is not unrestriced request to public api endpoints from javascript application needs to comply with the following rules public endpoints in this context are endpoints that don need an authorized user for being accessed the request needs to be sent with valid client id the client id is added as url parameter or sent with the request body this mechanism is already used for the ghost admin and implemented in auth strategies js https github com tryghost ghost blob master core server middleware auth strategies js l16 every request from javascript application has to be sent using ajax this can be detected by checking the `x requested with` header or simply using the `req xhr` value that express js adds to every request the originating domain has to be valid for request to the api when new client side application is added to ghost the trusted domains have to be added and every request for certain client id is checked against those values the calling host can be found out by reading the host header `var host req get host header values are not always trustable but checking them should be enough to deny random attempts to access the api >>>api oauth
add access control for public endpoints web and installed application this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for requires 4174 this issue deals with ensuring that only allowed web and installed clients are able to access the ghost api the goal is to give the operator of blog the chance to deny access for clients that are not approved if the client authentication as described in rfc 6749 succeeds only access to public api endpoints is granted since the same mechanism is used for installed applications it is not guaranteed that the client can keep secrets and therefore no additional permissions are granted client authentication can be done using two methods basic auth header header `authorization basic base64 client id client secret use passport js to implement the functionality example https github com jaredhanson oauth2orize blob master examples express2 auth js l52 request body already implemented in auth strategies js https github com tryghost ghost blob 2c3abeee031f03fc8e2685b424ff76971a71e1d7 core server middleware auth strategies js l16 >>>api oauth
authorize screen this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for to allow registered client to authenticate user it is necessary to implement special login page url ghost authorize` flow client redirects the user to ghost authorize` information about the application is displayed including client permissions user inserts username and password and confirms ghost redirects back to the client application this issue will need some design guidance from johnonolan examples from other services can be found on the `hello js` website by klicking on the third party service icons http adodson com hello js hellojs uncertain how this could fit into our ember admin any opinions from our ember savvy ppl are very appreciated >>>ember oauth
client management screen this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for to allow user to manage the available clients it is necessary to provide new screen probably settings clients` that adds the following functionality add new client edit client name edit description optional edit trusted domains edit redirect uri edit status development enabled disabled enabled normal operation mode disabled client is suspended can be reactivated development used to add special restrictions or allowances only used during development not needed for first version edit client permissions scope edit logo read and refresh `client id` read and refresh `client secret` delete client the client management interface will need some design guidance from johnonolan examples can be found here https my slack com services https twitter com settings applications https github com settings applications>>>ember oauth
client api permissions this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for it is allowed for every authenticated user to add browse edit and delete clients this is similar to what slack does for integrations and will allow every user to use third party clients the access to the restful api of ghost is protected by the individual permissions of each user json api admin editor author noauth clients browse clients read clients edit clients add clients destroy this issue depends on 3910 for adding new permissions to the database >>>api oauth permissions
api endpoints for clients this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for requires 4176 the following api endpoints are needed to make bread operations available for clients these methods are needed for implementing the client management screen see 4177 the endpoints are very similar to our other implementations and should follow the best practice used there `get ghost v0 clients` `get ghost v0 clients `get ghost v0 clients slug `post ghost v0 clients `delete ghost v0 clients `put ghost v0 clients expected response format >>>api oauth
add columns to client table this belongs to the oauth epic 4004 please read this for the big picture of what this issue is for add the following columns to the already existing client table to enable more oauth features `client id` unique id of the client uuid could be used for that `redirection uri` uri used to redirect after authentication attempt `trusted domains` if we want to allow more than one trusted domain per client we would need another table for relations `logo` url with the logo of client `status` development enabled disabled `type` values web server installed app client side ghost admin `description` this issue includes creating new migration to the next database version >>>data oauth
refactor middleware express apps this is follow up to 1961 and 4069 the ghost middlewares are currently complete mess we have two apps blog and admin and some middlewares for each in `middleware index js` and others in `middleware middleware js` some of the middlewares are shared between both apps others really only make sense on one the separation of blog and admin into their own express apps was good start to get things cleaned up as part of this issue the following tasks should be considered find new home for each middleware refactor ghost api into its own express app clean up the set up process of ghost how the express app gets initialised improve test coverage for middleware ll be working on all of these >>>server
typed code blocks will print their language name if the block doesn start the line issue summary when doing typed code block where you specify the language of the code like so the language is included as the content if the blocks backticks don begin the line reproduction put this in your editor issue summary updated by novaugust original issue text suppose we have markdown currently found issues the editor does not recognize the image and does not display an image upload placeholder the editor incorrectly parse the fence code block so it has the text `javascript` in my code maybe the editor has more issues when parsing markdown list>>>bug editor
bug tag input doesn work on mobile issue summary the tag input bar doesn work on mobile when entering tags and trying to complete them with nothing will happen this seems to be bug in webkit and webkit based engines https bugs webkit org show bug cgi id 16735 also relevant https code google com chromium issues detail id 118639 have created simple example that reproduces the issue http jsbin com tetemo edit open http jsbin com tetemo on mobile and type something the keycode will show as instead of the character you actually typed will try to figure out way to fix this steps to reproduce open editor on mobile tap tag bar enter tag type observe it being added as text this is bug because completes tag on desktop technical details ghost version master latest commit client os android browser chrome>>>bug mobile
hover state on publish button gets stuck when clicked highlightbug https cloud githubusercontent com assets 120485 4404262 27a9add4 44af 11e4 972b 61bfbceebef1 gif >>>blocker bug
bug more editor weirdness more of this double space stuff editorflick https cloud githubusercontent com assets 120485 4403173 438c12c2 449f 11e4 8025 c559281bddba gif >>>bug
properly serve shared files refs 3992 don use path join for urls>>>blocker
bug api has lost cache control headers all of the api endpoints are getting served with the header `cache control public max age 0` instead of `cache control no cache private no store must revalidate max stale post check pre check 0` apparently the api tests don actually check these headers >>>blocker bug
landscape mode on mobile messes up tag bar open getting started post on mobile in landscape mode tap text to start editing tap the burger menu button observe the result below unnamed https cloud githubusercontent com assets 176576 4395783 81c3c556 442e 11e4 9a03 7f8e27c63033 png tested on ghost rc1>>>bug mobile
enable cycling header levels with ctrl note this is cleaned up version of 3484 ve rebased it and modified the behaviour to cycle through h2 and h3 otherwise it the same pr it rwjblue commit remove preexisting `ctrl h` keymap add logic to cycle the header level loops around after h3 sets cursor position to end of heading set initial level to h2 remove `ctrl alt num keymaps as they do not work internationally >>>blocker
clean up hardcoded ghost paths follow up to 3718 3824 we now have gh path unbound helper that should be used across the board as much as possible to write our urls into the template ve seen few places this can be implemented the contributors template in the gruntfile all the hardcoded bits in ghost paths here https github com tryghost ghost blob master core client utils ghost paths js l28 l31 applicationview `blogroot` property needs investigating user profile images nope bound stuff hardcoded user cover defaults here https github com tryghost ghost blob master core client controllers settings users user js l13 l27 again nope this is all computed with not actually in template find all for any module that using the `utils ghost paths` utility should turn up places that we can instead use the `helpers ghost paths` just keep in mind the helper is unbound so if it template value that needs binding you ll have to keep using the utility for now >>>beginner
bug themes aren watched in dev environment when ghost is running in production mode it watches themes for updates so if change handlebars file it is automatically reflected without needing to restart ghost this is good when ghost is running in development mode however this does not work and ghost needs to be restarted to see every theme change afaik this is only an issue when running ghost in dev mode from the built package on ghost org not running from this repo >>>bug
bug flicker when closing dropdown menu component when closing any dropdown by clicking on the chevron there is flicker click on the chevron wait at least second click on the chevron again result flicker https cloud githubusercontent com assets 120485 4387206 3442b912 43da 11e4 9144 93840c966382 gif >>>bug ember
review max length limits in database schema some of the max length limits in the database schema need extending with regard to meta title and meta description see https github com tryghost ghost pull 4126 issuecomment 56632903 while we re at it it worth reviewing all of the max length limits now that we have more information about how people use their blogs in order to implement the changes we will need 601 the ability to change the max length on column >>>data server
bug psm can scroll over to tabs note psm post settings menu issue summary user can scroll right to see inactive tabs currently just the metadata tab repro steps open the psm move your mouse over to the menu and scroll right specs browser chrome 37 os mac something or another commit latest master `485c296` screen shot 2014 09 23 at 19 56 21 https cloud githubusercontent com assets 1207005 4382640 0cb4e9c0 438e 11e4 8e5b 74145c88dc10 png >>>blocker bug css ember
about page top contributors is bit squiffy when we first started work on the top contributors for the about page we were pre and not really sure how the new release stuff was all going to pan out now that we re here about to do release it makes sense that we count from it may be that we count from until or that there are significant enough releases in the middle to reset we should probably do something consistent so for now think we should assume it going to be the last minor version bump so then running `git shortlog no merges master` gives me something like this list https gist github com erisds a849772266fd028e5c40 and is the command usually run to generate the list for the release post the current implementation of top contribs for the about page uses the specified tag to fetch date and then uses the date to fetch the top contributors according to the github stats page here on the repo as it is possible for commits to have been done before the tag was cut this means we get slightly different result which is confusing recommend instead using the following api endpoint to get all the commits between two points and manually looping over the commits and counting how many their are per author merge commits can be removed by checking the message doesn start with merge pull request https api github com repos tryghost ghost compare master it would be great to be able to specify both the start and end points as grunt options `grunt buildaboutpage force from to 2` alternatively having them hardcoded is fine as have to commit the html for the page anyway >>>blocker
rewrite publish bar markup closes 4123 closes 4114 references 4105 rewrite to use flexbox for uber mobile goodness fixes tag suggestions using the new dropdown style fixes vertical alignment>>>blocker
updating messages to use errors module no issue only updated the messages that are errors or warnings changed the structure of the messages to follow the arg format>>>blocker server
incrementing hard limits for meta title and meta description closes 4124 incremented values for client side validation for meta title and meta description changed error messages to display the maximum number of characters >>>blocker
metadata input lengths and validation think the validations and behavior for the meta title and meta description need some sorting out currently they re both set up with recommended length and allow the user to input content longer than the recommended maximum if the user goes over the max it displayed in the serp as if it will be accepted however it will fail client side validation because the validations are currently set to hard limit of 70 meta title and 156 meta description characters additionally the error message doesn indicate what the limit is so the user is left to guess the maximum lengths for those fields in the database are 150 and 200 characters respectively think it makes sense to either get rid of the client side validations for these fields and let the server validate them which is how the post title currently works or to adjust the client side validation limits to match the database schema and provide an appropriate error message >>>beginner blocker ember
tag suggestions bubble has gone awol yet another awol component when typing tag into the tag input there are no longer any suggestions shown it exists in the markup it just can be seen guessing this is another index bug >>>blocker bug css
post settings menu make the default publish date and slug values editable issue history this issue is being raised in favour of 3204 and 3382 two separate issues which each covered the same usability problem one for the slug and one for the published date for reference the original issue which described the desired behaviour of these fields is here 1351 we have also had prs for these two issues 3875 for 3204 date and 3390 for 3382 slug however both of the prs are currently stalled the underlying usability problem with the two of these fields is that the placeholder value which is the default value is something that user might reasonably want to edit however as they are implemented as placeholders the data disappears as soon as you focus the field the intention is to change the behaviour of the two fields so that the default value can be edited however this isn quite straightforward as the two fields behave slightly differently on new post the slug placeholder updates it value as the title updates until the post is saved for the first time according to 1351 this is meant to stay placeholder until the post is published but believe this was deliberately changed although not 100 on new post the date is set to the current time by default it doesn get converted to value on save so each time the post is reopened the updated current time will be shown until either custom date is entered or the post is published so in short slug default converted to saved value on first save date default converted to saved value on publish in order to make these defaults editable we need to set them as values rather than as the placeholder however if the values aren edited by the user the defaults should continue to update until the point at which they become proper saved value in the same way as they do now >>>ember
implements setting specific body classes closes 4116 adds css classes to settings views johnonolan all settings pages have the class `settings` should that be kept should there be `settings view index` class on the settings index route which is used on mobile to display only the menu >>>blocker
various minor fixes>>>blocker
fix chevron animation in publish button closes 4104 fixed the broken spiny animation used in the publish button>>>blocker
add settings view specific bodyclasses if on general settings add bodyclass settings view general if on users settings view users if on user settings view user>>>ember
remove placeholders and limit serp description closes 4112 closes 4113 remove meta placeholders add hellip in serp preview when desc too long>>>blocker
tags are completely broken on mobile this whole thing is horrible and needs to be completely rewritten but we need some sort of very basic fix for this right now mobiletags https cloud githubusercontent com assets 120485 4369977 6d46205a 4303 11e4 8ee2 9f066b0db776 gif >>>blocker bug
meta data screen no placeholders the placeholders on the meta data screen are really confusing in part because `meta title` and `meta description` behave differently `meta title` will be the post title by default or the content of the field if it is set `meta description` will be blank by default or the content of the field if set therefore the placeholders are just adding to confusion so let remove them and leave it up to the serp to be preview of what the result will be the serp is slightly different the search engines will use the first 156 chars of the post or the meta description if one is set so that is what we should show see 4112 >>>blocker ember
serp cutoff image https cloud githubusercontent com assets 120485 4369646 7850a802 42ff 11e4 996a 359c5098ed77 png the serp should only ever display the first 156 characters entered in the meta description textarea if 157 or more characters are entered the serp should have hellip appended to the end >>>bug ember
static page and feature options in new psm closes 4109 add featured option move static page featured to other place change wording on static page>>>blocker
static page and feature options in new psm update wording on page label add feature option change order of elements move delete post into the publish actions button only appears if post has been saved at least once looks like image https cloud githubusercontent com assets 120485 4369248 d96f257e 42f9 11e4 86c1 b484f005f157 png should look like image https cloud githubusercontent com assets 120485 4369321 ea3af01c 42fa 11e4 878b 38aebb556e37 png >>>blocker bug ember
better dropdown component alignment we need better alignment on dropdowns it would be nice if dropdowns positioned themselves according to where their triangle appears eg if triangle on the right dropdown should be aligned on the right side of it relative parent if triangle center dropdown should be centered relative to its parent how does bootstrap handle this image https cloud githubusercontent com assets 120485 4368978 a1298a46 42f5 11e4 8361 0a2390745f01 png >>>bug css
clean up css style standards our css is getting messy and mixing styles all over the place this needs to be cleaned up and more rigorous code review process needs to take place to make sure that code which gets merged is clean example image https cloud githubusercontent com assets 120485 4368758 75183aea 42f2 11e4 8337 f4557a076ee6 png should be image https cloud githubusercontent com assets 120485 4368777 b890e830 42f2 11e4 8fbc e00b9c872eef png space nested rules properly for readability adhere to recess css http markdotto com 2011 11 29 css property order property ordering example image https cloud githubusercontent com assets 120485 4368801 33699692 42f3 11e4 8d6b 44f1716e8055 png should be image https cloud githubusercontent com assets 120485 4368806 3de1c2f2 42f3 11e4 9429 f06395068d5a png proper spacing closing comments not needed unless opening and closing brackets are 25 lines apart or contain levels of nesting >>>css
update editor specific overlay this should be part of the settings menu component and used everywhere that there is settings menu it is not specific to the editor >>>bug css
tag input bugs both tag icon and tag itself should be vertically centered within the publish bar when the tag text input is active the tag icon should maintain its hover active state white when tag is deleted by clicking on it the tag text input should subsequently be active image https cloud githubusercontent com assets 120485 4368623 665524ac 42f0 11e4 949d 43287379ef08 png >>>bug css ember
regression dropdown menu animations are all broken dejav 352 ignore the empty menu itself this issue is about the hover active states of the dropdown arrow this should work as it used to in this is blocker for release and top priority dropdown animations https cloud githubusercontent com assets 120485 4368528 face692e 42ee 11e4 8013 823c5d5b2bc4 gif >>>blocker bug css
rename settings menu component as discussed quite extensively before it really important for components to be properly and semantically named in order to be useful currently the post settings menu is being injected with the name right outlet which is both unsemantic and frustratingly vague the name of the post settings menu component is settings menu and the only thing which will ever slide out from the right side of the screen is settings menu component as such the name would make lot more sense if it reflected that >>>beginner bug ember
clean up css commented code the codebase currently contains quite bit of commented out blocks of css which are either no longer used or were simply never used this needs to be cleaned up and we need to make sure that this does not get committed to master in future >>>css
fix uncentered no posts view closes 4097>>>blocker
discussion link from published post content editor to live post issue summary if post is published like to be able to go off and view it on my blog with one click but sadly there no way for me to do so without going through pages and pages of posts or copy and pasting it slug information proposal what if the `published by` text on post was actually link to that post on the front page that quick fix until designer comes up with happier place to put it if peeps have better places for it wooo>>>feature
content screen with no posts not vertically centred how it looks now http puu sh bjq8d png how it looks in http puu sh bjqqf png don believe this was meant to change as it looks rather odd >>>blocker bug css
undisable nprogress closes 4095 removes the line that killed nprogress for psm adds to styles to make nprogress appear again ht halfdan irc http 107 20 237 151 8081 logs 23ghost 20140922 pm51214>>>blocker
nprogress has gone awol guessing this is gui2 bug but there is currently no nprogress showing meaning there is absolutely no feedback that anything is happening in the psm etc steps to reproduce navigate around the admin try saving post loading the content screen playing with the psm etc notice there is no blue bar technical details ghost version 1>>>blocker bug
show all authors in post settings menu closes 4016 added limit all to api query to retrieve all users >>>blocker
update meta helpers no ref return meta description from post meta description if set return meta title either from post title or post meta title if set adds tests>>>blocker themes
ie ui fixes closes 4088 fix flexbox issue with the user list fix positioning issue with the mobile menu toggle icon make the mobile settings nav use absolute positioning as fixed elements don move inside `transform translate parent remove `font feature settings` from the about page logo `dt dd`>>>blocker
validate and properly color letter count fixes 4087 adds correct validations for meta title meta description adds correct coloring of letter count>>>blocker
bugs ie 10 11 ui issues ve discovered few issues with ghost in ie10 ie11 windows for ie10 and for ie11 none of them seem particularly tough or completely destroy the ux but they re not working as specced flexbox issues in the user list ie 10 11 not vertically centred does get the ms prefix may need to adjust autoprefixer burger icon for the mobile nav is not vertically centred ie 10 needs `top 10px on ie 10 only to fix but re work to cure mobile nav doesn open properly on the settings pages ie10 11 screenshot https cloud githubusercontent com assets 390392 4349930 f8f267d0 41cd 11e4 82a1 4a17242fcf09 png ghost logo version not showing on the about page in ie11>>>blocker
long post meta description is punitively killed issue description if you type more than 200 characters in the meta description box everything you typed is killed via rollback since the server says there an error this is bad because put lot of work into those 201 characters don take it away from me repro steps open the editor write 200 characters in the meta description click out boom suggestions validate on the client or shoot just don rollback that so mean also if we want the user to get back the original content of the meta description box perhaps reset button would be nice meow>>>ember
mail deprecated mail fromaddress reformatted mail from to title closes 4018 4082 reformatted code to allow for traversal deeper config items should be denoted like this `object object object property` added tests for testing the deprecation warnings cleaned up `mail spec js` deprecated `mail fromaddress` implemented blog title format with fallbacks added tests to deprecation and from address made existing ones more robust moved domain intuit into its own module `ghostmailer getdomain left them as two separate commits on purpose >>>blocker server
bug post settings menu takes clicks to open after close by esc just noticed this niggle if use escape to close the psm then the settings cog requires clicks as though something isn getting toggled correctly steps to reproduce open the post settings menu press escape click the cog to reopen the post settings menu click the cog again repeat to check you didn just miss click the first time technical details ghost version 1>>>blocker bug ember
naming cleanup closes 4069 rename everything from camelcase to lowercase dashes remove usage of `server` `app` and `instance`>>>blocker server
frontend blog 404 page styling lost if you try to access page on the frontend of blog that doesn exist you see 404 page with no styling http puu sh bfpsg png it is meant to look like this and still does in the admin panel http puu sh bfpwh png >>>blocker bug
renaming express vs app vs server vs instance what am due to refactoring and then refactoring again and then refactoring bit more we ve ended up with cacophony of naming conventions for various bits of server side ghost in particular the main `index js` file for ghost which people using ghost as module will need to replicate has confusing set of variable names at present which includes using `server` for an express instance and `instance` for an instance of `ghostserver` the first and least controversial change proposal here is to always use `ghostserver` for any instance of `ghostserver` this should make it 100 clear what that variable is as using upper case for classes and lower for instances is common convention next we need convention for various express instances express is always included as `express require express and then needs instances creating therefore we can use `express` as name for an instance plus it kind of log and weird name anyway what is an `express` when it at home in the express docs the common name for an instance is `app` nice and short and sort of indicates what it is sort of however we have many of them so recommend always using prefix to that end let have rule general terms like `app` `server` `instance` `object` should not be used as variable names without clarifying prefix sooo `adminapp` and `blogapp` are fine `ghostserver` is fine etc also whilst we re here lets also clarify that the naming convention for files should be all lower cased and dashed so `ghost server js` not `ghostserver js` and `object type model map js` and `local file store js` and so on and so forth for all the oddities tl dr `app` `server` and `instance` cannot be used as var name without clarifying prefix like `ghostserver` instances of classes should start with lowercase so `ghostserver` is an instance of `ghostserver` all filenames should be lower cased and dashed so `ghost server js` >>>blocker server users
importer should skip unknown settings rather than error at the moment if you try to import file which has reference to unknown settings the import will fail for example if you ve tried out the new code injection pr and therefore have `ghost head` and `ghost foot` settings unable to find setting to update ghost head the error message is sensible enough but there no reason to fail we should just skip the setting and move on perhaps output warning that those settings were skipped >>>importer
bug 500 errors if there are no posts if you don have any posts ghost explodes boom the content page throws 500 error and in the console can see steps to reproduce either go to ghost debug and delete all or start new blog and delete the welcome post or otherwise get blog that doesn have any posts try to get to the content screen boom technical details ghost version >>>blocker bug ember
gui css issues due to the gui update we rewrote much of the css and although we based it on solid foundations largely bootstrap some bugs still creeped in this issue is meant to live alongside 3810 which listed many functional issues but this is home for css bugs if you find any comment below and let tackle these bastards all invite user modal button is not 100 wide firefox cannot be focused firefox user profile is fucked at desktop size 4051 firefox user list avatars are slightly cut off on the bottom only on non retina firefox icons are too heavy in weight>>>blocker css
feature request add delete post shortcut to content screen proposal no issue cmd ctrl backspace deletes post on the content screen wanted to raise an issue for this but as it was three lines of code thought both raise the issue and create working demo of it recently wanted to delete large number of posts and with the new psm that required five clicks click the post click edit click psm cog click delete button click yes it hurt me inside as person who loves never touching his mouse this solution popped into my head would love any sort of feedback and if it gets closed and thrown away ah well>>>ember feature
codemirror funkiness bug johnonolan has reported seeing the following weirdness in chrome on mac pasted image at 2014 09 16 18 00 https cloud githubusercontent com assets 101513 4291319 9ac29666 3dc3 11e4 969d fbcfb88943b1 png weird space between and pasted image at 2014 09 16 18 01 https cloud githubusercontent com assets 101513 4291323 9c85c464 3dc3 11e4 8bc7 4c4dc84b5363 png weird space before star is not real space am as yet unable to reproduce need to look through the codemirror issue list to see if there an indication of this issue and try reverting back version or two to see if we can find good stable version >>>blocker bug editor
phantomjs crash during functional tests phantomjs is crashing every time the functional tests are run in my local development environment which is the ghost vagrant vm node 10 30 and phantomjs ve seen one report of it also crashing in travis instance so it not as frequent in that environment but it still an issue screen shot 2014 09 16 at 54 00 am https cloud githubusercontent com assets 214142 4288217 1d390220 3daa 11e4 878c 453256e8216c png the above is an example of the crash although it doesn always occur in the same place ve narrowed it down to coming in from 3954 specifically these two lines where listeners are attached to `mediaquerylist` objects https github com tryghost ghost blob master core client views application js l24 https github com tryghost ghost blob master core client views application js l52>>>tests
psm cover images closes 3885>>>themes
login screen times out can login the login screen times out issue summary can hit pages posts just fine but can hit ghost` or any of the editor screens am using the `dockerfile ghost` container https github com dockerfile ghost steps to reproduce pull docker image `docker pull dockerfile ghost` `docker run 2368 2368 dockerfile ghost` see logs below expect the page to load regardless of being able to get ghost updates technical details ghost version release client os mac os 10 server os ubuntu 14 04 node version 10 31 browser chrome 37 2062 120 database sqlite>>>bug
don redirect ghost to specific post on mobile this is subtask whose details are spelled out in 4031 see also 3584 >>>blocker ember
mobile view transitions for content screen split from 3810 this is the last remaining release blocker doughnut for the person who prs it the core idea here is to make the content screen that is the list of posts and the individual previews work the same way as the settings screen when viewing on mobile small screens currently at desktop size this is how the content screen appears not the back button that shouldn be present http puu sh bysng png on smaller screen this becomes two separate screens or views the content view and the preview view content view currently the content view is mostly functioning correctly with one small exception that the url for this view needs to be just ghost rather than ghost id this is the same idea that we have in the settings screens where the menu is ghost settings and when you drop down to viewing for example the general settings screen the url changes to ghost settings general http puu sh bysss png preview view the preview view is where the most work is required the navigation concept for mobile sub views that we have both here and in the settings screens is the global nav` element disappears and gets replaced instead with page header` element these elements aren dynamically generated they re always both in the source code for each subview but one is shown and the other is hidden http puu sh bystw png on the preview view the page header` element needs to be updated to be similar to the page header for the general settings screen the title should read preview the burger menu icon should be replaced with the back button the one that currently appears below which shouldn be there and the edit button should appear in the top right on top of the header believe this can be done with `position fixed` tldr the following things need changing on desktop there should be no back button on the content screen on mobile the back button on the preview screen should appear in the top left as part of the header bar on mobile the url for the content screen should be ghost the preview screen should be ghost id 4032 on mobile the edit button should appear over the header bar in the top right the title on the preview screen should be preview >>>blocker ember mobile
emberify the remaining left over bits of old admin in core client assets lib https github com tryghost ghost tree master core client assets lib there are two files which remain as somewhat unloved remnants of the old admin these bits of js need to find new homes inside the ember client and the `assets lib` folder needs to die assigning to novaugust as he expressed an interest in laying these to rest >>>ember
themes excerpt content round up there have been number of discussions around improving the excerpt functionality many people prefer to use the `content` helper rather than the `excerpt` helper and have more html there is also lot of dislike for the `words` and `characters` options because they cut off words and sentences in the middle to resolve this let add new `round` parameter to the `excerpt` and `content` helpers which moves the cut off point to the end of the nearest sentence the option should accept up or down to determine which way to round the difficulty here will be with picking what counts as the end of sentence think full stop or double newline make sense for the content tag there is already concept of sentence terminating tags in the downsize library but don think it takes full stops and newlines into account at present >>>themes
bug psm only shows first 15 authors in dropdown if you have more than 15 users on your blog you ll find yourself unable to choose from all of them in the psm only the first 15 are ever shown steps to reproduce have more than 15 users on your blog open the psm and try to change author to the last one you added believe the user api will accept `limit all` as query parameter which should help to resolve this technical details ghost version master >>>blocker bug ember
markdown modal is wrongly positioned issue summery the markdown help modal is positioned in the top left it should be right in the middle screen shot 2014 09 10 at 19 24 41 https cloud githubusercontent com assets 390392 4222979 00da0c1e 3918 11e4 8201 b55883d0c7b5 png >>>css
open user menu on hover top right corner user menu let open that on hover should still open on tap for mobile users see this as being common use case so open on hover click option might be best baked into the global dropdown component directly so that it can be re used think click should be the default and hover the option >>>beginner ember
psm opening closing with notifications up makes them jump around issue summary notifications do bit of dance if they re up when you open close the new psm repro have long lasting notification up open close the psm jumpy notification https cloud githubusercontent com assets 1207005 4220398 287d4f04 3901 11e4 9172 1435fd5f2ce1 gif >>>bug css
oauth continued open the json api via oauth clients in order to make the ghost api accessible publicly we need to extend our support for oauth and add different endpoints to the api for adding clients and dealing with authorization requests ghost is going to support two different kinds of clients web and installed applications and javascript centric applications that run on the client side there is no full public access for everyone as we need to make sure that the operator of blog is still able to deny access to clients that are not approved web and installed applications the ghost api supports web desktop and mobile application public access to api endpoints web and installed applications are allowed to access all api endpoints that don require authentication by using the client authentication as described in rfc 6749 client credentials `client id` and `client secret` have to be transmitted with each request to one of the public endpoints to get access desktop and mobile applications are distributed to individual machines and it is assumed that these clients cannot keep secrets therefore no special access rights are granted when using client credentials to access the api for now authenticated access to api endpoints if an application wants to access endpoints that requires authentication it has to use the `authorization code grant` method described in rfc 6749 this grant type requires the user to be redirected to your ghost blog where the user authenticates the application after successful authentication short lived single use code is returned which allows the application to acquire access and refresh token on behalf of the user client side the ghost api supports javascript centric applications these applications are allowed to access the ghost api but are treated differently since they typically can keep secret public access to api endpoints requests to public endpoints must send valid client id of registered client this is similar to what google does for google maps client side applications are allowed to access endpoints that don require authentication if the request comes from known domain via ajax request `localhost` is allowed during development and contains the client id of registered application checking header values does not guarantee that the client is genuine but it should prevent random attempts to access the api and allow to revoke access from unwanted clients authenticated access to api endpoints if client side application wants to access an endpoint that requires authentication it has to use the `implicit grant` method described in rfc 6749 this grant type take into account that the application can keep secret and therefore provides no code to acquire access and refresh tokens but returns an access token immediately refresh tokens are not available and user has to authorize the app again whenever the access token expires to get an access token the application has to redirect the user to ghost server where the user authorizes the application after successful authorization an access token is returned which grants access to the api for limited time scopes oauth allows to optionally specify the scope of client ghost provides the concept of app permissions and would suggest to use the same permission model for clients as well permissions have to be specified when the app is registered and should be presented to the user when an user authorizes an app to access the api authorize endpoint the `authorization code grant` and `implicit grant` flows require the user to be redirected to an authorization page that runs on the ghost server we have to determine where we could add this page to our ember admin and how to redirect the user back to the inquiring client register client adding client is done by an authorized user that manually sets up the allowed application and then copies the client credentials to the appropriate places in the client examples for such registration pages can be found on the developer pages of twitter facebook or github adding the client manually is easily doable for services that only run on one domain in our case client application would have to be registered for every single installation of ghost this would require user to add the application to ghost before he could use 3rd party client draft for registering clients automatically https tools ietf org html draft ietf oauth dyn reg 20 has been published but isn specification yet based on the draft for registering clients automatically would propose to allow the registration of new clients during the authorization process that means that 3rd party client can send registration information along with the authorization information if the client is used with service for the first time the user is then asked to add the new client if he approves the authorization process continues default clients as ghost admin and ghost frontend also need to access the api and authenticate using oauth there will be two default clients that are available on every ghost blog `client id` and `client secret` are generated randomly for every blog ghost admin exists but needs update ghost frontend new this is an overview issue for implementing further oauth features issues for implementation are add columns to client table 4174 api endpoints for clients 4175 client api permissions 4176 client management screen ember ghost ui 4177 authorize screen ember ghost ui 4178 add access control for public endpoints web and installed application 4179 add access control for public endpoints public clients 4180 remove authentication for public endpoints 4181 make ember admin work with new access control 4182 implement authenticated access for public clients implicit code grant 4183 implement authenticated access for web and installed apps authorization code grant 4388 client permissions scope tbd bonus ghost frontend client 4184 add dynamic client registration to auth screen tbd development mode for clients tbd >>>api epic oauth
bug linux middle click paste doesn work and does different stuff depending on browser issue summary most applications in linux recognize the 2nd copy and paste buffer which contains whatever was last highlighted and can be pasted by clicking the middle scroll wheel button of the mouse ghost doesn seem to recognize middle click paste and behaves completely differently depending on the browser in firefox 32 it doesn do anything unless url had been highlighted then it actually goes to that url in chrome 39 2145 dev 64 bit it sometimes works but almost always inserts instead steps to reproduce run ghost on linux machine try it in both firefox 32 and chrome 39 2145 dev 64 bit start new post and try highlight middle click paste especially try it on url in chrome try it repeatedly until it works mcghostff https cloud githubusercontent com assets 2450827 4213603 020367b2 38b8 11e4 8473 b4c72bee7423 gif mcghostch https cloud githubusercontent com assets 2450827 4213606 089208fe 38b8 11e4 8809 c8c6972603e9 gif this is bug because middle click paste is very common way of doing copy and paste in linux especially among coders those used to middle click paste will find it very frustrating to constantly have to re copy and paste stuff when the first method done by habit didn work technical details ghost version master latest commit stable a21ce4dd55a0c9f2522a4edb1e97e1cbd98518ff client os server os at http localhost 2368 ghost editor x86 64 gnu linux arch linux 16 arch node version v0 10 31 browser firefox 32 and google chrome version 39 2145 dev 64 bit database ghost dev db default sqlite >>>bug
can scroll right on post list view on mobile screen shot is going to say this better than can using trackpad to scroll right scroll right https cloud githubusercontent com assets 1207005 4212362 0d2e984e 389c 11e4 8330 266318957f3f gif ps issue 4k >>>bug ember
posts scroll box doesn keep the active post in view issue summary if you re navigating through long list of posts long enough you have to scroll with the keyboard shortcuts up down keys you ll eventually move your focused post out of the window similarly if you have 15 posts and load the page at ghost 3` your active post will be out of view repro steps make enough posts you need to scroll to see them all scroll all the way up hit the down arrow until the bottom post is selected >>>bug ember
epic ghost and rss description ghost currently uses the `rss` module to generate its rss feed there are number of open issues with the module and it is not extensible by apps in addition to an audit of the feed structure 2263 the rss feed will need to be extensible and properly support caching via etags 2777 steps develop new rss module called feed js https github com halfdan feed js that will replace `rss` halfdan make sure `feed js` is at least on par with ghost current rss feed halfdan audit feed structure and decide on necessary changes 2263 allow extending the rss feed via apps 2365>>>epic
bug url replacement in rss feed mucks with content issue summary in the rss feed relative url in `src` and `href` attributes are replaced with absolute ones but this happens even when string like src blah is in the textual content of post steps to reproduce create new post in the body of the post type src hello jpg publish the post and then go to `http your blog url rss` in the first `item description` you ll see something like instead of comments reason the rss controller is using naive regex https github com tryghost ghost blob master core server controllers frontend js l491 to do the url replacement one fix approach could use something html aware like trumpet https github com substack node trumpet to process the post another could be to expose handlebars helper or parameter on an existing one that transforms the post body to be rss ready and then use hbs template for the feed instead of controller possibly even making it part of the theme structure technical details ghost version master latest commit 0a96351274a8243e3bdb2715b69ce1c9e84b6d06 client os mac os mavericks server os mac os mavericks node version 10 30 browser chrome 37 2062 94 >>>bug
discussion theme package json declare compatible ghost version am on quest to reduce the confusion around ghost themes and whether they are compatible with specific version of ghost as well as improve the rate at which themes get updated when we add or remove features months after we originally introduced the required asset helper and months after pageurl was deprecated and `package json` added still see many themes which haven updated for one of these changes one part of this is very definitely our lack of communication although always blog about changes there has never been good resource today ve done first pass of theme api change log http docs ghost org themes changelog which hope to see expand into resource which details every change the impact how to upgrade your theme etc furthermore it is time to start requiring that theme declare which version of ghost it is compatible with in the package json file am not 100 certain whether this is correct use case for `peerdependences` or whether we should do something like we already use the ghost key for `ghost permissions` for apps so it may make sense to keep all of our custom ghost related keys under single `ghost` key whichever we choose the result should be ghost startup warning around themes that are incompatible theme should be deemed incompatible if it does not have package json it has package json but no ghost version specified it has specified ghost version which is lower than the current ghost version according to semver note at the same time as we introduce this also want to introduce the requirement that theme `package json` specifies the `author` key name version and author are required to be valid package json file according to npm there should be warnings output by ghost if `name` `version` `author` or whatever we pick for declaring the ghost version is missing once we ve shipped this change and done bit of extra communication to theme developers around these changes there are two further steps think we ought to take in subsequent releases so that the move towards requiring this is gradual but very clear first we ll add top notification to any blog whose active theme is incompatible this won affect anything but will encourage blog owners to nag their respective theme developers second we ll make it so that it is not possible to activate an incompatible theme ghost will still start if the theme is already activated but any attempt to choose theme which is incompatible from the dropdown should fail with sensible notification summary of tasks decide on format for the ghost version peerdep or ghost version make ghost output startup warnings if it is missing make ghost output startup warnings if `author` is missing bonus create way to determine if the currently active theme is incompatible perhaps via theme api endpoint>>>themes
fallback value for last seen in the case of migration to ghost where users are created via an import but have never logged in before the last seen value is currently shown as blank image https cloud githubusercontent com assets 120485 4167245 cda89b6c 3511 11e4 80fa ddaa6e871f94 png it should fall back to default value last seen never >>>bug
implements is helper closes 2249 added context aware is helper added unit tests>>>blocker themes
change the url `helper to be synchronous not 100 on what the options for doing this are but think we can achieve it if we re bit clever the main reason why the helper is async is due to the need to fetch the permalink setting however settings are cached meaning that this is normally synchronous operation anyway further still there should be no need to do this more than one per render of view so thinking we could perhaps cache the setting either against the helpers or against express with `app set` as part of the setup middleware it probably be good to do something like this with settings config that affect rendering url permalink activetheme postsperpage etc url can only change on server restart and the others require settings to be changed so we could refresh the caches for these object either based on events something we ve talked about elsewhere or only change the values if they re not set or if the current request is an admin request just throwing around some thoughts but the goal remains simple make url normal helper rather than an async helper removing the need for async helpers at all is secondary goal as they re unlikely to ever be supported properly >>>settings themes
post save call unnecessarily sends full html this is possibly bit of an odd one it not really bug but it totally unnecessary and sub optimal for the post save request to send both the `markdown` and fully generated `html` to the server it is also believe change from how the old editor works when ghost receives markdown to save on the server it processes it into html using slightly different rules to the editor no image upload dropzone the server does not save the html it is sent so sending it is unnecessary sending the full model object from ember is correctly the default behaviour but in this case it means we re sending huge payload of data that just gets chucked away on the other side furthermore ve seen with ghost the first ever complaint that post could not be saved due to `request entity too large` error for really really long and complex post the amount of data in the `html` field will be even more than the `markdown` field the request will more than double in size all the other fields are really small significantly increasing the likelihood we ll run into this although it still quite unlikely it is my recommendation that the ember client should send an empty `html` field to the server >>>api ember
bug unsaved title changes are lost when interacting with the psm any unsaved title changes are overridden when interacting with the psm this is pretty unexpected the content doesn reset in these cases but the title does steps to reproduce create new post add title and save draft change the title and without saving edit the permalink date change author or click the static page checkbox notice your title change has gone orrrrr create new post add title and save draft change the title and without saving edit the permalink and go straight to the save button title change is still gone technical details ghost version 1>>>bug editor ember
css to replace `jquery animate` description the posts content list and settings menu are two screens that work identically on mobile phones allowing users to go back and forth between list menu and content screen right now that going back and forth is powered by jquery `animate` method it would be beyond wonderful if we could tear that out in favor of just toggling some class this would be part of 3922 and is also relevant to the removal of jquery from the postscontroller 3950 code locations the suspect code is here on the posts controller https github com tryghost ghost blob master core client controllers posts js l77 l90 and here on the settings views https github com tryghost ghost blob master core client views settings js l5 l34 >>>css mobile
emberify postscontroller postsview mobile interactions issue summary the posts controller and posts view are both overly reliant on jquery to manipulate their mobile views we re trying to get away from relying on jquery for complex behavoir we re using framework for reason solution as starting point the jquery `click`s should be stripped out in favor of proper ember action use the view `mobileinteractions` can hopefully die entirely while the controller actions can possibly be abstracted away epic goal the interactions on the page are identical to how the settings menu and subviews work it would be great if we could extract this logic in some way that it could be shared between the two mixins `extend` some new base class this would involve changing how the routing works on the mobile level with the postsroute see the settingsroute for inspiration >>>ember mobile
compile client assets with `grunt dev` the `grunt dev` utility command should do everything that `grunt init` does with the added bonus of watching your code and rebuilding things along the way right now the admin client sass is only compiled in `grunt init` and people who roll with `npm install grunt dev` are left in the cold >>>beginner installation
bug mobile settings transitions are glitchy there small spot where the mobile settings are showing the menu when they should be showing content the gif sums it up best mq https cloud githubusercontent com assets 1207005 4125539 bef5493e 32e2 11e4 8125 dbbb4321d226 gif this is probably disconnect between the ember media queries and css media queries and will hopefully be quick fix ref 3810 >>>bug ember
post settings menu meta data screen the new post settings menu 3822 is pretty ambitious so we re doing it in couple of steps once 3936 and 3937 are complete we should have all the basic pieces of the psm in place so that we can start building out sub menus the first one to build is the shiny new meta data screen shown below the requirement for this is that it becomes possible to set the meta title and meta description on post `meta title` should be set to the post title by default `meta description` should be blank by default the search engine preview should update on the fly with the meta title correct permalink for the post including blog address and the meta description this may need additional styling which can be done separately if need be image https cloud githubusercontent com assets 120485 3943035 cadcadc0 2584 11e4 8a47 5abe1402cda5 png >>>ember settings
post settings menu sub menu and sub views the new post settings menu 3822 is pretty ambitious so we re doing it in couple of steps this step covers adding the ability to create sub menus and their accompanying sub view >>>ember settings
post settings menu add new with the existing settings the new post settings menu 3822 is pretty ambitious so we re doing it in couple of steps this first step is to get the post settings menu into it new home with the new white design fancy slide out behaviour but rather than also adding new settings and sub screens we want to set it up with only the existing settings url slug date author static page delete so it should look and work like this http cl ly items 0q3y1c3w3o461k02473f psm gif but with just the original settings no image no submenus etc and with the static page check box on the first screen >>>ember settings
component settings menu issue by johnonolan https github com johnonolan saturday aug 16 2014 at 20 36 gmt originally opened as https github com tryghost ghost ui issues 99 this component will be used primarily for the new post settings menu however it should be re usable it should open and close with trigger element the open close animation should be identical to the global nav` mobile implementation the default width of this element should be 350px when the viewport is smaller than this the width should become 100 this entire thing should later be written as an ember component so that we can navigate around it almost like mini app within the ghost app there may be considerations for the markup up front which are worth getting rwjblue input on animations to navigate between states eg main meta data are unimportant at this stage sketch3 file http cl ly x4qc this component depends on the prior implementation of the patterns in 97 and 98 image https cloud githubusercontent com assets 120485 3943035 cadcadc0 2584 11e4 8a47 5abe1402cda5 png >>>css
pattern icon inputs issue by johnonolan https github com johnonolan saturday aug 16 2014 at 20 08 gmt originally opened as https github com tryghost ghost ui issues 97 inputs should support optional icons prefixing their value this should work just like the bootstrap equivalent and look like this image https cloud githubusercontent com assets 120485 3942946 e0066510 257f 11e4 9aea fb262f50d73c png should be possible to apply to tags sketch3 file http cl ly x4hn once implemented this pattern should be applied to ghost signin and subsequently styles in `auth scss` layout should be replaced the end result should be that the login page inputs look identical to how they did before but the base markup uses this new standard pattern >>>css
implement button loading style issue by johnonolan https github com johnonolan thursday jul 17 2014 at 09 29 gmt originally opened as https github com tryghost ghost ui issues 71 let get rid of the pardon me fucking horrendous button style that exists right now when an action is pending where the button goes dim inactive but still has hover state but doesn do anything can we bring over the button loading spinner from ghost org and use that instead >>>design
first pass on new importer ui issue by johnonolan https github com johnonolan wednesday jun 25 2014 at 10 39 gmt originally opened as https github com tryghost ghost ui issues 47 this probably needs more discussion spec just starting point for the ui sketch3 file http cl ly wffg image https cloud githubusercontent com assets 120485 3384127 a9d2e9d6 fc54 11e3 81b1 867aee9de41e png image https cloud githubusercontent com assets 120485 3384132 b333fae2 fc54 11e3 9e68 005aa3db6e7c png image https cloud githubusercontent com assets 120485 3384136 c04693c0 fc54 11e3 92b3 0177572800ec png image https cloud githubusercontent com assets 120485 3384144 d286cde8 fc54 11e3 95dc 8c94b2cbe4db png >>>css importer
tag management ui issue by johnonolan https github com johnonolan friday jun 13 2014 at 09 26 gmt originally opened as https github com tryghost ghost ui issues 37 image https cloud githubusercontent com assets 120485 3268389 37406c26 f2dc 11e3 8556 4f7b4782e0a5 png image https cloud githubusercontent com assets 120485 3268400 55870c3a f2dc 11e3 8b07 128091ff85fe png this is the design for the first pass at the tag management settings screen this should be new list component it should load 20 30 lines at time with infinite scroll when the search button top right is clicked it should expand like so image https cloud githubusercontent com assets 120485 3268426 ab124de0 f2dc 11e3 86fd a0001b7c0cc5 png this should support fulltext search filtering of the tag list the popup modal component can be heavily based on use the same styles as the post settings menu from 36 sketch3 file http cl ly w3jc >>>css feature
edit user ui issue by johnonolan https github com johnonolan saturday may 24 2014 at 10 26 gmt originally opened as https github com tryghost ghost ui issues 33 related to 21 the ui which all admin or higher users can see when they click into user profile sketch3 file http cl ly vijy key points back button user settings button dropdown role selection dropdown it would also be nice to experiment with some ios7 style animations when moving between the user list and individual user profiles image https cloud githubusercontent com assets 120485 3074228 3fa8b6fc e32d 11e3 9bc9 c240240f8be0 png image https cloud githubusercontent com assets 120485 3074230 5dd208ea e32d 11e3 9a50 63efaa46ddc0 png >>>css
epic ghost ui refactor issue by pauladamdavis https github com pauladamdavis wednesday may 21 2014 at 14 56 gmt originally opened as https github com tryghost ghost ui issues 31 ghost ui is undergoing complete rewrite with the aim of making it far more modular than it currently is the ultimate goal of this rewrite is not to make another ui library to be used all over the web but to make ghost ui easier to work on simpler to learn especially when ghost gets apps we have separate issues covering different aspects 3921 css refactor 3922 javascript refactor 3923 ember components alongside these we also have few other things to add introduce as the refactor progresses introduce modernizr add mechanism to detect the approximate internet connection speed functional tests for js consistency tests for css >>>css ember epic
part epic ember components issue by pauladamdavis https github com pauladamdavis wednesday may 21 2014 at 14 43 gmt originally opened as https github com tryghost ghost ui issues 30 as part of complete refactor of ghost ui everything is getting re worked below is the structure we have decided upon and acts as checklist for when each part if completed any suggestions on anything ember related be it technical or not are most welcome here dropdown button dropdowns input groups only allowing text an icon navs navbar pagination inc prev next links labels badges progress bars panels >>>ember
part epic css refactor issue by pauladamdavis https github com pauladamdavis wednesday may 21 2014 at 14 25 gmt originally opened as https github com tryghost ghost ui issues 28 as part of complete refactor of ghost ui everything is getting re worked below is the structure we have decided upon and acts as checklist for when each part if completed any suggestions on anything css related be it technical or not are most welcome here normalize variables mixins animations icons grid system typography code tables forms images helper classes note css for ember components should be written alongside the markup js for each component >>>css
permalinks ui issue by johnonolan https github com johnonolan thursday apr 17 2014 at 12 43 gmt originally opened as https github com tryghost ghost ui issues 24 related to https github com tryghost ghost issues 1631 functional implementation sketch3 file http cl ly v3cw there are couple of components to this bootstrap style popover which appears on hover this should be the default style for all popovers dynamic input with variables totally stole this from squarespace so it worth having look at how their implementation works image https cloud githubusercontent com assets 120485 2731445 bef43b3e c62c 11e3 979f 9afc39bfd3ff png >>>css
about ghost page ui issue by johnonolan https github com johnonolan thursday apr 17 2014 at 09 33 gmt originally opened as https github com tryghost ghost ui issues 23 new about page inside ghost admin nb this should simply be the last item in the settings nav menu not the first as shown in this mockup sketch3 file http cl ly v3dd the contributors should be pulled from the the github api filtered by time eg top 20 contributors between dec 2013 and feb 2014 whatever the release period was for the current release user documentation button should go to http docs ghost org get help button should go to https ghost org forum that latest version should be the latest version in the very very last line of text ghost should be linked to https ghost org and ghost foundation should be linked to https ghost org about mit license should be linked to https github com tryghost ghost blob master license none of the links in the footer text should have any styling by default and should get text decoration underline on hover image https cloud githubusercontent com assets 120485 2729983 ed7b56b0 c611 11e3 9856 a795adc5d341 png >>>css
ghost email template issue by johnonolan https github com johnonolan wednesday apr 16 2014 at 14 22 gmt originally opened as https github com tryghost ghost ui issues 22 currently we send ghost system emails in plaintext that shit cray let bring in the email template from ghost org and beef it up to be responsive this will be needed for 21 >>>css
ghost editor swap fonts to make the best of typography issue by erisds https github com erisds monday mar 10 2014 at 11 07 gmt originally opened as https github com tryghost ghost ui issues 12 ghost older versions of ghost had no support for curly quotes see how old ghost casper theme renders some text with single and double quotes in the title and body text straight http puu sh 7q167 png the latest version of ghost has rudimentary curly quote support it doesn always get it right but it looks better than it did curly http puu sh 7q149 png yay curly quotes the titles are open sans which have sort of fancy quotes and the body text is noto serif which has nice curly quotes so blogs are looking better but the editor is still not quite right master here how the ghost editor looks today on master the same version that rendered curly quotes on the frontend in casper master http puu sh 7q0g6 png what going on in the left pane the font is the stock monospace font it should be inconsolata and the plan was always to add inconsolata to the admin via google fonts in the right pane the font is the sans serif font open sans for both titles and body text neither of these two fonts render curly quotes in typographically awesome and curly way in the current implementation of the editor the left pain retains straight quotes but the right pane has curly quotes but this doesn quite match up with what you see on the frontend obviously all themes will have different fonts some with awesome curly quotes and some without but shouldn the editor default closely match casper have noto serif body text with inconsolata as mentioned previously the left pane in the editor is supposed to be inconsolata if add it as was intended here what you get inconsolata http puu sh 7q109 png what going on in the left pane the font is now the intended inconsolata font the right pane is still all open sans however inconsolata straight quotes look like two right curly quotes so it looks broken even though it isn therefore recommend that the left pane be changed to monospace font that looks better there is one called cousine https www google com fonts specimen cousine which supports an extensive number of character sets which people may wish to add via an app language pack thing >>>design editor
create new standardised form framework issue by johnonolan https github com johnonolan tuesday feb 25 2014 at 07 36 gmt originally opened as https github com tryghost ghost ui issues the current forms implementation is bit of mess there are few key problems with it which like to have look at the label as an input wrapper style while valid and imo superior is significantly more complicated to get consistent cross browser experience with so we should move to something more like form group left aligned labels are really complicated to get consistent visual design with across different layouts and different viewport sizes they are also significantly slower http uxdesign smashingmagazine com 2011 11 08 extensive guide web form usability for the user to read switching to top aligned should be lot easier to work with >>>feature
replaces sendmail with direct closes 1538 rips out sendmail adds direct updates nodemailer to changes unit tests for mail changes integration tests for mail adds api tests for mail>>>server
add checks for packages and contentpath to startup refs 3864 make sure that require is able to resolve all dependencies listed in package json if packages are missing halt the bootstrap process and display an error and help message for user check that contentpath and its subdirectories exist with the correct permissions check sqlite3 database file is set for read write access >>>blocker server
missing api permissions permissions for the configuration api were removed in 3909 because it was required that we have system for migrating them 3910 once 3910 is in completed the permissions should be re added to the configuration api endpoint >>>api later permissions
permissions migrations at present we have no system by which permissions can be added to the `permissions json` file and safely migrated we need to design system which allows permissions to be added so that we can add new permissions for the configuration api apps api and any other endpoints which we need to create it is expected that if we create situation where permission needs to be changed or removed that the migration system would have to be updated to manage those cases at present permissions migrations are triggered as part of the migration system which requires that the database version be bumped whether or not this should be required in future is up for discussion if we continue to use the version bumping to trigger migration then we need to protect the schema js fixtures json and permissions json files from being updated without version bump in some way possibly via simple test which checks the content >>>api data fix_wanted later
revert the addition of configuration api permissions pr 3841 added permissions for the configuration api but unfortunately we don yet have migration system that will allow us to add these permissions to existing blogs and so the new permissions will only work on brand new blogs because adding migration system for permissions is non trivial see 3910 and the api is still behind auth we re going to temporarily remove the permissions to be re added later once we re able to add them safely >>>api
custom template files for custom tags in similar fashion to being able to have custom template files for page depending on the page slug have similar use case for custom templates depending on the tag used this will open even more doors to the power of tags for organising and displaying content tried to follow the code style structure which exists already first contribution though so let me know if ve missed anything >>>themes
output structured data in ghost head nb this issue is currently wip specification document in order to make ghost more useful as blogging platform it should be outputting structured data which allows published content to be more easily machine readable this allows content to be easily discoverable in search engines as well as popular social networks where blog posts are typically shared there are couple of contexts for this the most important of which are listed below along with proposed implementation structure one additional consideration is that it should be possible for apps to modify and extend this output eg disqus app might want to add `commentcount` property and social apps might want to add `interactioncount` values as part of this issue privacy md should be updated with details of what data is being output and why there should also be flag available for config js which disables automatic structured data from being output at all comments additions or suggestions on the proposed structure below are welcome tasks update privacy md johnonolan add flag to disable output in config js implement schema org output implement open graph output implement twitter cards output implement hooks to allow apps to modify output schema org with the news http searchengineland com goodbye google authorship 201975 that google is ending support for authorship came the followup of renewed focus https plus google com johnmueller posts hzf3kdp1dm8 on schema org microformats until now we ve been shy to adopt this despite multiple pr to add it to casper mainly because it makes horrendous mess of the markup and no clear indication that it was focus of major search engines now there clear focus from major search engine and ve also recently discovered the json linked data http www seoskeptic com json ld google knowledge graph schema org seo json ld https en wikipedia org wiki json ld format which means that not only can we have uncluttered markup but we can also keep the structured data abstracted from the theme meaning ghost not the theme does the implementation good news all round the following is proposed sample ouput in ghost head on post hbs following the schema org article http schema org article and blogposting http schema org blogposting specifications should be tested against http www google com webmasters tools richsnippets open graph the below represents proposed output for post hbs in ghost head based on the open graph protocol http ogp me specification nb the `og author` value has been deliberately omitted due to conflicting information http surniaulula com 2014 03 01 pinterest articleauthor incompatible with open graph on how it should be correctly used based on this it is probably more useful not to specify it explicitly rather than provide invalid data to one or more services should be tested against https developers facebook com tools debug and https developers pinterest com rich pins validator twitter cards the below represents proposed output for post hbs in ghost head based on the twitter cards https dev twitter com docs cards specification should be tested against https dev twitter com docs cards validation validator nb all image meta tags should be conditional on whether the post has an image >>>blocker feature themes
uncapitalise middleware should not affect tokens no issue whilst testing on next noticed trying to signup didn prepopulate email addresses any more and this is why anyone think of anything else this ought not to touch it doesn touch query params just paths and now it doesn touch reset or signup tokens >>>blocker bug
feature post cover images long awaited feature with the new psm https github com tryghost ghost issues 3822 design comes the ui for uploading post cover images this uses our existing upload dropzone to store an image to be saved in the `image` field on the post model as well as making it possible to upload an image some work will need to be done to expose this to themes in nice way image https cloud githubusercontent com assets 120485 3943035 cadcadc0 2584 11e4 8a47 5abe1402cda5 png add the uploader component to the psm store the path for the uploaded file in the `image` field in the `post` table reimplement the content words functionality 3884 http github com tryghost ghost issues 3884 helper for themes is then image which should just work >>>feature media settings
reimplement the content words functionality there is reasonably well known bug in the theme api whereby if you have an tag as the first thing in your post content words will output it also works for and and possibly other embedded content tags believe this is due to bug in downsize https github com cgiffard downsize that has long since been fixed downsize has also received some new features and we would like to upgrade to benefit from these furthermore the proper feature cover image for posts functionality is to be implemented soon so in order to deprecate the hack in favour of the true feature we need control over the code and how it works therefore we want to move this feature into ghost to do this the content helper should be changed such that if the `words` option gets passed as value we run our own html parser which grabs the first tag from the post and outputs it if it is is an image tag this feature should result in identical results to the existing implementation via downsize further tests for various tags is will be needed and the pr should provide the before and after output >>>themes
show warning dialog if session has ended in editor closes 3839 display warning modal in the editor routes if the user is logged out due to re authorization problems this provides chance to copy any unsaved content before being sent to the signin page to log back in publish button https cloud githubusercontent com assets 214142 4024349 e83ad824 2bc4 11e4 8b68 edfb71bf1523 gif >>>blocker
password forget and reset password hey have the problem that klick on the reset link on my mail but if type my new password an click on reset password allways get invalid token so can use my ghost blog now use linux server with nodejs 10 31 and ghost 0>>>blocker bug
translations zh tw update translation of zh tw>>>docs
makes the ghost application more express middleware friendly refs 827 moves index to use ghost in similar manner to how someone uses ghost as an npm module allows ghost to be cleanly mounted on another express application on any arbitrary endpoint all you need to customize is the mount path built this on top of my 3866 pull request hence the second commit in index` instead of starting ghost by doing you can swap it to voila >>>server
delete tokens before deleting user fixes 3750 updated tests to create tokens for one user this caused the tests to fail for mysql exposing the bug delete user tokens along with posts>>>blocker
better error handling when starting ghost there are number of things that can go wrong when starting ghost which are currently not handled very well all of these things need catching and handling with nice error messages styled using our error logging tool in the errors module `errors logerror error context help which outputs something like ghost errors http puu sh b4psj png if any of these are hard to explain how to fix we create and link to an article in support ghost org tldr bad database configuration invalid content path other config `npm install` failures bad node version sqlite readonly and other permissions errors long list bad database configuration originally from 3849 misconfigured config file produces very opaque errors for example if database connection filename is incorrectly set sqlite complains with `cannot read property cid of undefined this error also appears if the mysql database does not exist or essentially if the database configuration is valid but broken this possibly needs looking at in bookshelf knex but we should catch these errors and provide more sane one additionally providing the wrong name for `pg` results in weird errors one reported via twitter https pbs twimg com media bu2ke8tcqaacqbp png and another on github https github com tryghost ghost issues 3509 issuecomment 50886603 we should validate that the client is one of `sqlite3` `mysql` or `pg` and provide sensible error if it isn perhaps even warning if it pg saying support is unofficial invalid content path other config originally from 3849 if paths contentpath is incorrect cryptic `casper not installed` error is thrown if `paths contentpath` is set we ought to test that that path exists and that it contains the folders that we expect if it doesn again we should give clear error message `npm install` failures originall from 3509 on fresh copy of ghost if you run npm start production before running npm install production there is no useful messaging indicating why things have failed any missing module produces the following error this is obvious to ghost devs because we know what `when` or any other module is to anyone new this is baffling it needs catching and replacing with clear message stating that npm install has failed bad node version having the wrong node version has always failed during `npm install` with unclear messaging believe that the main module we have which causes this `sqlite3` now handles this better but sqlite3 supports node 11 13 which ghost does not yet we have an error message which should appear if you get as far as starting ghost this needs testing sqlite readonly and other permissions errors from 3687 when ghost starts we should detect if we have permissions to write to content data` and content images` if the database client is `sqlite3` we should also specifically check if we have permissions to write to the db file if the permissions are wrong we should output sensible error >>>server
redirect uppercase routes to lowercase version fixes 3857 add express uncapitalize so that mistyped uppercase urls always redirect to their lowercase equivalents change the ghost route to regex just so it consistent with other routes in the file>>>blocker
authored permalinks feature since ghost is now supporting multiple authors it would be nice to have an option in the admin to support authored permalinks which would make permalinks based on the author of the blog entry my ghost blog com authorname getting started >>>feature
odd behaviour when ghost contains uppercase there some weird behaviour going on purely with the ghost route when you include one or more uppercase letters reproducing logout correctly redirects to ghost signout logout isn matched by the admin route so gets picked up by the catch all `single` frontend route doesn match post and then 404s assuming you re logged out ghost redirects to ghost signin ghost gets incorrectly matched by the admin route but doesn get `isadmin` set because of the capitals and then ends up rendering weird blank page why on earth is this the only route that gets matched with any combination of upper and lower case it doesn happen for any other route is it the star `router get ghost baffled technical details ghost version >>>blocker bug
unhandled error in tests screen shot 2014 08 22 at 33 17 pm https cloud githubusercontent com assets 214142 4016365 a70ab78a 2a33 11e4 9b7a c25ddc4a60fc png started appearing after 3815 >>>tests
importer sanitize uuids closes 3844 before importing all data is checked for incorrect uuids if check fails data is sanitized and outfitted with correct uuids scaffolding allows for easy implementation of additional sanitization should that be required in the future test included >>>blocker
add the new body classes this is the first step towards implementing the final outcome from the massive discussion on 1697 it adds all the new body classes we need in order to make them match the proposed column in the context table https github com tryghost ghost wiki context aware filters and helpers the table shows the full details of what would be output in each case it will require 2597 to be completed in the future to remove the old classes after we ve given theme developers chance to update the changes are as follows adds `paged` to eventually replace `archive template` adds `page template `to eventually replace `page` and `post template` on pages changes custom page template class to be `page slug` instead of `page template slug` johnonolan have one remaining concern with this which is that post and page will not share body class at all posts get `post template` and pages get `page template` is this definitely ok >>>themes
api response support for warnings as well as errors this was originally comment on 3229 we have work around in place to resolve the issue but we need to revisit it the underlying problem is that when making an api request to invite user any errors from sending the email causes the api to respond with 500 error and only return the error in the response on the frontend the result is that ember doesn get new user added to its store but the user was added to the database we just didn email them the new user is getting created successfully so the response should probably be 201 the error could be included as warning header http www w3 org protocols rfc2616 rfc2616 sec14 html sec14 46 or perhaps we should include both the successful object and the errors in the response which ought to be downgraded to warning an orange notification on the client side that is suggesting we change the api to support returning 200 201 status with normal resource response body along with either an errors object or along with warning headers which ever of the we use the result should be success with warnings rather than failure with regard to which is the correct way to do this json api seems to now specify an errors object http jsonapi org format errors which matches what we have but it does explicitly state that the `errors` top level object should not be returned with another top level object json api does not seem to make any mention of using warning headers so this method would at least not be direct contradiction of the standard >>>api
excerpt outputs unwanted contents description when have short post with some tag in it those scripts are rendered as plain text on the index page by excerpt live demo http www steinwaywu com please look at the blog post one liner to find out available ports in etc services where included some javascript readme parent parent remove to delete the readme file from an embedded gist environment running on ghost pro with custom theme based on casper the customization only involves adding few more javascript library suggestion probably should add some pre processing to filter out unwanted stuff scripts mathjax equations >>>themes
bug import validation isuuid failed for uuid issue summary ve just exported my content directly from my ghostpro blog which assume must be running v0 and ve just tried to import it into fresh local install of the ghost stable branch none of the posts get imported and they all spit validation isuuid failed for uuid error steps to reproduce export content from ghostpro v0 import into local ghost install v0 technical details ghost version stable v0 client os os server os os node version v0 10 browser chrome database sqlite3>>>blocker bug importer
bug redirect to signin for 401 error should not happen if editor has unsaved content if you become logged out in the middle of editing post hitting the save button will result in 401 error the 404 error causes the editor to redirect away to ghost` and then ghost and then to ghost signin these requests are made to the server and this results in the user landing on ghost signin because they are not signed in this transition redirect should be prevented if the editor is dirty has unsaved changes the error notification should appear and the attempt to transition away should cause the warning modal to display http puu sh b0i3j png the warning modal should prevent the transition unless the user opts to leave the page steps to reproduce start editing post add some content but don save go into your database and delete your access token leave the server running press save technical details ghost version master latest commit b92f201 >>>blocker bug editor
fix broken status code closes 3779 added custom error classes for oauth errors bug was caused by oauth2orize error classes added basic tests for authentication token` endpoints>>>blocker
shortcuts bugs ctrl does not work ``code`` of inline code display error in preview pannel technical details ghost version client os windows server os windows node version 10 26 browser chrome 34 1847 131 database sqlite>>>i18n
replace when with bluebird currently has two commits one for the bulk of the tests conversion and one for the rest will squash if when this is ready >>>server
database migration to fails for pg database when migrating my pg database from to consistently get the following error am deploying to heroku using the branch >>>bug
feature new post settings menu the new psm design is being constructed here https github com tryghost ghost ui issues 99 markup is here https github com tryghost ghost ui blob f7c1dee7880877204b901a4729d05d39878788ab docs psm html it looks like this image https cloud githubusercontent com assets 120485 3943035 cadcadc0 2584 11e4 8a47 5abe1402cda5 png and works like this http cl ly items 0q3y1c3w3o461k02473f psm gif the new menu is more complex that the old version as it has extensible sub screens there will likely be number of child issues to implement the advanced functionality in ember as well as to implement each of the new features reimplement current psm in new form 3936 add sub menu functionality 3937 post image upload 3885 meta data screen 3939 dry up closing of post rendering https github com tryghost ghost pull 3965 issuecomment 55117703 these sub issues are ready to start >>>ember epic feature settings
prev next links for ghost head closes 685 now that we have pagination meta object we can implement seo friendly `next` and `prev` ref links in this implementation works uniformly for anything that supports pagination in the current schema posts tags authors regex should make the implementation future proof for additional pagination>>>themes
post gui update changes as part of the new gui update we are introducing many brand new shiny bugs this issue is intended to cover the things that need some additional tlc ember body classes 3792 this should make the mobile nav menu on the ghost settings work new ember love to handle transitioning between settings views on mobile new ember love on new mobile menu pauladamdavis did first implementation of this here which needs porting in https github com tryghost ghost ui blob gui docs js nav js css bug fix vertical centering on 404 page css bug user profile settings needs to be unfucked johnonolan to provide mockup for how the markdown tab is borked 3813 fix the edit user ui cog icon menu and back button 3925 regression lost settings nav icons ember redux on the back button switching between mobile views on ghost content 4031 remove animated page transitions from mobile settings let keep all new gui related bugs in the list above discussion below check em off as you go fucking poetry >>>blocker bug
epic ghost and i18n project description https github com tryghost ghost wiki planned features ghost is currently pretty much uk based english language only and has barely any features to account for timezones locales languages alphabets keyboard layouts or anything else that isn utc english in either the admin or in themes even the usa folks luck out sorry all this is set to change with full support for multiple locales and languages across the admin and your blog posts throughout the ghost github support for all of these sorts of features is referred to as i18n internationalisation currently ghost effectively doesn work properly unless you re writing in english or something very similar throughout the application from the ember admin to the api and even down to themes there are things missing which make it hard to use ghost if you aren english speaking this issue is intended as placeholder to keep track of all the different places where we know we need to add i18n support so that it becomes possible for anyone to publish content comfortably in their own language and locale i18n for ghost falls into broad categories publish content in your language locale we need to make it possible for anyone to create blog and publish content which is 100 in their language this includes extending theme helpers adding support for non latin standard chars in urls and other files and many other things use ghost in your language locale much less important it would be great for our users if they could have the admin ui appear in their language with tailored layout and specific fonts features and support the following is list of things we know we need to do make possible add support for publishing set user and post language default to the blog language and allow override customisable permalinks where english words are used non latin chars in slugs non latin chars in urls non latin chars when uploading files non latin chars handled by `words` and `characters` features of excerpt content helpers non latin chars in generated heading `id` attributes non latin chars supported fully in editor customisable permalinks for tag author and page urls locale dates in themes moment js language support different plural structures in the plurals helper extensible rules for what constitutes paragraphs and words in the excerpt and content helpers extensible rules for what constitutes paragraphs and words in the editor admin ui translate the admin ui locale dates when entering published at date register different fonts for use in the admin interface and specifically the editor extend the admin interface with layout tweaks for different languages install language packs which provide the translations and layout tweaks non latin chars handled by word count and counters on bio description fields ability to include extra character sets in admin via language packs i18n and apps not all features and support for other languages will exist in core different writing systems require very different layouts and as such it should be expected that if your language is significantly different to english that an app may be required to make ghost work for you the advantage of splitting functionality this way is that we don have to design one ui that works for all languages and writing systems furthermore we don have to bloat the core of ghost with features that will only ever be used by one specific group language packs which add translations for the ghost admin ui could also add layout tweaks better fonts and other modifications to make ghost work just as well for other languages as it does for english >>>epic feature i18n
re implement the tag editing component http puu sh autdw png the tag editing component is one of the more complex pieces of the ghost admin interface and it was largely ported to ember as opposed to rebuilt in more ember fashion unfortunately it is largely broken particularly on mobile and needs bit of rethink the component consists of two main pieces the suggestions popover which uses our ember popover component and believe is working well across all devices and the tag input which really needs some love any attempt to fix bugs with the current implementation promptly results in game of whack mole as other things break believe it needs rethinking and rebuilding from scratch this issue exists as statement of intent that we will rebuild this either on it own if someone feels like taking it on or possibly as part of the work on new editor all known bugs with this component are going to be closed as wontfix against this issue pending the rewrite >>>api blocker ember mobile
post settings no author selection for author closes 3756 the post settings menus option to change the posts author isnt displayed if the user has the author role also fixed some incorrect indentation in the template no actual code change >>>blocker
ember route based bodyclasses we need some special bodyclasses for various view states on the settings ui details as follows if route settings bodyclass should be settings main` if route settings thing bodyclass should be settings view` if route settings thing thing bodyclass should be settings subview` see https github com tryghost ghost issues 3792 issuecomment 53401253 for more specifications >>>ember
display correct new ghost version closes 3790>>>blocker
bug update check reports the wrong version the version output in the update check is the `package json` current version number rather than the new version fetched from the update server this won affect anyone until the next release of ghost but needs fixing steps to reproduce set your version number in package json to be something less than like rc1 start ghost and login to the admin it tells you `0 rc1` is available rather than telling you is available this is bug because technical details ghost version 0>>>bug server
pull the app listen code out of the ghost internals looking at what it would take to convert ghost into something that can be used as express middleware one issue that needs to be tackled is that ghost calls `app listen` internally this code could probably be pulled out of core instead the main ghost `index js` file could carry the responsibility of starting the app you end up with an `index js` file that could look something like this this way any site wanting to include ghost blog as middleware could include `ghost core` and they don have to worry about ports being bound would such change be viewed favorably >>>server
http status invalid grant under certain circumstances `authentication token` returns invalid grant as status code this is weird and wrong believe it may be to do with expired tokens but haven tracked down the exact reproduction steps yet thought raise this now anyway in case anyone else knows if not ll update this issue when figure it out technical details ghost version 5>>>blocker bug
ensure owner role isn downgraded closes 3765 simple api check to ensure that the owner isnt downgraded to different role analog to the cant change your own role check >>>blocker
hide role dropdown on user page if user is owner closes 3764>>>blocker
bug administrators should not be able to change the owner role there is currently no permissions check against admins changing the role of an owner to something lower this means it is possible to end up with blog with no owner steps to reproduce login to ghost as an administrator use the role dropdown which isn supposed to be there https github com tryghost ghost issues 3764 to change the permission to an author click save technical details ghost version 0>>>blocker bug users
bug dropdown should not appear on owner profile page if an administrator logged into ghost and looking at an owner profile should not be able to see the role drop down steps to reproduce log in as an administrator view the owner profile notice the role dropdown technical details ghost version >>>blocker bug users
bug when viewing your profile on iphone navigation sidebar does not close issue summary when viewing your profile on iphone the navigation sidebar does not close as it does when selecting one of the main navigation items in fact there isn any way to close the navigation and there is no way to see the content on the your profile page if you browse to the page from `settings users your profile` it works as anticipated steps to reproduce log into ghost control panel administration with an iphone ipod touch the navigation menu icon touch your name at the very top touch the your profile link the sidebar should close automatically or at the very least it should close when you touch the page peeking out from behind it photo https cloud githubusercontent com assets 747085 3890546 f06b0658 221f 11e4 90c9 ad903c6f620c png technical details ghost version master latest commit b6507bed9be699e039e127130b950814c7b79974 client os ios server os centos 10 node version v0 10 24 browser mobile safari for iphone database sqlite3>>>bug mobile
revoke access token oauth access tokens are stored in the database and are not revoked when signing out this is not covered by the original oauth specification the behaviour is similar to what you experience when using session cookies and close your browser the cookie still exists on the server but is removed from the browser and you can access server resources anymore rfc 7009 https tools ietf org html rfc7009 adds new endpoint to the oauth specification and allows to revoke access and refresh tokens that are no longer needed `ember simple auth` has added the ability to revoke tokens in https github com simplabs ember simple auth issues 228 it seems like we only need to add configuration item to enable token revocation in the client on the server new endpoint ghost api v0 authentication revoke` needs to be implemented >>>api
bug author dropdown should not appear for authors issue summary when logged in as an author and editing post it is possible to change the author of your post to someone else thus losing the ability to edit it steps to reproduce creating new user with role author and log in as that user create new post set the author of that post to be someone else 2014 08 12 12 41 03 https cloud githubusercontent com assets 3869932 3886439 fa924c4e 21da 11e4 8556 1b7c58617feb png saving failed there was an error saving this post you do not have permission to edit this post technical details ghost version master latest commit b6507be client os ubuntu 14 04 server os ubuntu 14 04 node version v0 10 24 browser chrome 35 1916 114 database sqlite>>>blocker bug
can delete user that has already logged in due to failed fk constraints after upgrading to created test user and logged in then tried to delete it and eventually after 60 seconds got 504 from nginx message in the ui and the ui was broken until refresh examining the error logs found the following potentially unhandled rejection typeerror object error er row is referenced cannot delete or update parent row foreign key constraint fails `ghostdb` `accesstokens` constraint `accesstokens user id foreign` foreign key `user id` references `users` `id` has no method indexof after manually cleaning out the accesstokens table for similar error for refreshtokens potentially unhandled rejection 19 typeerror object error er row is referenced cannot delete or update parent row foreign key constraint fails `ghostdb` `refreshtokens` constraint `refreshtokens user id foreign` foreign key `user id` references `users` `id` has no method indexof finally after cleaning out refreshtokens was able to delete the user without issue just general observation there are fks on these tables and not other tables that reference user posts permissions users roles users bit inconsistent >>>blocker bug
error notification if send test mail returns 500 closes 3728 if the mail config is broken the ajax call will fail with 500 and not return an error this change catches 500 and wraps the error in notification >>>blocker
release candidate final testing there is now fourth release candidate of https github com tryghost ghost releases tag rc4 published and ready for final testing if you find any bugs please raise them as separate issues according to the contributing guidelines https github com tryghost ghost blob master contributing md thank you at this stage in the release cycle only critical bugs will be considered for last minute fixes otherwise this rc represents the code we expect to release tomorrow please do take it for spin and see if you can break it >>>qa tests
send test email doesn show error notification issue summary test email doesn show an error notification if the email configuration is broken steps to reproduce make sure your email configuration is broken try to send test email no notification is shown technical details ghost version master latest commit 474b9367dd34c36e92ed39bbc678935a0c296eb1 client os mac os 10 server os vagrant node version 10 26 browser chrome 36 1985 125 database sqlite>>>bug
author value in psm not updated issue summary the author value in the psm on the content page is not updated steps to reproduce log in and make sure that there are posts that are written by different authors go to the content page open the psm for the first post cog in the preview author is correct select the second post open the psm for the second post cog in the preview author didn change technical details ghost version master latest commit 474b9367dd34c36e92ed39bbc678935a0c296eb1 client os mac os 10 server os vagrant node version 10 26 browser chrome 36 1985 125 database sqlite>>>bug
bug no new user button on android issue summary on users page there is no way to add user if using android button is missing steps to reproduce go to myblog com ghost settings users this is bug because the button is required for multi user creation technical details ghost version rc3 client os android browser samsung galaxy default browser >>>bug mobile
author slug is not dynamic followup to https github com tryghost ghost pull 3723 blog url is supposed to be the actual blog url it may be helpful to have the blog url helper available in admin >>>bug
add asset helper for client side the server currently has an asset helper that lets us get around not knowing what subdirectory ghost will be put into when we hard code our images ghost assets img some image png` vs somesubdirectory that the user specified ghost assets img some image png` at the moment the client is getting around this using the `ghost paths` util which just has function that we use from our js side of things it would be great if we could also have tool to use in templates so that we don have to bind everything through model or controller first bring this up because it blocking 3155 and hoping to shirk some work off onto someone else d>>>ember
ghost importer multi user post authors thinking through how the importer now works with multi user it occurs to me that the multi user implementation of the importer is incomplete when you import posts into wp it detects all the authors and asks who in the new system you want to associate them with our importer isn quite smart enough yet to have this sort of step process so all of that marrying of what belongs to what is done programmatically we do this for user roles and we do it for post tags but it is not done for post authors at present ghost will set the author id to be whatever id the importer provides the users might not even exist yet as the importer creates users after posts this means that anyone trying to do multi user import is going to end up with posts that don have an author which shouldn be possible this is pretty bad bug it going to cause people to end up with blogs in horrible states the fix is going to be bit of big thing to have to crowbar in at this late stage but without it migrating to mu is going to be nigh impossible significantly reducing the point of releasing it >>>bug importer users
ugly debug tools got really ugly ugly debug tools are suddenly looking really weird http puu sh alhla png there shouldn be general tab in the side bar or the title at the top this isn major but it is bit broken looking which won give people confidence to try importing >>>bug
translations pl translation of installation linux md into pl>>>docs
release candidate ready for testing there is now third release candidate of https github com tryghost ghost releases tag rc3 published and ready for testing if you are able to do some testing this would be much appreciated doughnut cake if you find any bugs please raise them as separate issues according to the contributing guidelines https github com tryghost ghost blob master contributing md thank you if you complete successful testing please let us know by adding comment here detailing what you tested and on what environment covering relevant things like os browser prod dev mode database etc some important areas for testing aspects of ghost not often used during development production environment mysql ghost as npm module sub directories the update process important things that have changed every single detail of the admin multi user features invites signup etc permissions of the various user roles editing on mobile so much more be here til christmas listing it thanks balloon balloon >>>qa tests
tests ghost signup fails properly nan this isn breaking tests but is worth looking into see line 2138 https travis ci org tryghost ghost jobs 32019574 l2138 screen shot 2014 08 08 at 55 21 https cloud githubusercontent com assets 1207005 3858250 0e2826e2 1f0c 11e4 9007 f1bc3a2de1ec png >>>tests
missing active theme prevents the admin from loading if you remove the active theme from blog the admin panel can not be served and therefore the theme cannot be switched steps to reproduce remove the theme that is currently active on your blog restart ghost attempt to load the admin the theme being missing should only ever interfere with the frontend of the blog loading never with the admin panel technical details ghost version master >>>bug themes
model validation ought to only validate changed properties following on from 3658 the short term fix applied in 3688 requires further update to be done post release we need to change our validation system to only validate those properties which are being changed as result of the save this is one step towards introducing patch update support as it was actions like login which do change model properties but not an entire model are prevented if any property on the model doesn pass validation in the case that we make validation more strict we shouldn prevent the update of other properties because different property on the model no longer passes the validation method currently passes the entire model to be validated but does have access to an object containing only the changed properties using this instead of the whole object will result in partial but safe validation of the object >>>data
find smarter way to handle sqlite readonly errors have added an override to `errors logerrors to make it clear to user that `sqlite readonly` error is probably caused by wrong permissions it would be great if we could come up with smarter way to deal with these kind of errors when refactoring error handling >>>server
after clicking invitation link filling out form and clicking create account nothing happens summary of issue after clicking invitation link filling out form and clicking create account nothing happens steps to reproduce invite 20 users all with unique email addresses click one of the links in the emails fill in full name and password and click create account observed result the create account button turns the darker green but nothing else happens in the ui new user test https cloud githubusercontent com assets 7192387 3853720 310061a2 1ecb 11e4 8969 42b1e326197f gif there are no errors in the logs but here are the logs from right before https gist github com andyboutte a9ee80a0033f3a649cb4 additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc2 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
duplicate email addresses are allowed when inviting users summary of issue duplicate email addresses are allowed when inviting users steps to reproduce invite user with an email address and click send invitation now invite another user with the same email address and click send invitation now observed result screen shot 2014 08 07 at 11 27 49 pm https cloud githubusercontent com assets 7192387 3853470 2738ba26 1ec5 11e4 8386 8983df7282b8 png additional information user role administrator editor author owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc2 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
invitation sent message closes invite new user window summary of issue invitation sent message closes invite new user window steps to reproduce click new user fill in email address and click send invitation now immediately click new user observed result when the invitation is sent it closes the new user window additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc2 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug ember
long name makes clicking on settings tab difficult summary of issue using the maximum number of characters allowed for your name when signing up for ghost makes it pretty difficult to click on the settings tab steps to reproduce when signing up for ghost use the maximum number of characters for your name observed result screen shot 2014 08 07 at 11 09 51 pm https cloud githubusercontent com assets 7192387 3853367 d527f960 1ec2 11e4 9a5d 74cc86b61126 png additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc2 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
bug jquery js not include in theme issue summary when use ghost foot it returns but file not found when go to core built public` see only `jquery min js` when renamed it all works fine steps to reproduce go and use theme which requires correct `jquery js` for work and it not work technical details ghost version rc2 latest commit a65cc15e569643a16e79c88987d3f6fdd2603145 client os mac os 10 server os centos x64 node version 10 30 browser chrome 36 1985 125 database sqlite>>>bug themes
bug can leave settings general page after making changes saving issue summary when you make change on the settings general page and then hit the button to go to the home page without saving there is no popup and none of the changes were saved if you make change and click on the content tab though and then go back to the settings page without refreshing the option will still be clicked like it saved but on refresh it will go back to its original state here is an example of this settings save https cloud githubusercontent com assets 4715098 3852765 60e1640c 1eb2 11e4 8cf6 794b64b9a3ff gif it should either save automatically or pop up some alert like on the posts to let you know you are leaving without saving with lot of other changes like the static page toggle and ability to change the slug being automatic you get in the habit of just clicking and expecting it to change and do not realize that it didn save until later steps to reproduce go to settings general make change and then click on the home button go back and the change will not have been saved and for it to look like it worked go to settings general make change and then go to the content tab click on the settings tab now and you will see the change is still there refresh the page and it will go back to the way it was without having saved the change technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>settings
bug invite many of the same user at once issue summary this could be related to my last issue 3672 but if you hit enter as it is hanging you can then click on the send button and create 2nd user you can also just sit there pressing enter as many times as you can to create many users all with the same username invite click https cloud githubusercontent com assets 4715098 3852575 9f2f2636 1ead 11e4 80c0 bcffdfa2c3b6 gif steps to reproduce enter in the new user email address press enter rapidly and many users will get made until dialog is gone technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug ember
bug send user invite needs to close faster on pressing enter issue summary when inviting user if you hit enter the dialog box just kinda hangs there it should really close immediately dialog hanging https cloud githubusercontent com assets 4715098 3852540 e9f8e9aa 1eac 11e4 9c0f 8836f7166ebd gif steps to reproduce invite new user and hit enter the box will sit there for second or two technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug ember
bug pagination can be set to and no pagination will happen issue summary similar to 3641 but in the other direction you can set pagination to and then it looks like no pagination will happen it will just load all the posts steps to reproduce go to blog com ghost settings general change pagination to save and it will load all the posts on the home page technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug
bug ghost admin really long post title errors out but says update post issue summary when you have super long title and try to publish it will say that it is too long but the publish button instead of changing back to save draft it stays at update post like it went through long title error update https cloud githubusercontent com assets 4715098 3852250 7f5f7b6e 1ea6 11e4 826b a0c399d537db gif steps to reproduce open up new post and create super long title try to publish the post and it will throw the error the button will say update post instead of save post technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug ember
bug ghost admin really long title shows blank text areas issue summary when you have super long title if you go back to the beginning and start to scroll to the right you will see break areas where the text should be if you do anything to change the title it will get redrawn but it is blank until that happens long title breaks https cloud githubusercontent com assets 4715098 3852205 b5505c1c 1ea5 11e4 8576 af374677a145 gif steps to reproduce open up new post and create super long title click off the title to go back to the beginning put mouse in the title and hold down the right arrow key to scroll right it will start to show the blank areas as it refreshes technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug ember
bug mobile admin psm flashing issue summary device iphone ipad 4th gen sometimes when closing or opening the post settings menu it will flash open and closed on iphone and ipad when in the ghost admin editing the post settings if you change who the author of the post is and then try to close the menu it will close and then flash once psm flashing1 https cloud githubusercontent com assets 4715098 3848385 6e9f489a 1e6f 11e4 9724 d4873c90357a gif have also been able to get the flashing to work from the psm inside post editor as well but only with my iphone this one doesn need any data change it will flash on opening psm flashing2 https cloud githubusercontent com assets 4715098 3848390 713412a2 1e6f 11e4 8a6f f4c7ba6186eb gif steps to reproduce go to url com ghost click on post and then click on the psm cog icon change the author and click on the cog again to close the menu technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug mobile
bug mobile admin forgotten password flashes then dissappears issue summary device iphone if you go to the forgotten password screen you can see the form there for split second and then it disappears and there is just nothing then if you scroll up and down it will appear but sometimes will go kinda grayed out and then come back to normal forgotten disappearing https cloud githubusercontent com assets 4715098 3848179 4f8f1c52 1e6d 11e4 95dd 831a1dfa83d7 gif steps to reproduce go to url com ghost signin on an iphone click on forgotten password you will see it for split second and then it will dissappear technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug mobile
bug forgotten password keeps email filled in issue summary if you go to forgotten password and type in your email when you hit send and it kicks you back to the home screen if you hit forgotten password again your email will still be populated forgotten password https cloud githubusercontent com assets 4715098 3847986 180d701e 1e6b 11e4 8c1b f7fcb192ca62 gif steps to reproduce go to url com ghost signin and hit on forgot password fill in email and hit send click on forgot password again technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug
bug mobile admin changing orientation results in layout problems issue summary device ipad 4th gen on the sign in page and some subsequent pages like the post page if you change the orientation of the ipad it looks like it is almost duplicating the right side of the page the content and settings page seem to not have problems but the post and sign in page do hard to explain via text so here are some pics img 0133 https cloud githubusercontent com assets 4715098 3847848 a8b6773e 1e69 11e4 8816 eebd903036e1 png img 0131 https cloud githubusercontent com assets 4715098 3847850 ab0c5670 1e69 11e4 8ea0 0b16eb7b4f27 png img 0132 https cloud githubusercontent com assets 4715098 3847852 ad929670 1e69 11e4 8fc1 70ef532cf7f4 png img 0130 https cloud githubusercontent com assets 4715098 3847854 af907974 1e69 11e4 80b9 5969df1890fb png img 0134 https cloud githubusercontent com assets 4715098 3847861 bbcea2a6 1e69 11e4 9baa 6bfc00343758 png steps to reproduce go to url com ghost signin or the post editor change the orientation and you will see the layout get messed up technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug mobile
bug mobile admin sign in alerts covered by prev next tab bar issue summary device ipad 4th gen the prev next tab bar that shows up at the bottom of the page when typing in username and password covers up the there is no user and your password is incorrect alerts problem in both landscape and portrait mode img 0128 https cloud githubusercontent com assets 4715098 3847745 c07eee56 1e68 11e4 808f 1652a05aca33 png steps to reproduce go to url com ghost signin try and sign in with wrong email or password will see the error being covered technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug mobile
don obscure errors from api authentication token not sure if this is generic error in the error500 handling or specific to this end point but when debugging 3638 and 3639 it wasn possible to see the true error message instead all you see is this in the ui http puu sh aifnm png and this in the server logs http puu sh aifu2 png there was much more sensible error underneath it though so it would be good to make it possible to see the proper error instead both in the server logs and in the ui noticed another bug which was going to raise separately but might be fixable as part of this if you attempt to login when the server is stopped you get the same blank error notification instead of the server gone away error you get if you re logged in and attempt an action >>>bug
improve handling of sqlite read only errors currently these errors are bubbling up with really unhelpful contextual info https www evernote com shard s28 sh 58bfab46 d49a 44d2 bf3b 2b84a6b77f53 a0410a8b9a998090cb48f0f1680e7a02 res 028f4595 6c45 4cb4 8c2c 6a56eea380c1 skitch png resizesmall width 832 the contextual info should detail that this is permissions error and that the blog owner needs to check the permissions of their db file rather than having error messaging around apps because that where the problem happened think this needs some really low level catch to pick this error up and output nice context and help message to go with it >>>bug
don validate user on login so after much debugging from sebgie we have determined that 3638 3639 are both caused by validation errors on login the user model is validated as part of saving the user with an `active` state `last login` time and if there an error it gets thrown the problem here is that as mentioned in 3657 we now have strict validation on the `website` field which didn exist before and in many cases `website` has been set to an invalid value this means that no one can login to fix the bloody problem winning >>>bug data users
user website validation wreeking havoc from 3304 we should handle this intelligently by automatically interpreting the input and using validation if we can the user should not have to know or care about what http is we have added strong validation to this field on the user which includes requiring protocol https github com chriso validator js has an option to not require protocol when doing the validation for url which we should probably use >>>bug users
toggle between mobile editing panes is bit wonky shrink your viewport to mobile view on the editor you now have tabs markdown preview with the markdown tab active click on the markdown tab expected behaviour nothing happens the markdown tab is already active actual behaviour it toggles to the preview tab this is not blocker and can be punted to if required >>>bug
clicking off of modal window does not close the window summary of issue clicking off of popup window does not close the window steps to reproduce click new post button click the little button for the markdown help clicking off of that window does not close the markdown help window desired result clicking off the window in ghost closes the window additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc2 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
bug sending test email goes to owner not admins email address issue summary if you log in with an admin user and go to ghost debug and hit the send test email instead of it going to the admin user that is logged in email it goes to the owner should prob go to the admin so if they are doing testing they can receive the emails themselves steps to reproduce go to url com ghost debug click on send test email it will send to owner email address not the admin who is logged in technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug
bug adding edit at end of post is case sensitive issue summary this may be entirely how it is supposed to work but right now if you add edit to the end of the post it will take you to the editor like it should but if you add edit edit etc it will take you to 404 just thought it should prob have all of them take you to the same place slash edit case sensitive https cloud githubusercontent com assets 4715098 3836023 f7468eb0 1dca 11e4 8fce 8d08de693795 gif steps to reproduce open any post add edit to the end of the url this will take you to 404 technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>tests
bug are you sure you want to leave not popping up on title change issue summary when you change the title information of post and then try to change the page it will let you instead of popping up with the are you sure you want to leave this page alert the alert works with the content and the tags but not with the title no page alert title change https cloud githubusercontent com assets 4715098 3836018 b6b68f08 1dca 11e4 8096 8b59cffd9870 gif steps to reproduce open any post in the editor change the title of the post hit any link and it will take you directly there technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug
bug pagination says less than 1000 but 1000 works issue summary know this is suuuper picky and def not pressing but when you try to make pagination over 1000 pages it says to make it less than 1000 but then 1000 works so either needs to be re worded or changed to 999 less than 1000 pagination https cloud githubusercontent com assets 4715098 3835995 3b6a933a 1dca 11e4 8c01 940413e54a41 png less than 1000 pagination 1001 https cloud githubusercontent com assets 4715098 3835996 3b6b6184 1dca 11e4 8c24 de0e1eed2d7c png steps to reproduce change pagination to 1000 posts and it will save change pagination to 1001 posts and it will say make less than 1000 technical details ghost version rc2 client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug
cannot login after upgrade to rc2 issue summary upgraded my ghost installation from to rc2 and after that cannot login anymore at first get please enter password warning even if password was inserted by autocompletion and when enter the password again get new warning but with no text at all when copy an access token from fresh installation am logged in and can use it but even if use the password change feature cannot login after logout an import of my exported json file is also not possible because of validation isemptyorurl failed for website steps to reproduce upgrade from to rc2 try to login get warning error message technical details ghost version rc2 client os windows server os debian wheezy node version 10 29 browser firefox 31 database sqlite>>>bug
tabindex for editing new post vs existing post new post cursor should be automatically active inside the `title` field when the editor loads this works editing an existing post the cursor should not automatically be active in any area currently the behaviour is the same as with new post the problem with this is that with long title longer than the width of the title box the cursor is automatically placed at the end effectively showing you the 2nd half of the title and cutting off the first half also there is no ux reason that editing post indicates the next action would like to complete is to edit the title this is not blocker and can be punted to if required >>>bug editor
content management keyboard navigation has no endings on the content management screen use the up down arrows to navigate between posts go all the way to the top and press up again expected behaviour nothing happens you have reached the top of the list actual behaviour the selection moves to the last post in the list same thing happens in reverse pressing down arrow on last post goes to first post this is not blocker if it anything less than minute fix punt to >>>bug
bug mobile editor end of the post covered by tag footer issue summary device iphone when you scroll down to the bottom of your post the last little bit is covered by the footer you can pull it up but it will bounce back down post covered1 https cloud githubusercontent com assets 4715098 3831639 b6923b92 1d95 11e4 8ab3 7678872e8cbd png post covered2 https cloud githubusercontent com assets 4715098 3831638 b691a6d2 1d95 11e4 97f8 03bd07ec632f png steps to reproduce open any post scroll to the bottom and the post will be covered technical details ghost version 0rc client os mac 10 server os mac 10 browser safari database sqlite local>>>bug editor mobile
bug unable to revoke invited user issue summary cannot revoke an invited user revoke user https cloud githubusercontent com assets 4715098 3829200 5eff81bc 1d7e 11e4 899f 67dc13b3be26 gif steps to reproduce 	invite new user 	try and revoke technical details ghost version 0rc client os mac 10 server os mac 10 browser chrome database sqlite local>>>bug ember
update notification to dismiss or not to dismiss to date the update check notification has always been non dismissable it doesn have close button and it not meant to ever go away in it does have close button and can be dismissed only to pop back up if you refresh or re log in the update notification is intended to be annoying people need to upgrade not dismiss it on the other hand it stops you from being able to navigate on mobile and being able to dismiss it even though it only temporarily might let people complete task on their mobile successfully decision time >>>bug
mobile navigation gone awry seeing lot of brokenness in the mobile navigation once you get passed 3623 and try to navigate around broken user profile flow open the burger menu open the user menu click on your profile the menu doesn close tapping the top right corner where the burger is saves stuff even though you can see the save button can seem to get out of the menu broken settings flow open the burger menu click settings click general no back button or save button although tapping the top right corner saves and tapping the top left corner goes back go to settings users no back button drop down into user still no back button note sometimes if you drag or open menu the buttons reappear from wherever they are hiding technical details ghost version rc2 device iphone 4s ios6 >>>bug mobile
ios signin screen issue summary when logging in on ios iphone and ipad see some strange behaviour see steps below to reproduce steps to reproduce go to ghost signin enter email address and leave password empty press open keyboard is not hidden and the user can see the error message enter correct email address and wrong password press the blue log in button keyboard is hidden and error message is positioned wrong image https cloud githubusercontent com assets 539213 3827556 20bf2bd2 1d6f 11e4 91a3 fe44930b0df1 png enter correct email address and password press the blue log in button keyboard is hidden and progress indicator is positioned wrong image https cloud githubusercontent com assets 539213 3827560 2ed7b28e 1d6f 11e4 8aac 4ec944f94a30 png user is logged in log out enter correct email address and password 10 press open takes forever why keyboard is hidden and progress indicator is positioned correctly 11 user is logged in technical details ghost version rc2 client os mac os 10 ios server os vagrant node version 10 26 browser chrome 36 1985 125 safari for ios database sqlite>>>bug ember mobile
ghost icon is not clickable issue summary the ghost icon in the upper left corner is not clickable right after login if refresh the browser it works as expected this is annoying on desktop and prevents opening the burger menu on mobile steps to reproduce go to ghost signin and sign in click the icon nothing happens refresh the browser while authenticated click the icon opens ghost technical details ghost version rc2 client os mac os 10 ios server os vagrant node version 10 26 browser chrome 36 1985 125 safari for ios database sqlite>>>bug ember
release candidate ready for testing there is now second release candidate of https github com tryghost ghost releases tag rc2 published and ready for testing if you are able to do some testing this would be much appreciated doughnut cake if you find any bugs please raise them as separate issues according to the contributing guidelines https github com tryghost ghost blob master contributing md thank you if you complete successful testing please let us know by adding comment here detailing what you tested and on what environment covering relevant things like os browser prod dev mode database etc some important areas for testing aspects of ghost not often used during development production environment mysql ghost as npm module sub directories the update process important things that have changed every single detail of the admin multi user features invites signup etc permissions of the various user roles editing on mobile so much more be here til christmas listing it thanks balloon balloon >>>qa tests
api endpoint for configuration to make configuration values available to the client see 3568 we need another api endpoint to read and browse config values `get ghost api v0 configuration all available config values `get ghost api v0 configuration one value identified by config name response format the configuration endpoint should only return subset of available config values `filestorage` boolean from `config env filestorage` `apps` boolean from `config env apps` `version` string semver from `packages json` `environment` string from `node env` `database` string from `config env database client` `mail` sring from `config env mail transport` every authenticated user is allowed to read and browse these values >>>api
persistent notifications go away on refresh persistent notifications are pulled down before authentication not sure why this is but it means that if you refresh the admin they don appear until you log in again steps to reproduce cause persistent notification by removing mail config or setting `displayupdatenotification` to in the settings table restart ghost then log out and log in you ll see the notification refresh it will disappear log out and back in it ll appear again>>>bug ember
broken dropdown toggle icon suspect this is ember rather than gui css the dropdown caret should spin around to the downward orientation again when it is clicked again to close the menu open menu click outside the menu functions correctly menu closes arrow spins down open menu click on the dropdown icon again is broken menu closes arrow stays pointed up fuckmenu https cloud githubusercontent com assets 120485 3816746 42dc3b7c 1cd1 11e4 8d9e 7b002c19e3b4 gif >>>bug ember
bug author context block doesn work in the theme api it common to use context blocks like inside of every post block is an author block but the author block is currently not working unless you specifically use the `with` helper this is because it is being overriden by the author helper >>>bug themes
post preview disappears when resizing issue summary when resize the content window to mobile size the post preview disappears as expected if post is selected and resize the window back to normal the post preview is still not visible resize problem https cloud githubusercontent com assets 539213 3811350 42b34d94 1c9e 11e4 9990 1637c3812bc2 gif steps to reproduce go to content resize window to mobile size select post and navigate back resize window back to original size technical details ghost version master latest commit aec440bbd0bc27bb3dd1bf45722da06fb9962c6f client os mac os 10 server os ghost pro node version 10 26 browser chrome 36 1985 125 database mysql>>>bug
notifications on editor overlaps tag editor on current admin there no overlap screenshot 2014 08 04 21 05 17 https cloud githubusercontent com assets 322576 3805729 984f9012 1c3c 11e4 9983 144f7ca56056 png on ember admin it overlaps screenshot 2014 08 04 21 04 19 https cloud githubusercontent com assets 322576 3805738 c170745c 1c3c 11e4 9ec9 a099b7418547 png >>>bug
abstract admin transitions believe that we can significantly improve our our animations by abstracting them bit and avoiding `jquery animate` take look at this demo of liquid fire http ef4 github io ember animation demo route transition relatively new ember cli addon that makes this trivial with ember cli and sure we could leverage this without moving to ember cli first liquid fire uses velocity js http julian com research velocity which replaces `jquery animate` with much faster implementation imho with more abstract setup we can handle things like the bug fixed in https github com tryghost ghost pull 3535 quite bit better >>>ember
images not detected in lists very simple but annoying bug if put an image inside list using markdown do not get an upload form example screenshot of bug http imgur com dvg111a png >>>editor
make owner for administrators only our current api implementation allows only administrators to assigned the owner role the option to assign the owner role to an author or editor is shown in the cog atm the api denies the request as expected but for better ux it would be good to remove the option felixrieseberg is this something for you >>>ember
feature about ghost page see tryghost ghost ui 23 for design specs it would be wonderful to have this in with pauladamdavis added the htmlz in `core client html about page html` https github com tryghost ghost blob master core client html about page html >>>feature settings
bug can revoke invite after accepted to delete user issue summary when you invite new user and they go and sign up if you have not refreshed the page and you click on revoke invite it will delete that user steps to reproduce invite new user open up new browser with link and sign up go back to the admin page where user was invited hit revoke and that that user will be deleted revoke access https cloud githubusercontent com assets 4715098 3784788 97ce4750 19bc 11e4 80d2 62e1e6e079b4 gif technical details ghost version 0rc client os mac 10 server os ubuntu 12 04 browser chrome database sqlite digitalocean and local>>>bug
bug make owner drop down is shown for admins issue summary the make owner drop down is shown when logged in as admin steps to reproduce log in as admin navigate to the user management page select user click on the cog make owner is shown the permission system prevents an admin do make another user the owner of the blog but for better ux the option shouldn be available at all technical details ghost version master latest commit 41493e1ccca68ac8913bdf694fe23a2d88f9dd2c client os mac os 10 server os vagrant node version 10 26 browser chrome 36 1985 125 database sqlite>>>bug ember
bug posts are stolen by the editor issue summary draft from user is automatically stolen and switched to the editor upon editor signin steps to reproduce sign in as an author write post and save as draft check it displays in the content list as written by author sign out and sign in as editor note the new post from the author but it is displayed as written by editor even without any editing or even any action whatsoever sign out and sign back in as author note the post has disappeared as it belongs to the editor now the post should not automatically be attributed to the editor without at least the editor editing it and in my opinion this should only be an explicit change through the post options menu technical details ghost version ghost rc1 from github zip file client os mac 10 server os mac 10 node version 10 29 browser chrome database sqlite stealingposts https cloud githubusercontent com assets 321603 3776539 18b15f22 1956 11e4 97d1 5d4911768264 gif >>>bug ember
bug invalid signup token shows weird 500 screen issue summary using an invalid signup token gets you to strange 500 screen steps to reproduce invite user use signup token but make it invalid remove characters screen shot 2014 08 01 at 10 15 39 https cloud githubusercontent com assets 176576 3776451 b40e6994 1954 11e4 9e38 6cf2851a5af5 png technical details ghost version master client os macos server os linux node version 10 25 browser chrome database sqlite3>>>bug
bug inviting multiple users in row fails issue summary inviting first user and then second fails with no feedback steps to reproduce go to settings users and invite user notification of successful email is displayed and user appears on screen in invited user list invite second user nothing happens no error no success notification no user in user list as side note it appears navigating elsewhere in the admin and then back to settings users to invite does not make any difference refreshing the page however does allow another invite to be sent would expect successive invitations to succeed technical details ghost version rc1 from zip file on github client os mac 10 server os mac 10 node version v0 10 29 browser chrome database sqlite multipleusers https cloud githubusercontent com assets 321603 3776387 9a5dbd48 1953 11e4 9b00 b1b15f968cde gif >>>bug
ui css transition cursor pointer missing for profile missing hello css transition not 100 sure about the css transition when clicking on the top right for the profile drop down it feels slow to me animation fade in 1s perhaps it would be good idea to reduce it down to or profile cursor pointer missing when clicking on the profile name in the top right corner there isn pointer icon just text selector navbar nav li cursor pointer tested on os mavericks 10 browser safari version 9537 77 and chrome version 36 1985 125>>>bug
repeated succesfful login logout locks you out summary of issue successfully logging in and out will lock you out steps to reproduce log in and out times trying to log in the 7th time will lock you out observed result >>>bug
missing inline code shortcut in we switched ctrl to be link as it is in most other applications as result the code shortcut was removed as it used to be ctrl shift on windows or on mac think the code shortcut needs to be ctrl shift on windows and shift on mac see https github com tryghost ghost wiki keyboard shortcuts the code for it is place in utils codemirror shortcuts js as the style code it just needs wiring up in the utils editor shortcuts js file if everyone is happy with the shortcut cc johnonolan >>>beginner ember
no error message when trying to reset password for invited user that has not accepted summary of issue no error message when trying to reset password for invited user that has not accepted steps to reproduce invite user go to reset password page http 127 2368 ghost forgotten fill in email address for invited user observed result normally on the forgot password page when user that does not exists is entered the following message is displayed >>>bug
no messaging shown when reusing reset password token summary of issue no messaging shown when reusing reset password token steps to reproduce click reset password link on sign in page fill in email address click link in email reset password click link in email fill in new password and click reset password button observed result in the browser nothing happens but in the console the following message is displayed desired result some message should be shown in ui additional information user role administrator editor author owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
the two new passwords don match message stacking summary of issue the the two new passwords don match message stacks on the reset password page steps to reproduce click the forgot password link on the signin page fill in your email address click link in email fill out the two password fields differently and click reset password button several times observed result screen shot 2014 08 01 at 12 09 47 am https cloud githubusercontent com assets 7192387 3775812 e3f57738 194a 11e4 809f 4a1fd4843996 png additional information user role administrator editor author owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125 >>>beginner bug
no error when creating invitation for user that is pending summary of issue submiting new user with an email address of user that has been created but not accpeted does not produce an error message steps to reproduce go to http 127 2368 ghost settings users create new user create another user with the same email address observed result no error message is displayed desired result message saying their is pending user should be displayed additional information user role administrator editor author owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
message stacking invitation resent summary of issue clicking resend link multiple times causes the message to stack steps to reproduce go to http 127 2368 ghost settings users invite user click the resend link next to new user several times observed result screen shot 2014 07 31 at 11 49 48 pm https cloud githubusercontent com assets 7192387 3775638 4d6f8314 1948 11e4 8e0c b20f1405243c png additional information user role owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>beginner bug
401 unauthorized error message summary of issue when requesting url on brand new installation of ghost 401 unauthorized error may be displayed briefly steps to reproduce go to http 127 2368 ghost editor stop ghost delete the database start ghost refresh the page observed result 401 unauthorized will be displayed briefly before being redirected to the signup page screen shot 2014 07 31 at 11 36 46 pm https cloud githubusercontent com assets 7192387 3775517 4a7b0ac2 1946 11e4 95c2 d971a95a445a png 401 message https cloud githubusercontent com assets 7192387 3775518 517ad91a 1946 11e4 8253 791119a4025d gif additional information user role owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
no error with invalid email address on user invite summary of issue when inviting user there is no error message if an invalid email address is used steps to reproduce go to http 127 2368 ghost settings users click new user button enter an email address with spaces in it click send invitation now button observed result no error no invite created no error https cloud githubusercontent com assets 7192387 3775466 6a927904 1945 11e4 8e88 ed84dca8943c gif additional information user role owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug ember
transfer ownership button does not work summary of issue click transfer ownership button does not do anything steps to reproduce go to http 127 2368 ghost settings users click cog in upper right click yep sure observed result nothing happens desired result not sure if this is expected to work but if it is would suggest removing the button additional information user role administrator editor author owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
delete user button does not work summary of issue nothing happens when clicking the delete user button steps to reproduce go to http 127 2368 ghost settings users click the cog in upper right click delete user observed result nothing happens additional information user role owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug ember
bug revoke access from author posts get deleted issue summary think this issue could be one of two things when you invite someone to be an author you can then change post to be under their name if you then go and revoke their invitation that post gets completely deleted so either they need to accept the invite before they are allowed to have posts moved under them or all posts are getting deleted when user is removed have not tested with this with an accepted user yet steps to reproduce invite new author user change post to be under their name revoke the invitation go back to content and you will see an error and the post will be gone user delete post https cloud githubusercontent com assets 4715098 3775362 46c36f26 1943 11e4 8f8a a237135d36fb gif technical details ghost version 0rc client os mac 10 server os mac 10 browser chrome database sqlite>>>bug ember
bug mobile editor can close notification alerts issue summary device iphone iphone 5s with fresh database when an alert comes up like your mail not being configured it is not possible to close it and it is covering up all the important navigation steps to reproduce wipe out rc1 database start ghost to make new one log in with mobile and you will not be able to close the alerts that pop up close notifications https cloud githubusercontent com assets 4715098 3775310 b370fb54 1941 11e4 9a8f f03adf28c4d8 gif technical details ghost version 0rc client os ios server os ubuntu 12 04 browser chrome database sqlite digitalocean and local>>>bug mobile
your post could not be deleted please try again messaging is stacking summary of issue when trying to delete post from different user the your post could not be deleted please try again message stacks steps to reproduce create post with user log out and back in and user go to user post via the url under the cog attempt to delete the post observed result screen shot 2014 07 31 at 10 56 23 pm https cloud githubusercontent com assets 7192387 3775283 c7d29180 1940 11e4 918b 2ae3758773e6 png additional information user role administrator editor author owner client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
bug mobile editor left side not always scrollable issue summary device ipad 4th gen sometimes when you try and scroll on the left side of the editor you are scrolling the entire browser window instead of scrolling the actual content think it might have to do with focus cause if you are scroll in it and it is working then you go to scroll or do something elsewhere and come back it wont work then if you like double click on that side to put the cursor inside the text it will work again steps to reproduce log into the admin interface on an ipad open post to edit try and scroll on the left side if it works try changing your focus to tags or to the right side and then go back and see if you can scroll left scrolling1 https cloud githubusercontent com assets 4715098 3775232 e2596f3e 193f 11e4 87a7 bcca8699096c gif left scrolling2 https cloud githubusercontent com assets 4715098 3775237 f1dc81b2 193f 11e4 9993 a598c2afa25b gif technical details ghost version 0rc client os mac 10 ubuntu 12 04 server os mac 10 ubuntu 12 04 browser chrome database sqlite digitalocean and local>>>bug editor mobile
post says it is saved but it does not summary of issue when attempting to save post as draft with out title can get it to say it has saved successfully although it has not steps to reproduce create new post do not add title add content to the body click save draft message pops up saying post must have title click the cog and change the author click save draft multiple times observed result eventually ghost will pop up that the post has been saved but going back to content tab there is no post additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug editor
bug mobile editor sometimes the pop in menu doesn pop in it takes you to the home screen issue summary device iphone iphone 5s when clicking on the top left icon to pop out the menu the menu will not pop out it will take you directly to the home page instead this can get you stuck on page so you can no longer navigate around the admin interface this does not happen all the time sometimes on refresh it happens sometimes it doesn steps to reproduce log into the admin interface on mobile device click on post try and click on the pop in nave on the top left and it will take you to the home page instead of bring out the menu menu home page https cloud githubusercontent com assets 4715098 3775190 6b1ee274 193e 11e4 8611 a65c49e3df7d gif technical details ghost version 0rc client os mac 10 ubuntu 12 04 server os mac 10 ubuntu 12 04 browser chrome database sqlite digitalocean and local>>>bug mobile
bug mobile editor back button functionality not working issue summary device iphone iphone 5s if you open up the mobile admin and then click on any post trying to use the back button does nothing you just stay on the same page you are already on steps to reproduce log into backend on phone click on any post try to use the back button and it wont let you go back you will just stay on the same page back button https cloud githubusercontent com assets 4715098 3775161 a6354cdc 193d 11e4 9cbb 58a6bf5a237f gif technical details ghost version 0rc client os mac 10 ubuntu 12 04 server os mac 10 ubuntu 12 04 browser chrome database sqlite digitalocean and local>>>bug mobile
bug update from fresh to screen sticks on creating first user issue summary if you install brand new and then without creating any users update it to rc1 when you go to create your first user it will hang you enter in all the information click on the ok lets do this button and nothing happens eventually you get there was problem wit the server error but if you refresh the page you can log in with the user you just made steps to reproduce download and place fresh do the npm install and the npm start on stop ghost upgrade to start ghost and fill in the first user info click to create the user and it will hang refresh the page and you will be at the login screen ready to log in create user hangs https cloud githubusercontent com assets 4715098 3775026 29461ba0 193a 11e4 845e 6086cb29e15d gif technical details ghost version 0rc client os mac 10 ubuntu 12 04 server os mac 10 ubuntu 12 04 browser chrome database sqlite digitalocean and local>>>api bug
add validation on blog logo summary of issue this is not really bug but more of feature request when adding blog logo via url there is no validation that what is being added is some sort of image http www google com is accpeted which results in the broken image icon additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>ember
changing url error cannot read property save of undefined summary of issue changing url of published posts results in an error steps to reproduce create new post publish the post click on content tab select your new post click the cog in upper right change url to be new url press return on keyboard observed result change perm link https cloud githubusercontent com assets 7192387 3774995 52d1b052 1939 11e4 92b1 7bf12cdf2b3b gif additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
bug random weird icons issue summary device all sometimes after fresh update would get weird icons like would get roses or thumbs up icons instead of the mail icon or whatever have not been able to pinpoint when exactly it is getting triggered cause it has only happened few times and cannot reproduce it on the fly but here is what it looks like img 0121 https cloud githubusercontent com assets 4715098 3774909 2f760146 1937 11e4 88ae e1c3bec81c78 jpg sorry for the vague issue will update if can figure out how to reproduce it consistently but right now can technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite using digitalocean>>>bug
bug mobile editor editing post refresh kicks back out to content page instead of staying within post issue summary device iphone iphone 5s ipad when doing fresh update from to rc1 when editing post if you refresh the page instead of keeping you on the same page you are on it kicks you out to the main admin content screen if delete the ghost db and restart ghost this error goes away entirely steps to reproduce take an install of and update it to rc1 restart ghost log in or create user and go to any post refresh and you will be kicked out to main content screen delete ghost db and restart again create new user and the refresh will now work img 0814 mov https cloud githubusercontent com assets 4715098 3774834 2b79e640 1935 11e4 9f58 501cc77dd7ad gif technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite digitalocean>>>bug data
repeated your password is not long message summary of issue clicking the change password button repeatedily makes the messages stack up steps to reproduce go to http 127 2368 ghost settings users click change password button lot observed result screen shot 2014 07 31 at 33 08 pm https cloud githubusercontent com assets 7192387 3774839 39800a58 1935 11e4 8eaa 6f0919e5b732 png additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
repeated warning message summary of issue entering invalid number of posts per page can cause warning message to repeate steps to reproduce go to this page http 127 2368 ghost settings general enter an invalid number for posts per page click save click either upload image buttons click save screen shot 2014 07 31 at 22 31 pm https cloud githubusercontent com assets 7192387 3774768 cf771ce2 1933 11e4 94a5 e59496951703 png observed result everytime you click save the following warning message is repeated additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug ember
long url causes sql error summary of issue long url causes sql error steps to reproduce go to following url http 127 2368 page 5700000000055345439587894375457849375284932759842375894372589243758947325894375894275894275894725897432859724309 observed result following message is displayed additional information client os mac os 10 server os mac os 10 node version v0 10 21 ghost build number rc1 latest commit ghost database sqlite3 browser chrome 36 1985 125>>>bug
bug mobile editor post settings popup half way off screen issue summary device iphone iphone 5s when trying to edit the settings on any post when you click on the cog it brings up the settings menu but it is half way off the screen steps to reproduce open up any post and click on the cog to bring up the post settings it will not be on the page img 1853 https cloud githubusercontent com assets 4715098 3774601 03c00f4a 192f 11e4 910f 32b28c3f6354 png technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite digitalocean>>>bug mobile
bug mobile editor tags can be scrolled up and down issue summary device ipad 4th gen when you have list of tags you can actually scroll down so then the tags disappear left to right works but up and down should be disabled steps to reproduce open up any post with tags and scroll down put finger on tags and drag up and the post will disappear as they are scrolled above the tag element img 0113 https cloud githubusercontent com assets 4715098 3774475 bd871512 192b 11e4 96ae 54757befdbfd png img 0114 https cloud githubusercontent com assets 4715098 3774476 bf359186 192b 11e4 93a6 bbd34a9b2f2e png img 0115 https cloud githubusercontent com assets 4715098 3774477 c0c6180e 192b 11e4 9227 bb4cac924f8b png technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite digitalocean>>>bug editor mobile
bug mobile editor entering tag bleeds over cog and update button issue summary device ipad 4th gen when typing in new tag the text bleeds over the settings cog as well as the update button so you are typing behind both of those elements steps to reproduce open up any post and enter in bunch of tags when you get to the very end of the line you will see that it goes behind the cog and update post elements img 0112 https cloud githubusercontent com assets 4715098 3774395 22ca42fc 192a 11e4 998e 6a7a768c1db1 jpg technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite digitalocean>>>bug editor mobile
bug mobile editor cursor above tag line when entering tag issue summary device ipad 4th gen when typing in new tag the cursor is above the tag line where you are typing steps to reproduce open up any post and try to enter in tag the cursor will be above the line img 1856 https cloud githubusercontent com assets 4715098 3774384 b761320a 1929 11e4 8c5c b29d2fd54b1e jpg technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite digitalocean>>>bug editor mobile
bug mobile editor no text when typing tag in issue summary device iphone when you are typing tag into the editor there is no text shown and the curser is all the way on the right steps to reproduce try and type in any new tag no text https cloud githubusercontent com assets 4715098 3774235 9061c3e4 1925 11e4 9931 b62095337d9f gif sorry for the small gif had to convert from 2nd phone video technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite using digitalocean>>>bug editor mobile
bug mobile editor tags cut off and other half shown issue summary device iphone but not iphone 5s when you open post in the mobile editor if you have long tag or multiple tags the tag fades away like am guessing it is supposed to but then the rest shows up right after the fade img 1850 https cloud githubusercontent com assets 4715098 3774205 ee3ececc 1924 11e4 9e5f 77caa9f82a0b png steps to reproduce open any post create long tag or multiple tags technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite using digitalocean>>>bug editor mobile
bug mobile editor cannot go to preview pane issue summary device iphone ipad 4th gen portrait mode when inside post editing and you try to preview the post it just jumps you back to the editor steps to reproduce open any post try and click preview cant select preview https cloud githubusercontent com assets 4715098 3774195 af379a4c 1924 11e4 9eab 52f52239b175 gif technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite using digitalocean>>>bug mobile
bug mobile editor when scrolling can bring footer to the top of the page issue summary device iphone as you scroll on mobile you can scroll in the non editor areas to bring the footer to the very top of the page img 1852 https cloud githubusercontent com assets 4715098 3774146 5b85c64a 1923 11e4 83a9 1bdd60b02f3e png img 1855 https cloud githubusercontent com assets 4715098 3774147 5b869778 1923 11e4 8a32 917b7d1b3666 png scroll error https cloud githubusercontent com assets 4715098 3774176 054afac4 1924 11e4 8b4a 62e75a59885c gif steps to reproduce open any post to edit on mobile place finger onto markdown or preview and scroll then once you see the footer put your finger on it and scroll technical details ghost version 0rc client os ios server os ubuntu 12 04 browser safari database sqlite using digitalocean>>>bug editor mobile
javascript fails to build rc1 os ubuntu 14 04 x64 node 10 30 npm 21 ghost rc 3497 when run `npm install production` get the following warning `npm warn engine html to text wanted node current node 10 30 npm 21 the install finishes without anymore errors warnings when then run `npm start` get the following >>>bug
release candidate ready for testing there is now an initial release candidate of https github com tryghost ghost releases tag rc1 published and ready for testing if you are able to do some testing this would be much appreciated if you find any bugs please raise them as separate issues according to the contributing guidelines if you complete successful testing please let us know by adding comment here detailing what you tested and on what environment covering relevant things like os browser prod dev mode database etc some important areas for testing aspects of ghost not often used during development production environment mysql ghost as npm module sub directories the update process important things that have changed every single detail of the admin multi user features invites signup etc permissions of the various user roles editing on mobile so much more be here til christmas listing it thanks >>>qa tests
invite user broken if transitioned to issue summary when navigating to the user screen from somewhere else invite functionality doesn actually work steps to reproduce wait for the db to drop drop the database have seizure do completely new install delete `node modules` `bower components` tmp` dirs `grunt init grunt dev` sign up immediately go to settings users click invite user add email address click invite observe that modal is still there and admin area thinks you ve invited the user click button more times in frustration observe modal still there same email address are seemingly invited 10 close modal 11 refresh page manually 12 observe that you have not in fact invited anyone thus all your previous actions were in vain 13 weep 14 look at the gif below invitation broken ghost https cloud githubusercontent com assets 1196299 3765402 39be7ca4 18bb 11e4 8420 a20710130fc8 gif environment node v0 10 29 npm 14 ghost https github com tryghost ghost commit 87b07eb9e0bb77574e6d8a4f07c38b5fdc012c4a client mac osx 10 server os localhost browser chrome version 36 1985 125 db sqlite >>>bug
add copyhtml shortcut from 3469 copyhtml is supposed to open modal window that lets you copy the html which would be generated for either all your markdown or just the bit that was selected at the time the shortcut was entered there is already stub for the shortcut in both editor shortcuts js has the mapping and codemirror shortcuts js has the functionality >>>ember
transient test failures we currently have number of frequently occurring test failures there are issues open for of them but not for several others rather than having individual issues for each thought it might be easier to group them all together into one through issue mysql missing tags fixed http puu sh alaha png gist https gist github com erisds 5f0cb495b3b706a9912f occurs infrequently on mysql hasn been seen on sqlite original issue 3119 possible cause bookshelf undefined key missing app fields fixed http puu sh ayw8y png gist https gist github com erisds feba1bb6f97e30499cc2 occurs frequently on sqlite and local `grunt validate` original issue 3429 possible cause app field fixture loading not working properly or timing errors with bookshelf returning multiple relations api post can read fixed http puu sh aywpu png gist https gist github com erisds 11fe2afd5a37f430b23f occurs only ever occurs after the undefined key error never seen it alone and only seen on sqlite3 and local possible cause unknown import test timeout fixed http puu sh aywdt png gist https gist github com erisds 2ee6916935dc2219081c occurs seen on sqlite3 and locally possible cause tests were added recently there likely something wrong with the tests casperjs stuck on sign in fixed http puu sh aywaa png gist https gist github com erisds 5e4bc8a94213f7728018 occurs on various casperjs tests possible cause signout not working properly this one may be fixed none of this is required for an rc but would feel much much better about the release if we could iron out or at least locate reason for one or two of them ve assigned this to jaswilli hope you don mind instead of 3119 and 3429 because he is the king of finding fixing these sorts of things ll still be taking any spare time have to look into them as well >>>bug tests
fixup keyboard shortcuts for release there are couple of tasks we need to do to get this to bare minimum standard for in rough order of priority vs ease the keyboard shortcuts wiki page has reference of what all the old shortcuts were we should try to get most of them back and working up down arrows these need removing https github com tryghost ghost blob master core client routes posts js l36 keyboard shortcuts for mac vs win https github com tryghost ghost issues 3029 at the moment not even sure if any of the shortcuts work on mac at all that needs fixing fix broken shortcuts basically this lot https github com tryghost ghost blob master core client utils codemirror shortcuts js l83 think select word and new line need to be removed actually the casing shortcuts are somewhat unimportant but desirable to have them back if they re easy copyhtml is covered in bit heading shortcuts here https github com tryghost ghost blob master core client utils codemirror shortcuts js l18 and here https github com tryghost ghost blob master core client mixins editor route base js l52 should be `ctrl alt num` ideally this would work by either cycling through `ctrl h` or with sequence like `ctrl 1` or some other combo because this is broken on all foreign keyboards but that for bonus points and is what this issue is meant to cover https github com tryghost ghost issues 3019 copyhtml copyhtml is supposed to open modal window that lets you copy the html which would be generated for either all your markdown or just the bit that was selected at the time the shortcut was entered this is pretty involved and probably can be punted >>>editor ember
forgotten password rate limiter with multiple email addresses in the system we need to be bit more savvy about not leaking them through the forgotten password form rather than doing something really obscure with horrible ux like saying if we know who you are we have emailed you we want to limit the number of attempts that can be made to reset password to something like only tries per ip address every numbers of timeframe we need to figure out what the defaults are and it would be idea if they were adjustable via config js that way we can set the defaults quite high and anyone who struggles large org behind public ip can loosen them off >>>bug
transfer owner doesn update client side model now that there separate endpoint for transferring ownership we need to do special things on the client to keep in sync with what happening on the backend via that ic ajax call ref https github com tryghost ghost commit ded6aa6ac05429408f3baff7dcc50d9aa7230b71 diff 22b30c6533ec05172148806f3e466d11l17>>>bug ember
incorrect too many calls to user api as navigate around the admin with the console open each screen seems to be making at least one call to `http localhost 2368 ghost api v0 users include roles` going to guess that this ought to be call to `users me include roles` and that similarly to the problem we had with ember data and posts we ve got bug somewhere due to ember data not liking slug parameters and query parameters in the same url steps to reproduce log in to ghost in chrome open the console on the network tab limited to xhr navigate around the admin and see all of the include roles calls think there are potential problems here that the url is incorrect and that the call is being made so frequently technical details ghost version master latest commit 99cc855 >>>ember
404 for unknown users novaugust pointed out to me the other day that if you try to access the edit user screen for an unknown user it doesn 404 am currently getting blank page steps to reproduce log in go to the list of users in the settings area click on user change the slug to one that doesn exist see the blank screen this is bug because it rather unhelpful technical details ghost version master latest commit 99cc855 >>>bug ember users
need to clear the store on signout if you sign out as one user and sign back in as another you are still signed in as the user you were signed in as before steps to reproduce make sure your blog has at least users sign in as one user click around the admin notice your name in the top right sign out you ll be presented with the sign in screen sign in as different user notice your name is wrong in the top right the ui isn correct refresh and all is ok technical details ghost version master latest commit 99cc855f554e57d7434a37e033fa22d414055d2c >>>beginner bug
bug edit settings unhandled rejection 504 internal server error issue summary unhandled rejection when user has no permission to edit settings resulting in 504 internal server error steps to reproduce create an author user by default the author role can read browse settings but cannot edit login using the author account navigate to url ghost settings save the below internal server error will occur promises unhandled rejections typeerror cannot read property code of undefined at root projects ghost core server api index js 169 31 at function foreach root projects ghost node modules lodash dist lodash js 3297 15 at formathttperrors root projects ghost core server api index js 165 at onerror root projects ghost core server api index js 266 34 from execution context at root projects ghost core server permissions index js 131 29 from execution context at object handle root projects ghost core server api index js 263 21 from execution context at object handle root projects ghost core server api index js 259 16 from execution context at object handle root projects ghost core server api index js 255 14 at next layer root projects ghost node modules express lib router route js 81 14 from execution context at edit root projects ghost core server api settings js 374 61 at next root projects ghost node modules express lib router index js 189 19 at next root projects ghost node modules express lib router index js 166 38 at next layer root projects ghost node modules express lib router route js 77 14 from execution context at root projects ghost node modules express lib router index js 195 24 at function proto process params root projects ghost node modules express lib router index 253 12 from execution context at caneditallsettings root projects ghost core server api settings js 251 17 at edit root projects ghost core server api settings js 374 16 at object handle root projects ghost core server api index js 253 16 at next layer root projects ghost node modules express lib router route js 103 13 at route dispatch root projects ghost node modules express lib router route js 107 technical details ghost version master latest commit e4134cc merge pull request 3438 from hswolff home template client os windows server os windows node version v0 10 24 browser chrome 35 1916 153 >>>bug
limit the post user lists for specific roles split from 3086 who can see what after some thought all of the more complicated logic originally specified in 3086 and 3097 can be boiled down to two rules for the post list on the content screen if the currently logged in user has the author role limit the list to just their own posts where they are the author of the post for the user list on the settings user screen if the currently logged in user as the editor role limit the list to just users who have the author role it is already possible to filter posts browse by author we already know the role of the logged in user so the work needed to achieve this includes it is not currently possible to filter users by role but it should be reasonably straightforward change to the `usermodel findpage` method to support role role name as filtering query param in the same way as we do for tag an author on posts we will need to add the author and role to the api requests made from ember data in the right circumstance >>>api ember
error when inviting users issue summary get the following error message when try to invite new user error sqlite error table roles users has no column named created at errno code sqlite error steps to reproduce go to the user management screen invite new user error technical details ghost version master latest commit cc471aedcb58eeaf95f9ed9a3b2d1b57a0e28e6a client os osx 10 server os vagrant node version 10 26 browser chrome 36 1985 125 database sqlite3 >>>api bug
make functional tests pass when run with the latest casperjs when run with the latest master head version of casperjs three of the four tests in feed test js fail because the getpagecontent method has changed to return the stripped of markup version of the response body unless the content type matches text html while the tests will run clean once you check out the same casperjs tag locally that is specified in ghosts travis yml that step isn included in the local environment setup instructions in https github com tryghost ghost wiki functional testing with phantomjs and casperjs and can take bit of exploration to find for someone new to the ghost codebase assuming that typical alternatively the documentation could be updated to indicate casperjs tag instead of saying ghost uses but presumably this change in casperjs will be incorporated in the release at some point so might as well adapt to it already have fix for this and will be preparing pr once have the issue number from this for the branch name >>>tests
transient test failure needs finding and fixing https gist github com erisds feba1bb6f97e30499cc2 >>>tests
invite user should select author role by default from the comments on 3420 the invite new user modal should select the author role by default rather than the top role by default http puu sh aue7q png the order that users are listed in the dropdown should remain the same admin editor author however author should be the one that is selected when the modal opens >>>beginner bug ember
remove author label from settings users from the comments on 3420 https cloud githubusercontent com assets 1207005 3714823 6ca4e968 15bf 11e4 92cc 34c050445bcb png only the owner admins and editors should have label next to their name `author` is considered the default and therefore does not require label therefore the label needs to not be shown if the user is an author >>>beginner bug ember
move transfer ownership to own api endpoint as ve been working on writing tests for 3196 and also getting the user permissions correct and tested for 3096 ve hit roadblock whereby it impossible to make all of the conditions pass essentially have what believe is full suite of tests where one test always fails every time fix the permissions so that the broken test passes that change breaks another test there are couple of underlying problems with the permissions model which is causing this for user edit and add we now have permissions checks `canthis context add edit user userid and `canthis context assign role roleid this is bit restrictive in that we can ask if the context can assign role to specific user essentially the code should probably be `canthis context add roleuser roleid userid but jointables aren treated as models and canthis isn really setup for testing the join tables `canthis context add role roleid userid or `canthis context add role roleid to user userid would be great but will require extensive reworking of canthis the side effect of this is that the check which prevents modifying your own role has to be outside of the permissions system https github com tryghost ghost pull 3395 files diff e1c52a506c4dfb4202439ef6db5f2de0r111 this is not so bad and we ll likely have an issue to extend `canthis` and fix this later inside of testing for `assign` permissions we don know whether we re assigning to new or existing user the rules for assigning to an existing user and assigning to brand new user are subtly different no one can assign the owner role to new user owners can assign the owner role to an existing admin user this could be solved by having permissions assigntonew and assigntoexisting but the above latter rule is actually just one very special case purely for transferring ownership when the owner wants to transfer their ownership to another user they can do so only if the other user exists and is already an admin no one else is ever allowed to perform this action and this action is already considered to be different to standard edit in the ui there different control furthermore it seems odd to me that in certain case calling edit on user model can cause more than one user to be updated finally this would resolve both my problems with the permissions model and 3403 in one fell swoop therefore believe making an endpoint just for this change makes the most sense that just leaves what to call it looking at router put users owner api http api users transferownership `>>>api users
translations pl translation of installation index md into pl>>>docs
discussion client coding styles property vs `ember computed` we ve been having discussions off on disparate prs here and there like to get it in one place and talk about it formally and maybe even get pr in to consolidate our style properties in ember ember has two methods for making complex computed object properties the first is `ember computed dependencies thefunction and the second is the `property` method that ember metal puts on function prototypes `thefunction property dependencies up until now our style has been to use the `property` method for custom functions but we still see `ember computed` for its submethods like `alias` `readonly` `oneway` etc argument for switch to `ember computed` rwjblue and jaswilli have both advocated for using `ember computed` over property` because it places the fact that this is property at the very beginning of the property definition rather than obscuring it by placing it at the end of the function similarly it puts the dependencies of the property up front ve been whining about prs that use `ember computed` over property simply because we have until now been using `property` and like consistency but maybe it time to do revamp and switch everything over to `ember computed` and drop all property` uses >>>ember
new pluralise handlebars helper there use case in the new casper theme which calls for pluralised string we should discuss the name for this helper and any issues we could come into the name working with at the moment is `plural count` if `pagination total` outputs `post` if `pagination total` or more outputs `posts`>>>themes
new `home hbs` template following on from the conversation in 2648 it would be good to add the option to have custom handlebars template in theme which is used to render the homepage this template `home hbs` will not be required ghost will continue to render `index hbs` as the homepage if `home hbs` is not present if `home hbs` is present in the theme then this template will be used to render the first page in the list of posts but not the second or 3rd pages >>>themes
meta title is blank for author pages currently the meta title helper used in default hbs l9 https github com tryghost casper blob master default hbs l9 outputs nothing on author hbs pages it should be the same pattern as tag pages such as author name blog title `>>>themes
update ember simple auth to latest version `ember simple auth` has changed lot in the last weeks and needs an update opening this issue to keep track that this is in progress and marcoow is working on it refs 3361 working on pull requests that updates ember simple auth to the latest version >>>ember
transfer owner fails on user validation if you try to transfer ownership to user and their form is populated with invalid info as happens to me all the time because chrome always autofills website with my email address despite having autofill turned off you get an error message saying the information is invalid this is unexpected as only trying to change who is the owner not any details about that user not sure if this one can be fixed easily without patch support in the api or whether perhaps we do need new endpoint for assigning roles steps to reproduce go to user settings page fill out broken url or email address try to transfer ownership to the user validation errors happen >>>bug
edit user profile role dropdown in the template for the user edit screen there is commented out role dropdown https github com tryghost ghost blob master core client templates settings users user hbs l67 http puu sh aqj6x png we now have the roles api browse endpoint for fetching the roles that the currently logged in user is allowed to assign although it won function 100 until 3395 is merged we also have the user api edit endpoint updated to expect to have to change role and to check permissions for what roles can be assigned therefore all the pieces should be in place to wire this up the dropdown needs uncommenting populating with list and hiding if the list is empty you can reference https github com tryghost ghost issues 3083 to see who should be allowed to assign given role but in short owners admins can assign all roles except the owner role won appear in the list that role can only be assigned via the make owner button 3400 editors can assign the author role authors are not allowed to assign any roles so this dropdown should be empty and therefore should be hidden for authors update this dropdown shouldn appear when editing the current logged in user profile it shouldn be possible to edit your own role as it pretty destructive action too easy to do authors can edit roles owners can relinquish their ownership without doing the explicit transfer ownership action so only admins and editors are affected and they are only prevented from downgrading themselves which seems like minimal use case anyway >>>ember settings users
edit user profile slug field in the template for the user edit screen there is commented out slug field https github com tryghost ghost blob master core client templates settings users user hbs l55 this slug field needs to be uncommented and wired up to work correctly it should allow users to edit the slug it should not permit duplicate slugs essentially it should function the same as the permalink slug field in the post settings menu if the slug is duplicate it should update with 2` on the end as we already do all of this for posts and users are also understood to have slugs along with tags believe all of the pieces are in place for this >>>ember settings users
user settings cog menu show items appropriate to role on the user profile page there is little cog that opens menu menu http puu sh aqiaq png the menu needs adjusting to display based on permissions rules rule owners the make owner menu item should only appear if the currently logged in user is an owner additionally the delete user menu item should not appear when viewing the profile of the owner user as this user can never be deleted therefore by default this menu will only have single item for all the other users rule authors if the currently logged in user is an author the whole menu should be hidden as they cannot delete even themselves rule editors this rule is little bit more complicated if the currently logged in user is an editor then the whole menu should appear or disappear based on whether the editor can delete the user who profile it is there are cases in which they are allowed to delete the profile if it is their own profile if the profile belongs to an author note these rules can be hardcoded into the client the server side permissions system prevents the actions from completing successfully regardless therefore hiding ui components is purely for better ux rather than to enforce the permissions >>>beginner ember
draft password field clearing on login is bit weird removing the password from ember is important for security but at the moment it done before the transition away from the sign in page so it very obvious to users password https cloud githubusercontent com assets 101513 3699694 68c8faf8 13d7 11e4 9b8e 9646324dafc3 gif this is not major issue but it feels bit weird to me so if there is way to leave that field populated until it disappears that would be beneficial perhaps if there no way to manage doing it after the transition the effect could be achieved by fading the signin form out prior to the transition johnonolan pauladamdavis just throwing ideas around not sure what you guys think of the ux of this >>>bug
fail to resend invitation the initial invitation email is sent out just fine but when trying to re invite them the api responds with 500 error because the client failed to send role steps to recreate go to settings users invite new user click the resend link observe failure>>>bug
dont populate full name from email address when inviting new user it currently pre populates the full name field with the first half of the invited user email address this is unlikely to ever ever be correct it would probably be nicer experience if the page loaded with email pre populated and cursor active inside the full name field wonder if we should also reverse the order of the email and full name fields we will always have an email address for user makes more sense to have cursor in name field then tab down to password then enter right image https cloud githubusercontent com assets 120485 3692640 a8f4769e 135e 11e4 95fe a02bb1d51164 png >>>ember
sort roles dropdown by permission level order should ideally be administrator editor author image https cloud githubusercontent com assets 120485 3692596 18c3471c 135e 11e4 8e85 506b1bcf9881 png this can be punted to if it annoying >>>ember
add title helper refs 3387 to make titles on the frontend consistent with what is shown in the admin would like to propose helper to return the escaped title title this helper works similar as content and by converting the escaped title into safestring it doesn matter to the user if he double or triple stashes the output the result is always the same if we don want to add new helper it is also possible to remove the triple stash from casper and let the user decide or randomly discover how the titles are handled >>>themes
static page tickbox highlighting in post settings menu issue summary an odd area gets highlighted underneath the static page tickbox in the post settings menu when clicked just clicked not selected overview http puu sh ap3q2 8e8fcd251f png steps to reproduce go into the content tab on any post click the post settings menu click anywhere under the red line specified the highlighted area has in chance of appearing the threshold http puu sh ap3u8 f8aff6b538 png am running this on 1440x900 resolution and have also tested 1280x1024 so it seems not to be limited to specific scale or aspect ratio this is of course an extremely minor bug technical details ghost version master latest commit adecd284659c410 client os windows 64 bit server os windows 64 bit node version v0 10 22 browser google chrome version 36 1985 125 m>>>bug
forgotten password error notifications stack issue summary notification stack error on forgotten password screen when click spamming the form submit button similar to issue 3375 steps to reproduce bugs galore http puu sh ap1z9 e344b224a1 png logout click forgotten password type in either an incorrect email there was problem logging in please try again or an incoherent blob of text invalid email click spam the send new password you should see your screen filled with notifications technical details ghost version master latest commit adecd284659c410 client os windows 64 bit server os windows 64 bit node version v0 10 22 browser google chrome version 36 1985 125 >>>bug
permissions and models user permissable there hook in the permissions system where model class can have `permissable` method which allows it to make decision on pending operations against it https github com tryghost ghost blob master core server permissions index js l123 the user model does this https github com tryghost ghost blob master core server models user js l446 which needs to be rethought before mu ships as it opens up potential privilege escalation issue user can change his or her role >>>bug users
sign in page error notifications stack in certain circumstances on the signin screen you get stacked notifications http puu sh anpuk png steps to reproduce logout type your email address wrong don enter password but submit the form leave your email address incorrect enter password and submit the form do that again you ll have multiple stacked notifications don enter password submit the form and the notifications will clear down how they are supposed to technical details ghost version master latest commit 4968336b0fac874be0e8bc2af2f903e088c5d3a2 >>>beginner bug
sign page incorrect error message if you attempt to login with an email address which does not exist you see this error http puu sh anpqo png as per https github com tryghost ghost blob master core server models user js l507 the message should read there is no user with that email address steps to reproduce log out type your email address incorrectly enter your password submit the form technical details ghost version master latest commit 4968336b0fac874be0e8bc2af2f903e088c5d3a2 >>>beginner bug
incorrect error when an editor attempts to save the owner if you log in as an editor and attempt to save the owner user which you can currently browse to this error appears http puu sh anp0z png steps to reproduce create new user change the new users role from author to editor browse to the owner user either via direct url or by going to your profile hitting the users button and selecting the owner attempt to change something simple note despite the error the changes still get saved because 3096 is not done yet this is what was working on when discovered the issue technical details ghost version master 4968336b0fac874be0e8bc2af2f903e088c5d3a2 >>>bug
discussion handling permissions errors gracefully if you log in as an author you won get to see the persistent notifications because you don have permission which is awesome and correct and exactly what we want however on the server side this happens http puu sh ana6y png this is not the end of the world but seems sloppy not sure what the best course of outcome is but believe that permissions violations should be logged but perhaps bit more nicely my suggestion would be to downgrade the output to warning and output only the message without the stack trace any other thoughts suggestions >>>later permissions
close user settings popover the popover that allows to transfer ownership and delete user on the user settings page is not closed after an action is executed think there is currently no functionality to close this popover >>>ember
image upload conflicts blog logo set blog cover not set when have this configuration am unable to upload any image to my user profile settings page as soon as add blog cover can upload images to my user settings page when remove the blog cover the image upload on my settings page stops working again not sure if related to 3348 from earlier today >>>bug
pressing enter inside posts per page input triggers modal when pressing enter inside posts per page input the blog logo modal is triggered fmlmodal https cloud githubusercontent com assets 120485 3648502 f23c95a4 1109 11e4 83c1 ccd90aafccf1 gif >>>bug
create functional tests for mu updated so the problem is that we want to test the interface when there are multiple users there is lot of mu stuff to test with casperjs settings users page psm the interface changes when logging in with different roles in order to be able to test those things we need to be able to create at least user with each role in the system perhaps more erisds>>>tests
removal of cover image breaks user profile settings when add and subsequently remove cover image on my user settings page image https cloud githubusercontent com assets 120485 3646804 c07110e8 10f7 11e4 84ef 88be34334a9a png nb this occurred while 3331 was checked out not sure if related right now >>>bug users
importer not getting correct mime type trying to import files on the latest master and getting this quite unhelpful error http puu sh ajpvg png in my server console can see the following error http puu sh ajpyl png you can see that dumped out the type to try to understand why this was happening and discovered that it is getting `application octet stream` instead of `application json` steps to reproduce navigate to ghost debug` attempt to upload file used `core server export exported test json` witness the wonder technical details ghost version master latest ommit client os windows server os localhost node version 10 26 browser chrome 36 1985 125m also reproduced in ie 11 >>>bug importer
url helper doesn work correctly in tag context when using the url helper in the context of post it is expected that you get url for tag page something like tag slug` however at present the url helper always outputs which is incorrect steps to reproduce replace tags in your theme with something like and you ll see the url is incorrect this will seriously mess with large number of our themes technical details ghost version master latest commit >>>bug themes
reset password controller notifications see todo https github com tryghost ghost blob master core client controllers reset js l43 notifications haven been wired up in `core client controllers reset js` yet>>>beginner ember
image uploading issue hey guys ve just found that when writing post image files including unicode character in their name will never be successfully uploaded in my situation used image with name png and the uploading failed all the time when changed the name into pure english it just worked fine best regards >>>i18n
add roles model to admin client to implement 3086 who can see what we need to implement roles on the client see 3197 for reference>>>ember users
shorter auth token links our auth token links are currently so long 109 characters that they cause horizontal scrolling in the average email client it would be excellent if they were not longer than 30 characters longlinks https cloud githubusercontent com assets 120485 3611219 ad42987e 0d97 11e4 88ef b253fb249d92 gif >>>server
prevent execution of signin reset forgot if blog is not setup the following endpoints are publicly available and it would be good to return an error if the blog isn set up the main purpose of this issue is to prevent unwanted behavior that could be caused by these endpoints if used before setup `post ghost api v0 authentication passwordreset` `put ghost api v0 authentication passwordreset` `post ghost api v0 authentication invitation` `post ghost api v0 authentication token` the best way to check if the blog was already set up is probably to use the `issetup method from core server api authentication js` >>>api
prevent execution of setup if already setup the setup endpoint ghost api v0 authentication setup` is publicly reachable and it is possible to execute the setup process more than once this endpoint should return an error after the blog was successfully set up the best way to check if the blog was already set up is probably to use the `issetup method from core server api authentication js` >>>api
no users button for authors split from 3086 if the currently logged in user is an author and they are viewing their profile then the users` button which usually appears user button https cloud githubusercontent com assets 101513 3599927 07d2dd8e 0cf4 11e4 85cb cfb1de20479e png should not be there no button https cloud githubusercontent com assets 101513 3599933 0f328c1e 0cf4 11e4 86cc 2c09308c571f png note this is client interface specific and is not based on permissions we have canthis permissions on the server side which effect the api and the user ability to make data changes there is no client side permission system at present for now an if statement based on role will suffice >>>beginner ember
clean up the settings sidebar for authors and editors if the currently logged in user is an author when they are viewing their profile page they should not see any items in the left hand settings menu pane author profile https cloud githubusercontent com assets 101513 3599988 7591ed2e 0cf4 11e4 8316 41845b886be5 png if the currently logged in user is an editor they should only see `users` in the left hand pane editor profile https cloud githubusercontent com assets 101513 3599993 7d166ab6 0cf4 11e4 85b1 8cba3b795278 png note this is client interface specific and is not based on permissions we have canthis permissions on the server side which effect the api and the user ability to make data changes there is no client side permission system at present for now an if statement based on role will suffice >>>beginner ember
hide settings from the main nav bar for authors split from 3086 if the currently logged in user is an author there should be no settings item in the top nav bar no settings https cloud githubusercontent com assets 101513 3599914 efba27a2 0cf3 11e4 920b 2d636b5b545f png note this is client interface specific and is not based on permissions we have canthis permissions on the server side which effect the api and the user ability to make data changes there is no client side permission system at present for now an if statement based on role will suffice >>>beginner ember
debug screen should redirect for authors and editors split from 3086 if user visits ghost debug and they do not have the `admin` or `owner` role then they should get redirected to ghost note this is client interface specific and is not based on permissions we have canthis permissions on the server side which effect the api and the user ability to make data changes there is no client side permission system at present for now an if statement based on role will suffice >>>beginner ember
settings screens should redirect for certain roles split from 3086 settings user author redirect to their profile page settings general user author redirect to their profile user editor redirect to settings settings users user author redirect to their profile page settings users user slug user author user slug their own redirect to their profile page user editor user slug author redirect to settings users settings apps user author redirect to their profile page user editor redirect to settings slightly shorter version of these rules if we re anywhere in settings other than the user own profile and the logged in user is an author then redirect to their profile if we re anywhere in settings that an editor cannot get to anywhere except the users list screen the profile of an author or the user own profile and the currently logged in user is an editor redirect to settings note this is client interface specific and is not based on permissions we have canthis permissions on the server side which effect the api and the user ability to make data changes there is no client side permission system at present for now an if statement based on role will suffice >>>beginner settings
remove all hardcoded references to user throughout the codebase in various places in the models and api there are still references to the user with `id 1` we need to remove every last one of these with the singular exception of setting the created by field for the very first user every other instance should change to either be reference to the current logged in user id or should fetch the single user with the role owner >>>users
inviting users no validation for user email already taken at present if you attempt to invite new user with an email address for which user already exists in the system the process fails without any error this ought to fail with validation error saying that user with that email address already exists >>>bug users
invited users don appear when there are no other invitees split from 3222 this is sort of covered by 3229 on the user management screen there is list of invited users this list should and does only appear if there are existing invited users however when user gets invited whether the invite results in success or failure the invited users section should appear and the new user should be in the list currently if there are no invited users and user is added the list doesn appear if there is one or more invited users and user is added the list appears as expected user management https cloud githubusercontent com assets 120485 2717605 0ef8b780 c543 11e3 886c dcb1d121bdf0 png >>>bug ember users
users settings screen role labels split from 3222 on the users screen the role labels owner editor etc are currently hard coded but the user api has been updated to return roles with includes roles` so this should be relatively easy to fix up now user management https cloud githubusercontent com assets 120485 2717605 0ef8b780 c543 11e3 886c dcb1d121bdf0 png >>>beginner ember
data migration 003 split from 2600 data version info is here ghost versions https github com tryghost ghost wiki version info some work to ensure that migrations work has been done although fixing 3281 would be good this issue covers the need to formally test upgrading from all previous data versions to ensure that the process works smoothly test results test with user already setup data version sqlite mysql postgres 000 001 002 test without user data version sqlite mysql postgres 000 001 002 >>>data
import 003 split from 2600 data version info is here ghost versions https github com tryghost ghost wiki version info test that ensure that the importer correctly imports from 000 001 and 002 versions make sure the importer can import from 003 version once 3284 is complete move the import logic so that it belongs to the right data version ensure that the error messages are as useful as possible 3274 test results data version sqlite mysql postgres 000 001 002 003 >>>data
export 003 split from 2600 the export tool needs improving for 003 to ensure that data that needs exporting is exported correctly and stuff that ought not to be exported like the tokens is left behind additionally it would be good to sure up the export tool against broken data in order to resolve 3242 probably good idea to create basic database for all data versions with user and couple of tags posts and store the database in ghost versions https github com tryghost ghost wiki version info along with an export file>>>data
post permissions opening this up separate issue as there is an extra piece of work here here the post permissions table posts special rules visibility of posts is determined based on status ownership of posts is based on the author property not created by the post owner has all rights regardless of role api method admin editor author noauth browse status published or author self status published read status published or author self status published edit author self add destroy author self the resulting post config needs to look like the existing post permissions config looks like this so this needs amending browse read need better handling and we need to be sure that there are full tests for all of the different cases >>>api later permissions
lazy load settings doesn work lazy loading settings isn working properly at present it seems to fail silently and cause problems later noticed this when trying to upgrade 000 blog to 003 but there is much easier way to reproduce it steps to reproduce run the user api integration tests on their own node env testing mocha timeout 15000 ui bdd reporter spec core test integration api api users spec js clearly this shows this test isn independent but it also is really easy way to reproduce the problem that happens when the settings don populate there are no errors it just doesn work and the test fails more info ve been debugging this for while and have identified what is going on the findone in `populatedefault` in the settings model is missing return https github com tryghost ghost blob 6628127297494074a4a52c4235ae4b80ed119bfc core server models settings js l124 `populatedefaultsetting` in the settings api calls `readsettingsresult` and then `updatesettingscache` both of which expect to operate on bookshelf collection thing but it calls them with json representation of single setting https github com tryghost ghost blob 6628127297494074a4a52c4235ae4b80ed119bfc core server api settings js l199 think the missing return was masking the bigger problem >>>bug
settings users user always pulls down me the settings users user screen doesn pull the user it supposed to it always shows you your own account steps to reproduce invite shiny new user to your blog logout open your email and accept the invitation login and try to view the accounts they re both you guess this hasn been changed from being the current user profile screen yet technical details ghost version master latest commit 5095c6f0dd5dea15ecafc5eaa8f752c4c08e4814 client os mac os 10 server os localhost node version 10 18 browser chrome 31 1650 63>>>bug settings users
created by updated by always defaults to now that we have the ability to login as multiple users it has become apparent that the currently logged in user is not used to save create objects this is hard to tell with the permissions currently as they are because authors are not currently able to create posts due to another bug with that fixed it becomes apparent that every post is marked as belonging to user this appears to be the same for any all objects created or updated am working on fix for this >>>api bug users
regression import error messaging is no longer useful previously when you imported large json file which failed due to duplicate slug error which is pretty common the error message would be problem was encountered while importing new content to your blog error error importing data rejectionerror er dup entry duplicate entry self improvement for key tags slug unique in latest master that error message now reads simply as problem was encountered while importing new content to your blog error error importing data error sqlite constraint unique constraint failed tags slug am able to solve the issue having based on the former error message the latter error leaves me totally in the dark >>>bug importer
user website should be allowed to be empty currently the validations on both the client and server side are checking to see if the website is valid url but they are not taking into account that the website is allowed to be empty serverside http puu sh aayyn 4bc468c493 png additionally the website field gets autofilled by chrome with my email address which is not valid url pre populated http puu sh aajff 8332ad1a8b png >>>bug data
invited pending users when inviting new user there is chance that the invite email is not sent in this case the api returns an error message and the user is added to the database the user is then shown as invited user see 3229 to make it clear to the inviter which emails have been sent new user status `status invited pending was introduced in pr 3260 users with the status `invited pending` should be highlighted in the invited users list to show that the invitation emails need resending johnonolan we would need some design guidance on how the highlighting should look like >>>ember
bug tag input field is below visible window issue summary when adding tag you cannot see the input field since it is at 100 width and then drops below the visible screen screenshot 2014 07 13 19 10 34 https cloud githubusercontent com assets 747085 3564972 c1582210 0aa0 11e4 84bf 8f32ac02ca6c png steps to reproduce install new ghost create new login create new post click on tag icon in the bottom taskbar and begin typing if you disable the `width 100 css directive the issue goes away screenshot 2014 07 13 19 18 41 https cloud githubusercontent com assets 747085 3564978 56f3f66e 0aa1 11e4 9d55 14c720e2af84 jpg technical details ghost version master latest commit 6186ecb590852b0581c5c165d19b5d6c1c79ba4d client os mac os 10 server os mac os 10 node version v0 10 24 browser chrome 36 1985 103 beta database sqlite3>>>bug
move image upload to api the image upload endpoint is registered at ghost upload this endpoint is currently not protected by oauth and it is the last endpoint that has not been moved to the api would like to propose to move the image upload to ghost api v0 images` >>>api
excerpt helper prefixes all content with space excerpt outputs as blah there should be no space in front of blah >>>bug
validation for add user form go to users click on add new user submit the form without filling anything in expected behaviour some sort of please enter an email address validation even if it just html5 browser based actual behaviour modal closes and ghost red notification reads there was problem on the server please try again >>>bug ember users
broken navigation flow for mobile settings navigating to settings from anywhere within settings takes you to settings general rather than the settings overview menu settingsfuck https cloud githubusercontent com assets 120485 3554519 766b52ca 090d 11e4 869a 797672eb35cb gif >>>bug ember
import ghostdata json error value in tags uuid cannot be blank issue summary import ghostdata json error value in tags uuid cannot be blank steps to reproduce am using ghost in production for my blog since last months now http blog jsinh in with mysql as db to resolve few issue with the theme created decided to run local version of ghost on my development environment downloaded the ghost source resolved package dependencies and start exported the blog content from my production blog and get json file ghostdata json have done this before and export and import always worked fine navigated to the ghost debug of local ghost instance and tried to import this export data in local blog encountered following error error value in tags uuid cannot be blank screenshot from 2014 07 11 12 05 28 v01 https cloud githubusercontent com assets 1277539 3549513 7ac1b37a 08ca 11e4 9377 1eb62581e318 png on clean observation in the json file found that one data node was empty null screenshot from 2014 07 11 12 06 37 v01 https cloud githubusercontent com assets 1277539 3549514 7ac1d170 08ca 11e4 8cba dfb6bfd41922 png search my production database and found that same id 288 row exists this row is not having any value or null or empty expect the id as 288 due to this row it becomes totally impossible if am normal user or non technical or from jupiter for me to use this json export or use this export for blog data restoration if required issue or request to handle this scenario block all means from ghost to allow blank entry in tags table check for total empty null row during export ignore total empty null row during import anyone who had the same experience or faced the same problem technical details ghost version client os linux ubuntu lts 12 04 precise server os linux ubuntu lts 12 04 precise node version 10 29 browser mozilla firefox 30 database mysql>>>bug
privacy config flags from 3064 while we already have flag to disable ghost update checks would suggest that nice followup to this would be if there was config flag for every item in privacy md to allow it to be disabled if so desired along with blanket rule flag to disable absolutely everything perhaps `tinfoil true` to achieve this there needs to be config options for google fonts `googlefonts false` gravatar `gravatar false` rpc pings `rpcping false` we already have `updatecheck false`>>>settings
move admin from eak to ember cli the ember app kit has been deprecated in favor of ember cli http iamstef net ember cli why the eak may be deprecated but it certainly working for us and will for the foreseeable future so why we should bother needs to be addressed pros move client build steps out of grunt woo for smaller gruntfile faster smarter builds via broccoli hook into the growing ember addon space 3584 gets easier for instance first class environment configuration it nice ve been using it at work and liking it apart from early life issues but the core team is very responsive with new releases nearly every other week cons another build tool broccoli contributors have to `npm install ember cli bower grunt` now had to write pros and cons list blockers these are the things that think will make this hard or that are on my mind grunt vs broccoli `grunt dev` runs watch command that recompiles server or client assets whenever developer changes file moving the ember build step to an separate tool broccoli means that we need two processes threads to do this not just one ie `grunt dev` runs `ember build watch` we could potentially leave the watching up to grunt and have it call `ember build` every time but then we lose the benefit of broccoli intelligently rebuilding ember cli thinks it the root of project ember cli expects jshint package json and other project level configurations to be placed at its directory but that obviously not going to be the case with ghost assuming this can be configured tests ember cli tries its hardest to make sure you re doing tests and comes with qunit 2990 asks for mocha based test framework but believe anything better than nothing maybe the case here there may also be some issues between our already running our own test on the upside it runs on phantomjs base url ember cli builds out template with tag but we obviously don know where ghost will be served from this should be simple fix of removing the setup from ember cli and doing it ourselves save that ember cli is using an express server handlebars to build the tag so adding our own handlebars to the template will possibly be odd eh think this list works for now ll update as start trying switch >>>ember
bug invited user is not shown if email fails issue summary if sending the invitation email fails due to problem with the email service the invited user is not shown in the list of invited users immediately after refreshing the page the user shows up in case of an email problem the user is added to the database and an error `type emailerror` is returned to the client think that it would be good to refresh the list and ask the user to fix the email configuration and resend the invitation in this case steps to reproduce break your email config invite user error notification refresh screen to see user technical details ghost version master latest commit 09e03f4d78d17b2d1b1b3f452aff6933cd7cf1f6 client os osx 10 server os vagrant node version 10 26 browser chrome database sqlite3>>>bug ember
add user role to mgmt screen since the user role is now available from the api it should be possible to show the correct role on the user management page image https cloud githubusercontent com assets 539213 3524403 94117676 0767 11e4 8693 069ac5ed775c png the request to get all users with roles should be `get ghost api v0 users include role` morficus something for you >>>ember
bug theme setting missing issue summary when navigating to the settings page the theme setting is not pre selected if save settings without any changes ghost is broken because the empty setting is written to the database closing pr should solve problems active theme has is selected in admin api has to check if the theme is valid steps to reproduce log in navigate from content to settings using the navigation bar press save refresh and enjoy error 500 `the currently active theme null is missing technical details ghost version master latest commit 09e03f4d78d17b2d1b1b3f452aff6933cd7cf1f6 client os osx 10 server os vagrant node version v0 10 26 browser chrome database sqlite >>>api bug ember
option to disable unicode character conversion in post slugs hi after updating ghost noticed my titles are converted in weird way some search gave me change log https github com tryghost ghost wiki release notes important bug fixes which stated `unicode characters in post slugs are converted to ascii` as bugfix although this might be useful for some users to me it is more of bug than bugfix is converted to mshhdh mhtwyt fyl qbl dnlwd which even if leave alone the fact that conversion its unwanted its not even correct that text written phonetically with latin letters would be moshahede mohtaviate file ha qabl az download the converted version is not even readable no vowels >>>i18n
users settings screen pagination once we have all the api endpoints in place and working properly need to get the user management screen pagination working properly from https github com tryghost ghost ui issues 21 say 20 records and infinite scroll after that that is the screen should show 20 records and then use infinite scroll>>>ember
wire up resend button for invited users resending invitations see 3078 for reference is already implemented on the backend the api call that is used to resend an invitation is the same as inviting user if the user is already invited the email will be resent api call `post ghost api v0 users payload users email role `>>>ember
`grunt init` bower task fails if space in directory name and as result ghost signup page appears blank hey guys just cloned fresh copy of the repo to start on some theme development and ran into this issue basically after following the install steps and navigating to ghost signup was served with blank page after looking into it it appears to be caused by `grunt init` shell bower task failing due to my local directory having space in it after moving the file to directory with no space `grunt init` works fine not sure if it within the ghost team power to fix or if this is an issue with the bower module but figured open an issue in case other people are having this problem in the future >>>bug
cannot edit pub date when post has been created and has not been published yet the user cannot edit the pub date other than to completely retype it issue summary tested in firefox 16 and chrome 35 when user wishes to change the date of post he can only completely retype it post that have been published are fine and post that have been published then unpublished are also fine steps to reproduce create new post post that have been published unpublished are fine attempt to edit the pub date changing the date cannot be accomplished without completely retyping the date the user should be able to edit the date without having to retype it all technical details ghost version client os windows 64 bit ultimate server os ubuntu 14 04 server node version 10 29 browser chrome 35 1916 153m firefox 16 database mysql>>>ember
multiple parentheses in link breaks markdown problem want to link to link with paren in it for example http www irs gov charities non profits charitable organizations exemption requirements section 501 organizations use the normal md syntax for it link text http www irs gov charities non profits charitable organizations exemption requirements section 501 organizations expected behaviour regex matches the last closing paren before newline thus making the entire link part of the link link actual behaviour screen shot 2014 07 05 at 23 20 41 https cloud githubusercontent com assets 1196299 3487656 a84ff2ca 0492 11e4 8b09 76288ff949b1 png and the linked resource is incorrect gives 404 the link in actuality will be http www irs gov charities non profits charitable organizations exemption requirements section 501 ghost version https github com tryghost ghost commit 7f33eb3f4184361f5c8bd2f743cb5466daff139d master branch>>>bug editor
bug last login date format the last login field of the user object is returned as timestamp and not formated as iso 8601 date request `get ghost api v0 users me` response tested with sqlite3 master commit d5c2e1ba561b2a56f1564a3306aa429f2c4fdae3>>>api bug
add role to user object prerequisite for 3086 to be able to adapt the admin interface to the role of the currently logged in user we need to add roles and permissions to the user object user object should return its role and associated permissions role and role permissions are expandable attribute and are requested by sending the `include role` or `include role role permissions` query parameters get user object `get ghost api v0 users me get user with role details `get ghost api v0 users me include role` get user with role and permissons `get ghost api v0 users me include role role permissions` >>>api
add role endpoint to make available roles accessible by the frontend we need an endpoint to fetch all available roles `get ghost api v0 roles returns all available roles as second endpoint will be needed to get all roles user is allowed to assign 3079 `get ghost api v0 roles permission returns all roles filtered by permissions for example an admin will get all available roles except for the owner role and an editor will get the author role only implementation will have to be in accordance with 3083 >>>api
sourcemaps are broken feel like the title sums this up pretty well would love to have anyone with experience in these sorts of things jump in>>>bug
editor title input needs indirection issue summary post title changes can be saved without hitting the save button reproduction steps navigate to `editor edit` change the posts title in some way update the post slug this triggers save reload the page your title changes were saved as well >>>bug ember
exporter on ghost debug screen shows signin error if you press the export button on the ghost debug screen this is what happens type error message please sign in status passive `>>>bug ember
persistent notifications won close if there an error saving them issue summary if there an error on the `delete` request for `permanent` er non passive notification nothing whatsoever happens this makes the application seem unresponsive reproduction steps not skilled enough read have yet to google with my browser dev tools to make an api call fail so here my strong armed way of doing it start ghost with permanent notification my method start up fresh install with no email settings load the admin kill your server or otherwise ensure api calls will fail try to close that permanent notification specs win8 chrome master latest proposed solutions see two paths here for making us look good cloes even on fail the first is simply close the notification even though its api call failed pro responsive con they ll see the notification again next load notify of api errors the second which can actually be combined with the first is to create passive notification warning the user that their connection seems to have gone wonky downside here is we just created notification when you tried to close notification upside is this could be used beyond just notifications api failures any failed request could send one of these bad boys >>>bug ember
transient failure in the ember casper tests every so many builds the ember tests fail the output html shows that none of the ember content has loaded no content http puu sh 9s0a8 0a9576daff png have tried adding extensive waits etc and after bit of digging around ve found this fail http puu sh 9s0fg 163b59ce46 png it looks as though the files load in the wrong order which would make sense in an attempt to resolve this concatenated the lot together and minified it figured this would be good stab at 3161 but this still fails still fail http puu sh 9rzfs 406b3d8133 png this is really irritating >>>bug ember tests
route error on mobile devices issue summary whenever you directly load page such as ghost 1` you get the 500 error screen the settings screen seems fine steps to reproduce open ghost on mobile device or simulator note the new simulator in chrome canary does not reproduce this error see 500 error screen expected behaviour the page loads correctly previewing the post which matches the id in the url actual behaviour nothing the page dies ungracefully presenting the 500 error screem technical details ghost version master latest commit 9214f25deeab1a7dfa8352cd5323f38738144456 client os ios among others browser mobile safari among others here the error log from the ios simulator for an ipad running ios using the safari dev tools to extract the console messages https cloud githubusercontent com assets 390392 3441742 fa430f46 0108 11e4 9f74 72a4e6de99c9 png>>>bug ember mobile
unhandled rejection during tests see here https gist github com erisds dccd6e99e05c28d1cdcf seen during mysql build master 5cb5c5cf49e709183935efe2121fc2d8d5029f96>>>data tests
passive notifications blink out on hover issue summary passive notifications aren sticking around on hover in fact something pretty much the opposite happens hover kills the poor guys reproduction steps do something that creates passive notification quick and easy toggle post into static page mouse over the notification be sad that went away and that these little things keep popping up at the end of the ember milestone that sad too feel better because you know that somewhere out there there javorszky watching over you and he going to make it all better specs does everyone have my operating system and browser of choice down yet windows chrome latest latest master which is `c35884ea6ec6`>>>bug ember
ember js refresh on editor doesn get user if you load or refresh the admin on the blank unsaved editor screen it loses who you are unsaved http puu sh 9rqvx acba75f6a6 png note that this is as of my changes for 3056 and may be something to do with my work ve not verified yet >>>bug editor ember
ember js saved post doesn have active navigation once you save post the active navigation on the new post item in the nav goes away in the old admin this would have changed from pointing at new post to content boooo http puu sh 9rqbl 90ab3201fe png >>>bug editor ember
can go directly to settings user issue summary something blowing up in ember if you attempt to directly load ghost ember settings user this results in nothing being rendered reproduction steps enter ghost ember settings user into your nav bar and hit enter should get user settings but instead get nothing specs os win8 browser chrome latest commit master `c35884ea6ec65b75` >>>bug
get ember ready for production we need to look at having different modes for the ember admin things like logging need to be toned down meanwhile concatenation and minification need to be ramped up not sure what other considerations there might be this needs bit of research pro knowledge >>>ember
test the update notification works still the update notification is special persistent notification which appears in the top of the ui it is most likely broken since the ember re write it needs checking re implementing before we release >>>data ember tests
post settings menu reset slug date on error similar to 3134 see also this comment https github com tryghost ghost pull 3135 issuecomment 47550907 >>>bug ember
urls with two are truncated urls with two in them are truncated before the first underscore fine http www reddit com web design broken http www reddit com web design broken stuff>>>bug editor
ember js redirect authenticated user from signin posts found another bug with the new oauth flow user that is authenticated is not redirected when accessing the page opening this issue to keep track of problems with the oauth flow ll look into it probably the same solution as 3145 >>>ember
emberjs setup screen should redirect if already setup issue summary users can still go to setup` can see this happening in the real world with push of the back button say they changed their mind about the title after already setting up their blog clicking the okay let do this button second time will give them only one user at time error message rather than bro broooo your blog is already set up message propose doing `beforemodel` on the `setuproute` that redirects if the site has already been setup repro steps setup your blog go back to setup` specs commit master latest `2d64372` >>>ember
ember js bug saving new post with the psm doesn work right issue summary saving new post via the post settings menu doesn change the route or save the whole post the markdown field is still empty since the `markdown` property is only set equal to the `scratch` property on saving via save button https github com tryghost ghost blob master core client mixins editor base controller js l182 but not on the other times we save the model here one example https github com tryghost ghost blob master core client controllers post settings menu js l22 think we should probably create some kind of abstraction to be mixed among the editor controllers and psm and whatever else may need it in the future that performs actions necessary on every save automatically steps to reproduce click new post write up title and some markdown and perhaps tag or two click on the psm button the cog click the checkbox to save as static page you ll see no route change visit the admin home screen in new window you ll see the the post was saved but the markdown was not this is bug because well should be obvious by now smile cat technical details ghost version master latest commit 7eab416>>>bug ember
mobile settings do not open on the correct page issue summary when you go to the settings pages ghost ember settings on mobile no matter what the url is the page shown is the settings menu in other words going to ghost ember settings general shows the settings menu so the page shown in the settings section should match what is in the url steps to reproduce open ghost ember settings general in browser less that 800px wide see that the page shown is not the general settings expected results you see the general settings page actual results you see the settings menu technical details ghost version master latest commit 0436fb71d25d49e6a3900918892355985c16c619 >>>bug ember mobile
move setup to the api see https github com tryghost ghost issues 3072 issuecomment 47340914 for reference the signup action should get it own route on the api would like to propose the route ghost api v0 authentication setup` because it looks like we are going to assemble all authentication related end points there the implementation should be moved to core server api authentication js` as well >>>api
ember js setting staticpage in the editor succeeds on failure if there validation error or server error when toggling the static page checkbox in the editor the setting will still take effect in the ui this needs to be reset if errors occur >>>bug ember
ember js tags in the tag editor are sorted by id the tags in the tag editor are sorted by id if you input tag that already exists along with new ones and then save the tags will be re sorted it be nice to keep them in the same order while in the editor if possible >>>bug ember
ember js make editorcontroller isdirty handle tags properly right now the editorcontroller updates `previoustagnames` every time isdirty is checked it should only update when the editor is first entered and when the model is saved >>>ember
restore spam prevention due to the introduction of oauth the spam prevention is broken the api end points have changed and the an error is thrown before the spam prevention could do it thing to fix this the prevention checks have to be done before an oauth error is thrown >>>ember
signin after signup when new user signs up he was immediately logged in with the old client implementation due to the switch to oauth this flow is broken now the login is done by mixin which handles the authentication with the server and stores the access token that is returned from the server see currently two options to solve that problem find out if ember simple auth could be fed with data that comes back from the signup request and return an access token when user was successfully signed up send the authentication request right after the sign up request finished and find out how the authentication information could be set in ember simple auth any other ideas >>>ember
server model validation causing import failures there are couple issues with the schema model validations `server data validation index js` that are causing import failures and or data to not be validated the failures also result in unhandled promise rejections validations are skipped for values that are falsy `if model columnkey `validator isin` is being used to validate boolean fields see `schema js` but since `validator` methods operate only on strings exported data that contains `0` or `1` for `false` `true` will fail because they re first coerced to string and the validation becomes comparing the string or against the strings false and true the validation module is treating `null` and empty string as the same thing when in the database they re distinct values if empty strings need to be checked at this level `validations empty false could be used in the `schema js` declarations the failure can be reproduced by trying to import json file that has featured post featured or post set to be page page >>>data server
ember js signin validation validation for signin was introduced in 3051 with the introduction of oauth and `ember simple auth` the functionality was broken the new login system uses `ember simpleauth logincontrollermixin` to display the login page the validation would have to hook into the mixin to do validations as we were used to think darvelo started to look at it >>>ember
random mysql test failure needs investigation see here https gist github com erisds 5f0cb495b3b706a9912f>>>tests
discussion api endpoint for paging included note tag pages were implemented with an api call that effectively fetches posts filtered by tag that tags info rather than tag its posts this isn technically correct as covered by 2667 given the short time frame for mu it may be quicker to implement user pages in the same way for now and replace 2667 with an issue to fix both of these api calls later from 3077 erisds have looked into this issue and now wonder how the api endpoint for the fix should look like we are fetching single user in 3077 and want all the users posts this includes pagination api v0 users include posts` this does not include pagination and page 1` isnt clearly bound to the posts api v0 users posts include posts tags posts fields page 1` this seems better it however is unclear whether this would only return posts by user id or the user including all posts api v0 users include posts posts tags posts fields posts page 1` this seems the most reasonable and consistent we fetch user all the users posts and paginate posts this could potentially easily be abstracted so we can paginate `post fields` when we fetch post suggestions ideas >>>api
implement ember navbar pop out menu on small screens see pauladamdavis comment below for gif of how this should work here what ember does now clicking on the button just takes you to the blog front page cantnavigate https cloud githubusercontent com assets 1207005 3388404 c2ab2350 fc87 11e3 9144 46d9dd27ed57 gif >>>ember mobile
ember js don change the url on the content screen the url on the content screen ought to remain the same rather than append an id as it doesn really make sense in this context >>>ember
overly aggressive would you like to save notifications this is amazingly annoying understand the point of it but can we come up with something little less sensitive fucksave https cloud githubusercontent com assets 120485 3387493 dc7b07c2 fc7e 11e3 8860 7cb38c5a2355 gif nb the first time the modal suddenly disappears is cause my automatic reaction to this is fuck off modal esc key which accentuated it further in this instance >>>bug ember
disable success notification for feature unfeature action just tell me if when something goes wrong don need my entire screen spammed up just because minor action worked correctly notificationhell https cloud githubusercontent com assets 120485 3387217 a4e41afe fc7b 11e3 83ac a5e6559059f4 gif >>>ember
touchscreen editor needs padding issue summary when both the editor and preview panes are simultaneously visible the first few lines of the post disappear behind the floating header demo gif http www novaugust net blog wp content uploads 2014 06 padding gif repro steps be on touchscreen laptop see my specs below open the editor screen have the window wide enough that the mq for editor preview kicks in type some text it below the header specs laptop lenovo yoga touchscreen laptop os win browser chrome 35 commit `df8e7263e17cec86`>>>bug ember mobile
missing hrefs on tags image https cloud githubusercontent com assets 120485 3386607 2b478c94 fc76 11e3 9e9e 8968fee3e0d8 png the post management settings cog has lost its `href` which means the hover` state of the cursor no longer functions it needs an `href` even if it just disabling the default functionality clarification missing href removes browser default hover state eg cursor pointer this is currently an issue in several places post management settings cog editor settings cog global usermenu dropdown also unable to right click on this why the delete item in the post settings menu>>>bug ember
users api deleting users json api admin editor author noauth users browse users read users edit user self or user author user self users add user author users delete user owner user author note authors cannot delete even their own account the flow of deleting user will include way to transfer ownership of stuff >>>api users
users api advanced browsing based on 3086 it has become apparent that it needs to be possible to further filter the results of users browse on the admin settings users screen an editor can only edit authors so it is preferable if they only saw the authors in the list this means we need to be able to request browse to restrict the results by preferably who the current user can edit `permissions edit` either way this is not absolutely critical to delivery of mu so it is separate issue to be done at the end if we can >>>api users
user api permissions restrict based on role in 2264 the permissions for the user api were defined as json api admin editor author noauth users browse users read users edit user self users add this is not quite correct and should be json api admin editor author noauth users browse users read users edit user author user self users add user author this is related to 3080 and 3083>>>api users
mobile editor markdown preview tabs not clickable issue summary somewhere in the ember rewrite the ability to click the markdown preview tabs in the editor has been lost they are still tapable on touch screens but clicking with mouse does nothing just to reiterate tap on mobile works click on desktop doesn steps to reproduce open ghost admin on desktop browser resize the window to below 1000px click the preview tab expected result preview tab is clicked and you see the rendered markdown actual result nothing no errors no nothing technical details ghost version master latest commit 4bc166e2525d21a6ba387f310464afa96416c011 >>>editor ember
regression grunt init warning is missing the warning introduced in 2594 to notify users that it is not safe to use master is missing atm >>>bug
transfer ownership requires https github com tryghost ghost ui issues 33 an owner has one power that no other user has and that is the power to transfer ownership image https cloud githubusercontent com assets 120485 3074228 3fa8b6fc e32d 11e3 9bc9 c240240f8be0 png image https cloud githubusercontent com assets 120485 3074230 5dd208ea e32d 11e3 9a50 63efaa46ddc0 png this issue covers both implementing the ui which can only be seen by an owner and any api changes needed >>>api users
multi user admin ui who can see what updated based on comments this is good reference material https github com tryghost ghost issues 2264 note there are likely to be some subtleties here that won be clear until we ve actually tried logging in as particular user this is the best guess we ve got in advance of how it should work overall ui author doesn see settings in the navbar all other roles can see the settings item settings screen author cannot get here editor only has the users pane available settings users screen author cannot get here editor gets version restricted to authors editors can only edit author level users can invite authors only can see list of invites to authors can revoke invites to authors can edit authors note because editors can only edit authors it would be nice if the user list only showed authors however that is counter to the api which will return all because editors can browse all users see 3097 therefore it ok if this list shows all active users as long as only the authors are clickable content list screen author can browse all their own posts can only edit their own posts so no post settings or edit icons if they don own the post editor can browse and edit everything editor screen author can access the editor to create new posts or edit their own author cannot access the editor to edit other people posts editor can edit any post note because authors can only edit their own posts it would be nice if the content list only showed their stuff however that is somewhat counter to the api which will return all because authors can browse all posts we re going to need to change the post api to handle this issue tbd because the author cannot see the settings screen this makes editing their own profile accessible through the user menu somewhat weird esp from url perspective there is probably another issue to be done here dealing with permissions errors anyone trying to do something for which they don have permission should see an error short term this is probably the error template with 403 and reasonable error message preferable is to send them back to ghost with an error notification but this may be too time consuming for now >>>users
users api advanced browsing the browse method of the user api needs updating to have more advanced functionality it needs to be paginated with default of 20 items only users with status of `active` should be returned by default there should be query param to request alternative statuses including invited inactive or all an author no auth user can only see active users>>>api users
post settings menu author dropdown this is awaiting an issue in ghost ui to style this correctly there is plan for shiny new post settings menu but in the meantime we are just going to add dropdown to the existing post settings menu the dropdown should list all of the available authors in the system the dropdown should not be available to authors on new post it should default to selecting the current logged in user on an existing post it should default to selecting the author of the post changing the dropdown should change the author of the post and fire notification to say so>>>ember
user roles api who can invite what role the user api will need to be updated to honour the following the new owner role can do anything it likes an admin can invite user and that user can have the admin editor or author role an editor can invite user but that user can only have the author role an author cannot invite user as well as enforcing that user is not able to create user with role it shouldn be able to we also need way to determine the list of roles user can create in order to correctly populate the dropdown in 3079 the dropdown should be correctly populated as result of this issue >>>api users
invite email signup screen ui changes https github com tryghost ghost ui issues 22 may introduce new html email template and there are likely to also be minor amendments to the signup screen to make it clearer that you re accepting an invite after 3081 this issue is placeholder for those changes >>>users
user api accept an invite please see the invite flow description in 2982 following on from 3080 the old signup screen should be re purposed to allow user to accept an invite this also requires api changes but it should be straightforward enough to do both the api changes and the screen changes in one go the user should land on the signup screen with token which should be checked their email address should be pre populated but editable given the token is valid and their credentials are also valid submitting the form should update the existing user with the correct values the user status should be set to `active` and they should be automatically logged in>>>api ember users
user roles api invite user please see the invite flow description in 2982 rather than straight create endpoint for adding users we need to be able to invite users inviting users should do the following create new user in the db with populated email address but most other fields should be blank single space random value depending on whether the field can be null an invited user should have status of invited an `invited` user should not be able to login all invited users should default to being `authors` to begin with until 3083 is implemented send an email to the given email address very similar to the forgotten password email which invites them to signup and gives them url with token similar to reset password token the token should be valid for longer than forgotten password token maybe weeks >>>api users
invite user modal requires 3078 add button http puu sh 9i8fh 67859ddf2f png the add button on the new `users` screen created in 3078 needs to be wired up to show the invite user modal image https cloud githubusercontent com assets 120485 2717696 8d77840a c544 11e3 8cb1 10b0d0fb276b png to begin with `author` should be the only role available in the dropdown until 3083 is implemented the pre styled html for this new screen is here https github com tryghost ghost blob master core client html user management html the original ghost ui issue is here tryghost ghost ui 21 >>>ember settings users
first pass new user management settings screen image https cloud githubusercontent com assets 120485 2717605 0ef8b780 c543 11e3 886c dcb1d121bdf0 png the pre styled html for this new screen is here https github com tryghost ghost blob master core client html user management html the original ghost ui issue is here https github com tryghost ghost ui issues 21 the current ghost ember settings user screen needs to be replaced with this screen the label and the url should change from singular `user` to `users` we need to get this screen in place asap so this issue doesn cover adding any behaviour just get it wired up to pull real data we only have concept of `active` users at present so the `invited` users part of the screen won appear>>>ember settings users
helper updates for user pages requires 3076 we need helper updates for our user pages similar to 2112 url helper update for user pages once the feature for user pages exists the url helper can be updated to support outputting urls in the user context question should we also update the default output of the author tag we did this for tags and it broke lot of themes quite badly perhaps we should output warning that it will be changing in future version >>>themes users
shiny new user pages in very similar vein to 2111 tag pages for mu we want to add user pages user page is the profile page for particular user which contains details about user and paginated list of their posts the route for user pages should be users slug the user page will provide the template with paginated set of posts for the given user which can be accessed via foreach posts in exactly the same way as the standard post list is rendered using index hbs additionally user pages will provide the template with all the data for the given user such that it can be accessed via user in the same style as the post hbs template the new user controller will support template view hierarchy much like page hbs post hbs if there is template called user hbs this will be used to render the page otherwise user pages will use the standard index hbs which lists out posts if the user doesn exist the page should 404 not show an empty list see 2667 note tag pages were implemented with an api call that effectively fetches posts filtered by tag that tags info rather than tag its posts this isn technically correct as covered by 2667 given the short time frame for mu it may be quicker to implement user pages in the same way for now and replace 2667 with an issue to fix both of these api calls later question is there need to be able to turn this feature off either for all users or specific ones >>>themes users
owner permissions requires 3073 an owner should automatically have all permissions regardless of whether they are core or created by an app or any other means should it ever exist recommend that canthis be updated to always return true if the user has the role `owner`>>>api users
change setup to hijack the owner user requires 3072 and 3073 instead of creating new user on setup update the existing owner user with the name email and password provided in the setup flow set the status of the user to `active` so that they can login >>>data installation users
owner role fixtures and migration see the new owner role explanation in 2982 add new owner role setup fixture for user which has the owner role that user should not be able to sign in by default their status should be inactive and they should not be allowed to login if ghost blog doesn have user the owner user fixture should be added to the db if ghost blog already has user the owner user fixture should not get added but instead the existing user should get the owner role>>>data installation users
new setup screen and process for blog installation replacing the old issue 1794 first run https cloud github com assets 120485 1821507 9a5e1af8 7134 11e3 9767 ae2a431c5374 png when installing ghost setting up the first user ghost should redirect to ghost setup instead of ghost signup the setup screen should look like the above screenshot pre styled markup for the screen exists here https github com tryghost ghost blob master core client html setup html the setup process has blog title which is additional to the old signup process this will need validating and wiring up to get saved on the server side on the server side the blog description should be automatically set to thoughts stories and ideas by user name everything else should work exactly as per the old signup screen the user should be created and automatically logged in the welcome email should be sent etc question should the setup be posted to an admin route or do we need to move this onto the api say leave it as an admin route for now note the routes mentioned assume the ember admin is now the default but that doesn have to be done first >>>ember installation users
regression have to click times to load posts on mobile first click runs the network activity 2nd click does the animation transition licecap sadly cropped out the nprogress bar what happening is click nprogress loads click again the panel slides repeat lolwut https cloud githubusercontent com assets 120485 3371782 eab76d2e fba4 11e3 9249 4d62bfd23a08 gif >>>bug ember
regression zen mode is dead on the editor ctrl shift should trigger zen mode fullscreen editor with hidden toolbars which worked pre ember this is regression zen mode should be able to be disabled again by pressing ctrl shift or esc>>>bug
no flashy cursor in the editor when the cursor is in the markdown field of the editor it should blink in latest chrome firefox on mac it does not blink >>>bug editor
ember js incomplete tags still visible when navigating between posts steps to reproduce open edit post page enter text in tags area without completing tag navigate back to content list then edit different post bug incomplete tag is still visible because we re using singleton controller for the posttagsinput so that parent controllers can call trigger it actions we don get the benefits of automatic cleanup proposed fix is to fire the reset action when the view is destroyed unless someone has better idea >>>bug ember
ember js persistent notifications persistent notifications are missing from the ember admin we have an api to fetch them from for first implementation we need to make sure they are fetched on first load of the admin and that they are not closed on transitions along with passive notifications >>>ember
draft ember js make the ember admin live this is somewhere to keep track of the things that will need doing so that when we re ready it easy to do delete the clientold folder change the root url for the ember admin to just ghost remove the old server side admin routes remove the no longer needed admin handlebars helpers delete the old casper tests remove references to ember from the new casper tests beware of the ghost login` redirect and the test for it in signin test js >>>ember
ember js admin doesn work under subdirectory adding subdirectory to your url in `config js` causes ghost to be served from that subdirectory and subsequently the ember admin to not work at all steps to reproduce change your url in config js to something like `http localhost 2368 test try to load test ghost ember technical details ghost version master>>>bug ember
ember js trim title on editor screen the old admin has feature whereby the title is trimmed on blur https github com tryghost ghost blob master core clientold views editor js l46 this needs implementing on the ember editor note pr 3034 has commented out test for this >>>editor ember
ember js focus title field when new editor is loaded as per the old admin when the ember version of the editor is loaded the title field should be focused ready for the user to start typing >>>editor ember
ember js add nprogress for save events following on from pr 3024 it would be really nice to have nprogress work on post settings and other save events whenever data is sent off to the server and we are waiting for the server to respond before continuing this would be an improvement over the old editor >>>ember
ember js validation for settings general following on from 2846 settings general needs validations setting up the existing validations are here https github com tryghost ghost blob master core clientold views settings js l166 please note pr 3034 includes some commented out tests https github com erisds ghost commit 33401990e5e57d4bc76af6c09441b83e29209c95 diff c623c02cb19739e3d9120b7ce3356f1er112 for these >>>ember settings
ember js settings character countdown from https github com tryghost ghost issues 2846 issuecomment 46679448 via novaugust on the clientold the blog description is counting down from 200 characters image https cloud githubusercontent com assets 1207005 3340734 2ab4cba0 f881 11e3 9b14 c8caa01bf18c png on ember the blog description is counting how many words you ve typed which isn quite so useful image https cloud githubusercontent com assets 1207005 3340726 1c214348 f881 11e3 9de8 3b91975c94d0 png note that the counter also changes colour when you start running out of characters>>>ember settings
ember js settings apps pane should only be available if set in config js the settings app pane is wip in the old admin it is only available if `apps true` is set in config js this needs reimplementing in ember this is related to 2956 as both of them require way to pass config option to ember >>>bug ember
ember js convert settings apps to use the new api requires 2423 and 2465 once the new api endpoint for apps is ready the apps screen needs to be converted to use it there is only one action on this screen at present toggle activate deactivate so hope this will be reasonably straightforward not sure if ember data will be required necessary >>>apps ember later
keyboard shortcuts for ctrl should only work for under mac see the wiki page https github com tryghost ghost wiki keyboard shortcuts currently wip any keyboard shortcut that is listed as `ctrl needs to work with ctrl on every platform except for mac on mac it is different and the shortcut ought to only work with `` update can use `if navigator useragent indexof mac to detect mac >>>bug ember
translations ar translate to arabic start translation to arabic>>>docs
ember js session expiry is not handled if you leave the admin panel open over night when you come back to it you will have lost your server side session you can still click around the admin but nothing will work the content screen will show the loading pane forever etc steps to reproduce log in to the admin panel leaving the admin panel cause your session to expire you can change it in the db click around the admin panel inc visiting content believe any `401` response from the server should cause the admin panel to redirect to the signin page technical details ghost version master latest commit ae728534ea6aadcab16d4c111e71e801b0d677a8 >>>bug ember users
keyboard shortcuts ctrl for bold ctrl for italic ref 2752 1463 now that we have way to add shortcuts to the ember editor 2752 we need to start re adding all the old shortcuts two really obvious shortcuts ctrl for bold ctrl for italic should operate as follows if text is highlighted it should wrap the highlighted text with the correct markdown `` `` for bold for italic0 and the cursor should be placed after the text ready to start typing again if there is no text highlighted it should place the correct markdown where the cursor is and move the cursor inside of the correct markdown ready to type the text that should be styled >>>editor ember
keyboard shortcuts fix the alt ctrl altgr clash our shortcuts for headings and also for strikethrough both use combination of `alt ctrl` on most keyboard layouts used with windows there is an `altgr` or `right alt` key this `altgr` key is equivalent to `alt ctrl` and is frequently used in combination with other keys to produce special characters it is therefore not recommended http en wikipedia org wiki altgr key control 2b alt as substitute to use `alt ctrl` as modifier in custom keyboard shortcuts for windows unfortunately there are not really any good combination of modifier number key which can be used for the headings it has therefore been suggested that we use `ctrl cmd h` to cycle through the headings it would also be preferred to replace `alt ctrl u` with some other combination for strikethrough google docs uses `alt shift 5` >>>editor ember
ember js bring across mobile features from old admin we re not going to have time to implement big mobile plan for 2333 so in the short term we need to make sure that the new ember admin is at least as good as the old admin on mobile therefore we need to port across the mobile interactions https github com tryghost ghost blob master core clientold mobile interactions js from the old admin into ember js >>>ember mobile
ember js notifications implement closeall see 3016 implement `closeall for notifications to remove all the currently visible passive only passive notifications from being visible stub is here https github com tryghost ghost blob bb88b3664fae3d6bed092e2098975fef89f71133 core client utils notifications js l51>>>beginner ember
keyboard shortcuts esc to close modals ref 2752 1463 there is currently `todo` in the codebase for this https github com novaugust ghost blob e10c0f20cfcb6e8a19cd2abcd8580e7ea5f90b3e core client routes application js l11 `esc` closes popovers and notifications it should also close modals >>>ember
keyboard shortcuts up down navigation of posts list ref 2752 1463 pressing the up and down arrows on the main content screen should navigate up and down through the post list the difficult part of this will me ensuring that the active item is visible in the left hand pane adding some auto scrolling the implementer of this feature probably needs to be aware of this bug 3008 the keyboard shortcuts are in place for this what left to do is making it work it is new feature and therefore not high priority for the release in the case that this cannot be done in time the existing shortcuts which cause an alert should be commented out >>>ember
ember js post first save issue on error if you try to save brand new post with no title then an error appears in the console this error prevents the blank title error notification from displaying it does appear along with the success notification if you then do successful save steps to reproduce open the ember admin with the console open click new post click save technical details ghost version master latest commit bb88b3664fae3d6bed092e2098975fef89f71133 >>>bug ember
ember js passive notifications should clear on user action any passive notifications should be cleared when user interacts with the admin again for example if user transitions to another screen if user presses save button editor settings or otherwise triggers save via post settings or keyboard shortcut >>>bug ember
add polyfill when running tests and remove lodash dependency in 2978 added lodash dependency for bind` and isnumber` because casper js phantom js doesn have the more modern js functions available in it run environment adding dependency was possibly not the smartest solution long term given that we still don really need lodash for anything other than making the tests run it would probably be better to inject polyfill into ember when running in the `testing` environment >>>ember tests
ember js feature request modal title playing around in the ember settings general tabbed away and came back and had forgotten just which modal had up and was playing with the settings screen pops up two modals for images one for the blog cover and one for the blog logo it be great if those words could be at the top of the modal itself to remind the user just what they re up to image https cloud githubusercontent com assets 1207005 3340927 4931720c f883 11e3 9086 9eadf3b2ca94 png great cover bad logo >>>ember
ember js first item in post list is not always the active item on the content screen if it is accessed without specific post id then the first item in the list should be marked as active whilst testing the ember admin with mysql where the database doesn get rest and there ends up being hundreds of draft posts after time the first item in the list isn always active sometimes the 3rd or 4th item seems to be the active item have feeling this is to do with the reordering code steps to reproduce setup your `testing` env to use mysql run `grunt test functional` few times uncomment the test on l47 of content test js run `grunt test functional` few more times run `node env testing npm start` and login to the ember admin to witness this first hand this is bug because technical details ghost version master latest commit 9145d3cfc1558f4f4e555fe7e617cf53bf0fc2c6 only repro on mysql but may also occur on sqlite >>>bug ember
adding limit 15 to posts api calls causes an sql error in mysql the ember admin currently adds `limit 15` to the api calls made from the content screen this is unnecessary and can be removed but it also highlights problem as if you switch to mysql database the call results in the following error steps to reproduce setup your dev env to use mysql instead of sqlite try visiting ghost ember technical details ghost version master latest commit 0c006927995669656bd8fbb76ba2f8bc5d764810 database mysql this happens both locally and on travis >>>api
ember js delete post modal is broken on both the content screen and editor the trying to open the delete post modal throws an error in the console uncaught error assertion failed cannot call get with undefined key this is on latest master >>>bug ember
ember js calls to post api should all have include tags when post is fetched created or updated the call to the api needs to send include tags so that we get tags back in the response >>>bug ember
ember js settings settings content doesn get an id in the old admin whenever pane is selected the element with the class `settings content` gets and id for the pane if the general pane is active then the element gets the id `general` etc this is used in the ember tests but not sure if it otherwise required for anything so this probably isn massively high priority pauladamdavis can you confirm whether this is needed for anything in ghost ui >>>settings
ember js tag component doesn save tag if it hasn been completed in the ember admin if you save post with tag that hasn been completed the little tab with an has popped up and surrounded the tag then the tag is lost effectively the ember admin is missing this https github com tryghost ghost blob master core clientold views editor tag widget js l35>>>bug ember
ember js unit tests testing ember with casper js 2989 will give us an overview of whether the admin is functioning as we expect however ember apps also lend themselves well to unit testing and there are certain sections of the admin which would benefit from being tested in this way standard ember unit tests use qunit but ghost makes heavy use of mocha so it is preferable if the unit tests can be run using mocha >>>ember fix_wanted tests
ember js functional tests we desperately need to get our casper js test suite to run against the ember tests so that we have some idea of how the new admin is matching up with the old one >>>ember tests
keyboard shortcuts alt shift for zen writing mode this depends upon 2752 `alt shift z` should toggle the class zen on the body element this will transition the editor into zen writing mode zen mode http puu sh 9y4zu ede449e7ae png >>>editor ember
unhandled rejection messing with tests there appears to be some sort of unhandled rejection messing with the tests unhandled http puu sh 9y0of 21190897a7 png causes the build to exit successfully but without running any tests >>>tests
keyboard shortcuts ctrl to add link this depends upon 2752 and replaces 2865 and 2444 once we have way to add shortcuts to the ember editor 2752 we need to start re adding all the old shortcuts but only after having researched and ensured that the shortcut makes sense one that we are now 100 sure about is that the shortcut to add link should be `ctrl k` this should do the following if text is highlighted it should wrap the highlighted text with place the afterwards and the cursor should appear inside the ready to input the url if there is no text highlighted it should place the where the cursor is and move the cursor inside of the ready to type the text that should be linked >>>editor ember
feature multi user description adding multi user support for ghost so that teams of people can write blog together this involves administrators editors and authors shazam details the new owner role the `owner` is user which is one level above admin an owner can do absolutely anything no permissions apply to them or rather `canthis` should default to `true` if the user has role `owner` there can only ever be one `owner` in ghost blog and user with role `owner` cannot be deleted an `owner` can choose to transfer `ownership` that is the `owner` role to any other admin user the `owner` role will be setup with single user as fixture that user will be commandeered or taken over by the first signup setup in existing ghost blogs the single current admin user will be upgraded to an owner the new setup flow ghost blogs will be installed or setup from the new setup screen the signup screen will no longer be used for creating the first user but only for creating new users the setup screen includes the blog title as well as the user details the setup screen will hijack the new owner role user which will be fixture the invite flow users will be added to ghost blog by being invited the invite screen is shown here https github com tryghost ghost ui issues 21 the new owner role can do anything it likes an admin can invite user and that user can have the admin editor or author role an editor can invite user but that user can only have the author role an author cannot invite user an invite creates user with an empty name and password but with an email address the invited user has status of invited once invited user is sent an email with url with token similar to forgotten password url the url takes them to the signup screen and allows them to enter their name and password and pre fills their email address it can be changed the signup process then completes the details of the user and changes the status to active the user is automatically logged in the plan don normally write up plan of what issues need to be done first but in order to deliver mu very very fast thought it would help getting ghost mu ready involves three main tasks making it possible to create and manage multiple users making the admin safe for multiple users and adding features to make ghost work nicely with multiple users the individual tasks should be able to run concurrently although it will be tricky to test the safety and features without having at least users in the system and that will be easier once the creation and management tools are in place so that has to take slight priority to that end ve grouped the issues above into phases that can happen concurrently will ask that people pick up and deliver items from phase first followed by phase phase issues for 8th july setup setup screen wiring 3072 owner role fixtures and migration 3073 2399 first pass new user management settings screen 3078 invite user modal 3079 user roles api invite user 3080 user api accept an invite 3081 users api deleting users 3100 security xss prevention 1378 probably needs new issue csp 332 features shiny new user pages 3076 helper updates for user pages 3077 phase issues for 15th july setup change setup to hijack the owner user 3074 invite email signup screen ui changes 3082 users api advanced browsing 3085 user management settings screen part 2422 tryghost ghost ui 21 needs new issue user edit profile screen 2422 tryghost ghost ui 33 needs new issue draft finish up the 003 data version 2600 security race condition fix 1834 transfer ownership 3087 permissions owner permissions 3075 additional permissions 2739 user api permissions restrict based on role 3096 user roles api who can invite what role 3083 ui cleanup who can see what 3086 features post settings menu author dropdown 3084 user email address hide publicly 2330 >>>epic users
ember js successful signout notification the old admin has notification when you sign out sign out notification http puu sh 9wchw 00bb947454 png this is currently missing from the ember admin halfdan do you know if this is something to do with the changes in the new notifications api or has it simply been missed out >>>bug ember
ember js signin signup validation am aware that at present there isn clear plan for how to implement validation once decided we need to re add validation to the signin and signup forms rjackson darvelo am right in thinking you two have talked about validation bit can you please document the discussion link to the irc chats in comments here so that we can move it forward thanks >>>ember
ember 403 forbidden errors after signin csrf issues are causing `403` errors in ember admin right now unless the application is refreshed after signing in it result of workaround we have in place 2820 and the express and middleware upgrades specifically the new `csurf` package which replaced the original built in `csrf` package the workaround relies on private variable csrfsecret` being set on the session and `csurf` uses `csrfsecret` instead additionally when you don have to refresh the app to interact with it the ember generated signin controller persists with the username and password properties entered during login and upon signout the signin screen will have those fields pre filled steps to reproduce sign out of the ember admin screen refresh the page to clear the slate and then sign in try to create update post or sign out and the action will fail you can see the 403 in the developer tools network console >>>bug ember
discussion possible app states while working on the apps api it became clear that when deactivating soft deleting an app all the belonging app fields should be deactivated as well this however brought up the question what app states there are and how an app can transition between those active inactive do we just have toggle between active inactive active or is there need for something like `installed` `uninstalled` `deleted` limiting the states to just `active` and `inactive` would help me lot `deleted` status would be non existent and only mean that hard delete has been performed entries in apps app fields app settings deleted >>>api
feature request delete post dialogue box to display post title url issue summary users can retrieve deleted posts https ghost org forum using ghost 3367 retrieve deleted posts is this possibility and the confirmation dialogue box message has been improved https github com tryghost ghost issues 2027 would it be further improvement reminder to also display the post title url within the dialogue box while ve not yet fallen foul of deleting the wrong post myself would the possibility of this happening possibly be significantly reduced by reiterating the post title url to users can please suggest consideration be given to replacing the text are you sure you want to delete this post with are you sure you want to delete the post title url my hb terminology is probably incorrect but sure you get the gist apologies if this is deemed an unwanted feature due to unnecessary wordiness thanks >>>beginner ember
ember js trailing slashes disappear when navigating directly when navigating to url by typing the full url into the address bar including the trailing slash the trailing slash is removed so if you go by typing it in to ghost ember you end up on ghost ember and if you go to ghost ember` you end up on ghost ember and if you go to ghost ember 1` you end up on `ghost ember but if you go to ghost ember you end up on ghost ember 1` in more readable format typed landed on correct ghost ember ghost ember correct ghost ember` ghost ember correct ghost ember 1` ghost ember correct ghost ember ghost ember 1` incorrect ghost ember editor` ghost ember editor correct ghost ember editor ghost ember editor` incorrect this is true for all routes but also if you logout you land on ghost ember signin but if you try to go to the signin or signup routes with or without the trailing slash you always end up without although it flashes up with the slash in the middle of the request again in simple format ghost ember signin` ghost ember signin` incorrect ghost ember signin ghost ember signin` incorrect ghost ember signup` ghost ember signup` incorrect ghost ember signup ghost ember signup` incorrect >>>bug ember
ember js outputted routes urls should end in trailing slash this will extend upon the work done in 2771 my intuition tells me the logic to modify is either in the ember linkview class or it handlebars helper >>>bug ember
ember js reimplement mobile editor following on from 2426 2895 we need to also make the editor work on mobile again the mobilecodemirror shim needs porting across to ember for now it can load under the same conditions as it did previously however there are known bugs with this see 2570 that can be fixed at the same time if the person doing this has bright idea if not then it should simply load as replacement editor if the current device is touchscreen device >>>editor ember mobile
ember js reimplement filestorage option for uploads there is config js option called `filestorage` which needs to be updated to work in the ember admin the `filestorage` option is rough version of our plan to eventually allow different methods of storing files at present you can store files locally in the file system or you can turn file storage off completely which currently only applies to images in the event that `filestorage` is set to `false` the uploader dropzone in the editor and on the settings pages should show the url screen by default instead of the upload drop screen and should disable access to the upload drop screen the value of `filestorage` essentially needs to be prefetched data stored as an html data attribute or some such in order for this to work >>>ember
ember editor route can find posts with low ids issue summary when you have large enough number of posts to have them broken into multiple pages in the api you are unable to go directly to ghost ember editor 1` as the first post is not returned in this api call https github com tryghost ghost blob master core client routes editor edit js l23 repro create enough posts to start paging 15 think enter ghost ember editor 1` in your browser and go redirected to ghost ember` as post was not returned by the api specs win master `df8ba5f439062119922f98ab`>>>bug ember
ember js tags sent from editor along with post are null when saving post from the editor ember data tries to send the tags to the server with only their ids since they were generated on the client the ids are all null so the request ends up as >>>bug ember
ember js transition user to original url after signin signin needs to check if the user was heading somewhere besides ghost ember and route them appropriate after signin if user is not signed in and goes to ghost ember editor 2` or any other particular url ember will redirect them to ghost ember signin` and lose the state of where it was they actually were going >>>bug ember
bug static pages dont work when dated permalinks are active when switching to dated permalinks the static pages stop to work because of check `post page 1` in the code when reworking the api this was missed and is apparently not tested kudos to novaugust for pointing that out pr is inbound >>>bug
ember js bug editor save button can unpublish issue summary the editor save button is broken on master repro steps open published post in the editor click on the little up arrow that lets you changes what the save button does and click on unpublish be sad because that did nothing tech specs windows master `4406d350c43d6899dad088c2bba` >>>bug
ember js editor tab index when you re mouseless it good to have the tab button do logical things on the editor screen want be able to jump from the post title field to its markdown by hitting tab but right now end up in the navbar if do that see also 2752 >>>ember
ember js slug calls are causing lots of 500 errors pretty much anything you do on the content screen or editor currently causes errors errors http puu sh 9is6b b8dc6cc954 png guess one of the recent changes has niggle in it >>>bug ember
paginate all the things in our current implementation ghost returns inconsistent results for `get` requests that return more than one object ghost api v0 tags `users` `tags` `settings` and soon `apps` return all elements from the database `posts` returns paginated result with meta information this behavior is inconsistent and should be changed to return paginated result for all api calls that return multiple objects the post model has `findall and `findpage methods atm `findall returns all existing post objects and is only used for deleting all content we would like to keep the use case but remove `findall by allowing `all` to be passed as `limit` parameter default pagination options page limit 15 allows `all` think it is worth investigating if it is possible to implement generic `findpage method in `base js` and override it for models with special requirements >>>api
bug ember js save post with blank title there some really strange behavior that happens when trying to `save draft` post with no title in ember issue summary saving post with no title sends `422` error code from the server but ember ignores it and saves the post regardless seriously things will get weird weird refresh to fix the problems are local in ember expected behavoir ember should not save post with an empty title and show send `notification` letting the user know they must have title in there reproduction via new post create new post or edit an existing one 1a if it an existing post delete its title click on save draft without putting anything in the title click on the content link have fun system specs os windows commit ref `b7aca05d95f50ad4b464`>>>bug ember
change backup location prior to every database migration backup of the current database saved see 847 the location of the backup is core server data since user data is stored in the content` folder the location of the backup should be changed to content data >>>beginner
ember js out of order loading of posts if we allow post to be loaded individually from the api via the editorroute or postspostroute during refresh back button it should be in the correct spot of the posts list as more models are loaded during infinite scroll >>>bug ember
error running ghost with socket setup instead of host port at the moment there is an issue if you want to run ghost instance that listening on the socket issue summary the following error is reported when running ghost instance configured with socket instead of host port combination error cannot call method on of undefined typeerror cannot call method on of undefined at users anndes desktop kostia common ghost master core server index js 279 20 at nearfulfilledproxy when users anndes desktop kostia common ghost master node modules when when js 501 43 at promise message users anndes desktop kostia common ghost master node modules when when js 426 25 at array deliver as users anndes desktop kostia common ghost master node modules when when js 319 at runhandlers users anndes desktop kostia common ghost master node modules when when js 385 12 at array 87 users anndes desktop kostia common ghost master node modules when when js 352 at runhandlers users anndes desktop kostia common ghost master node modules when when js 385 12 at drainqueue users anndes desktop kostia common ghost master node modules when when js 836 at process tickdomaincallback node js 459 13 at process tickfromspinner node js 390 15 the issue comes from core server index js file on line 279 as visible from the stack above further investigation of this file shows that httpserver variable is not assigned at correct time when using sockets that is the httpserver variable is undefined on line 279 since line 264 asynchronous call is not yet completed to set the variable steps to reproduce modify config js file to listen on socket start ghost npm start the error will display in console technical details ghost version master latest client os mac os node version 10 24 browser chrome >>>bug
ember js api status code for http api delete responses in working on 2849 ve run into an issue where ember wants to call set operations on post model objects after they have been deleted had `destroyrecord called on them and this causes ember to throw exceptions believe this is because ghost is currently returning status `200` and the json for the object in response to `delete` requests to the http api according to http www w3 org protocols rfc2616 rfc2616 sec9 html sec9 feel like we should be returning `204` with an empty response body ve changed the api response locally and confirmed that everything works as expected with `204` response thoughts refs 2187 >>>api
ember js popover fadeout currently the ember popover `gh popover` only fades in with no fade out ref 2418 and 2840>>>bug ember
update slug api to work for tags and users the new slug endpoint located at server api slugs js` will currently only work for posts it expects `title` from which to generate slug whereas both users and tags have name instead also the endpoint currently only lists posts and tags as being allowed types it would probably also be good idea to make it work for apps which also have `name` >>>api
consider changing the keyboard shortcut to ctrl for create link use lot gmail and ghost and the fact that the shortcuts for creating link are different has always bothered me am only posting this as an issue because might not be the only one ghost `shit ctrl l` gmail `ctrl k` google docs `ctrl k` office excel and word `ctrl k` libreoffice no shortcut >>>ember
ember js update csrf without refreshing there are certain cases in the new ember admin app such as 2842 where the current csrf is invalidated and new one is needed to successfully complete future requests currently the only work around is to refresh the page but that is undesirable this issue is to implement something that will allow for updating the csrf set on the client with out the need to ever refresh the page reload the entire application >>>ember
ember js update location when new post is first saved creating new post and saving it as draft publishing it should update the location from editor` to editor x` where `x` is the id for the post >>>ember
ember js bug editor postid 404 on draft issue summary entering the url ghost ember editor pid will 404 when that post is draft steps to reproduce turn your first post to `draft` status click on the edit button so that you re at ghost ember editor refresh the page baby you just 404 at glance this is because ember using this route `http localhost 2368 ghost api v0 posts to find posts without the status all` query param technical details ghost version master latest commit `61dbed0` os windows os windows node version 10 25 browser chrome 35 database mysql>>>bug ember
ember js post validations at the moment there is some code for validating posts but it isn working properly trying to save post without title doesn work and doesn provide an error also think we need to consider unified approach for validations maybe using another library like https github com dockyard ember validations although we probably need to keep using the same validation library we re using on the bank end to ensure consistency additionally there are validations defined in `schema js` not sure if there is any way we can reuse this in ember as we do on the server side there is validation happening think on the settings general screen and that is hooking properly into notifications but it seems to require hardcoding the validation to happen on save which imo should be baked in somehow like to find way to define that models must be validated before they can be saved the ember validations library does something like this at the controller level according to rjackson additionally updated the post model to have default data for some fields which are not allowed to be passed to the serverside as blank although not sure if this is the best approach note there is also an open issue to port over the correct notifications 2850 this issue is meant to deal with creating consistent way to do validations >>>data ember
ember js re implement nprogress in the old admin we had nprogress wired up to show us progress of all loading events although it was bit buggy see 2033 think we need to wire this back up to show for all ajax requests not sure if it also needed for view transitions >>>ember
more filestorage abstraction currently we have abstracted out part of the file storage in ghost such that images are stored via `localfilesystem` class this abstraction is complete in so much as that all the methods and checks to do with the file system when storing an image go through this object but it is incomplete many ways there is no defined interface that all storage classes must implement `save` `serve` `exists` there is no check that all the methods `save` `serve` `exists` exist there is no way to change what class is used it is hard coded although you can turn it off with `filestorage false` resolved in 4600 this storage abstraction is only used for images not for themes apps or other files like export files this could easily be split into multiple issues however for now ll leave it as one and anyone wanting to tackle it can split it if they like the main steps are going to be clean up the existing implementation so that there is proper interface and checks expand the abstraction to cover the storage of themes and apps and probably export files but this may need deeper consideration different issue make it possible to configure different storage classes for different objects via config js this is an environment thing that would need configuring via config js regardless of whether the class is in core or separate file keep in mind that alternative file storage classes may want to change the location of where things live to another location locally or remotely change how stuff is stored from being in files to being in database implement mirroring between the local storage and remote storage like cdn there is chicken and egg problem to consider with apps given that apps are one of the things being stored can they really be used to configure alternative storage given that the config is still in config js this will need some smart careful use of the `filestorage` setting in config js to make sure things happen sanely finally consideration is needed with regard to using different storage for different things perhaps themes and apps live somewhere different to images the work that was done in 4600 to add configurable storage classes just for images gives us this format the string passed to `active` is the name of the storage module being used the folder in `content storage that contains the code the config block with the same name defines the configuration for that storage module these options are passed to the storage module to be used to configure things like api keys moving forward we want to be able to support storing themes apps separately to the file system as well but each object images themes apps etc may be stored differently to do this we need to extend the current config to make this backwards compatible we should use the following logic if string is passed to `active` this is assumed to be the storage module to use just for images if an object is passed to `active` then each object can have different config any object that doesn have custom config uses the default local file store >>>in_progress server
ember js error pages 404 etc at the moment 404 render blank page in ember this should be our nice error page as it was before also visiting ghost ember as dkas ldks a` style urls redirects back to ghost ember top id` if the id param in the url isn even close to being valid id we should probably make this 404 >>>ember
ember js save post notifications the old admin has an extensive map of notification messages used when saving post in various ways https github com tryghost ghost blob master core clientold views editor actions widget js l31 this needs porting over to the ember admin it might be good idea to make the save button component so that this logic can live in the component itself rather than in the post controller >>>ember
ember js delete posts now that we have ember data it should be possible to wire up the delete post action hitting yes in the modal should delete the post success error should result in notification with the same text as in the old admin >>>ember
ember js loading screen design think we need to address come up with plan for what to do when ember is loading at the moment it goes to screen that looks like this screen shot 2014 05 21 at 11 15 57 https cloud githubusercontent com assets 176576 3038076 a5ceeab2 e0c8 11e3 93d7 1f846d64054f png this happens particularly noticably on the content screen >>>ember
ember js debug screen so far the export and import functions work correctly however there are no notifications and the delete all and email functions do not work therefore the following tasks need to be completed make the delete all button work make the test email button work ensure there are notifications for all successes and failures and that they are the same as they were in the old admin >>>ember
ember js settings general tab needs to use real data the settings general tab needs wiring up with real data it should fetch and store settings using the rest api it should validate the settings at least as well as the old admin if not better it should provide notifications on save or error the same as the old admin note the upload modal still requires finishing before we can complete every part of this tab >>>data ember settings
ember js post settings menu the post settings menu needs work change to use ghost popover done in 2840 make it so it displays correctly with the arrow pointing in the right direction done in 2840 it should be correctly populated with placeholders using the same logic as in the old admin consider moving it into it own component or rendering separate view controller as it has quite lot of code relating to it and keeping it in the post controller is quite messy think ensure that the notification messages are identical to what they were in the old admin>>>ember
ember js notifications should render html at present notifications in the ember app are escaping html rather than rendering it success http puu sh 9aanj 9126be76a2 png this needs fixing so that it is rendered properly >>>beginner ember
ember js forgotten password flow at present there are screens and controllers for the forgotten password flow but the process isn working and there is also work left to do such as validation and notifications it should be possible to complete the flow and have everything working 100 the same as before except not sure if it depends on 2822 >>>ember
ember js user logout right now you can log out in the ember screen there is no log out function and the button is just plain old link to nowhere >>>beginner ember
mailer module refactor as 2742 painfully reminded us the mailer module needs boatload of refactor the current implementation has circular dependency between mailer and the api the module should only concern itself with sending mail as per given data and returning status depending on whether sending it was successful or not api calls and settings readings should be done earlier erisds can you assign this to me please have few ideas of where to move stuff subject to all other ideas obviously>>>api
cache invalidation for post update recently we did 2632 the idea being that the `x cache invalidate` header should only be sent if post is published because draft posts wouldn be cached there was complexity in that we also had to ensure we captured the change from `published` to `draft` so that if post became unpublished the cache would be cleared and it would disappear properly it has just occurred to me that when we were implementing and testing this we got so hung up one capturing status change that we only set the headers if the status has changed and not when post is updated the `x cache invalidate` header should be sent if published post is in anyway updated as well as if the status changes in either direction the only time it should not be sent is if draft post which was already draft post is updated and the update does not include setting the status to published >>>bug server
ember js fix slug generation for ember admin slug generation on the ember admin is currently throwing tonne of 404s it needs updating in the same vein as 2826 >>>ember
translations es spanish translation here it is round let go sunglasses >>>docs
cleanup prepare the user api for multi user see https github com tryghost ghost issues 2601 issuecomment 40710901 for reference there are several changes that need to be made to the user api add destroy method move changepassword to be part of `user edit` if old and new password are provided change the password move resetpassword to be part of `user edit` if new password and token are provided reset the password move internally used functions `validatetoken` `check` and `doesuserexist` to be private change generatetoken to be `post ghost api v0 users token` with the body set to token email user example com this will move onto new authentication resource when we start looking at oauth there will be further issues to change the behaviour of add register to work for multiuser >>>api users
feature request auto scroll in mobile editor while typing wrote post up on my galaxy s4 yesterday and noticed that while typed once the text got below where the keyboard was on the screen could keep typing but the editor wouldn move up so could see it would have to manually scroll down to see my text then continue typing not sure if there is way to change this and if not manually scrolling really is not big deal but it would be great if the mobile editor auto scrolled while writing just like the web editor >>>editor mobile
ember js settings user controller stores password in plain text about the furthest thing from an expert on security but the settings user controller https github com tryghost ghost blob master core client controllers settings user js l33 stores the password in plain text locally sorry if this isn an actual issue ghost password https cloud githubusercontent com assets 1207005 3074719 55bc7c5e e34f 11e3 9a0b eaa5d1cc5874 jpg >>>bug ember
ember js there should not be post when logging into ghost ember the first post is post but should not be valid id ember post http puu sh 8yyda png >>>beginner bug data ember fix_wanted
post settings menu actions not working for posts with tags in content preview screen the switch to using json api for the posts object has caused some of the actions in the settings menu in the content preview change url change publish date and static page to not work correctly on posts that have one or more tags feature post is also not working looks like the issue is the backbone view is not receiving model that populated with the complete tag object or fetching the includes itself and the post model on the server is expecting tag objects not an array of tag ids obviously not huge deal since the ember admin is coming but the test suite didn catch the failures ve got pr on the way that tests for success on all those actions for posts with and without tags steps to reproduce start ghost navigate to the admin area add new post with tag and save it navigate to the content tab and select post click the settings menu in the preview pane click static page change the url or change the date >>>bug
update theme asset max age to match other assets see https github com tryghost ghost issues 2447 issuecomment 43844431 now that we ve released at least versions since adding the asset helper it is safe to set the max age for themes to be year rather than an hour matching with what we use for all other assets https github com tryghost ghost blob master core server middleware index js l288 note to myself so can find it later erisds this requires an announcement comms with the theme developers >>>themes
ember js correctly handle post loading display in the current ember admin after signing in to ghost ember` you are redirected to ghost ember when refreshing the page with cmd it hangs in `loading screen presumably because request to ghost api v0 posts returned 404 screen shot 2014 05 21 at 11 15 57 https cloud githubusercontent com assets 176576 3038076 a5ceeab2 e0c8 11e3 93d7 1f846d64054f png in addition to the above when selecting post that exists in the database api requests returns properly and then refreshing the page the post will not get highlighted on the post listing sidebar ember admin https cloud githubusercontent com assets 176576 3038111 1130f16a e0c9 11e3 9b0e 69aaff636d63 gif >>>ember
image upload feedback stops when editing markdown there are lots of image upload bugs so sorry if dupe tested firefox 30 mac when editing the markdown as an image upload is progressing all visual indication of the upload happening goes away and the upload never populates the editor haven check to see if the actual image upload stops but whether it does or not the ui failure makes you have to upload it again >>>bug editor
ember js admin auth redirects at the moment the admin authentication redirects that we have in server routes admin js` and `server middleware middleware js` don apply to the ember admin these are the redirects like redirecting signin ghost if the user is logged in and redirecting signin signup if there is no user yet whilst the ember admin lives at ghost ember this is going to involve bit of hacky duplication but think it will be useful to add so that we can see the full extent of what is and isn working >>>ember
no pubdate for rss messes up etags for the feed rss module takes an optional property `pubdate` which is used for header in the rss xml ghost does not provide this value and current time is used by default this in turn messes up http response etag headers as the rss feed seems to be different new etag is generated for every request thus `if none match` requests do not work making etags work properly would make it possible to return an empty 304 response to such query instead of the full rss feed proposed solution use the date of the newest message as `pubdate` for the feed >>>bug
cookie expires test randomly failing had test for the 12hour session cookie randomly failing earlier on https travis ci org halfdan ghost jobs 25140028 will provide pr to fix that >>>tests
notifications api request format cleanup in my pr 2732 wip cleanup refactor api option names deliberately left out notifications because they appeared to not have the correct request format just yet it looked to me like they could use little look over to bring them up to date with the cleanup consistency changes made related to 2739 the notifications api also needs canthis permissions adding to it >>>api
ember js authentication with oauth in order to entirely separate our ember admin ui from the server side we re going to need to build slightly different authentication mechanism given that we want to add an oauth provider to ghost in order to allow oauth for the api it seems to make sense to also use oauth for the main user login there is library called ember simple auth https github com simplabs ember simple auth which adds support for doing all kinds of authentication including oauth by including this library think we open up lot of potential possibilities for people to extend the ghost login with different oauth or other authentication providers which is something that has been asked about quite bit not sure if this is the best library it was just the first ve come across but thought put this out there as it related to 2413 and we re going to want to look at putting authentication into the ember admin pretty soon >>>ember users
api option handling refs 2187 in our current implementation wrong or misused options are removed and the request is carried out without the options this behavior makes our lives bit easier in regards to error handling but invalid values for valid options should not be accepted and return `400 bad request` request parameters that are not supported at all could be ignored as most other web applications do example request `get ghost api v0 posts status green` result `400 green is an invalid status request `get ghost api v0 posts test true` result same result as `get ghost api v0 posts for internal api requests new error class `invalidoptionerror` could be introduced >>>api
unsupported method for route refs 2187 if method is used that is not supported by the route `404 not found` error is returned from the available http status codes would say that `405 method not allowed` would be better fit additionally we would make it easier to debug for external integrations in the future example request `put ghost api v0 posts response `404 no ghost found `>>>api
check objects for api calls refs 2187 2697 we currently do not check the object of an api call for allowed or required properties before processing it if the check fails there are two possible error states this could lead to badrequesterror 400 json structure is malformed and therefore could not be understood missing root key empty body this is related to 2697 example structure wrong `put ghost api v0 posts 1` validationerror 422 json structure is valid but property is missing not allowed this will probably require to define list of required and optional properties maybe it is good idea to derive include this list from in `schema js` and use it with our validation example my markdown not allowed `put ghost api v0 posts 1` >>>api
ember js keyboard shortcuts have good read of 1463 the ghost app has number of different types of keyboard shortcuts markdown shortcuts like `ctrl shift i` for the image upload editor shortcuts like `ctrl s` to save component shortcuts like `esc` to clear notification or the tag suggestion bubble navigation shortcuts like up and down arrows to move through the tag suggestion bubble these are just the start of what we want to do ideally we want to have whole set of action shortcuts for navigating around the admin like press `n` when not in content editable field to make new post it would also be good to have `esc` cause all modals popovers notifications etc to close we also need to overhaul the existing shortcuts to make them not clash with foreign characters in various locales see 1463 for the epic which links to most of the existing bugs because we want to have to many different types of shortcut we need to have holistic approach to implementing them we need to decide on if we want to use tool or library to help us if there is truly ember way to do this and what it ought to look like do the markdown shortcuts need to live elsewhere to the navigation ones etc see this comment https github com tryghost ghost issues 2752 issuecomment 45213684 for details of what the outcome from this issue should be >>>ember fix_wanted
ember js settings currently active pane on the current admin the current active settings pane is indicated on the left hand side with borders to the top and bottom being added and the one to the right being removed current http puu sh 8lbjk png this doesn currently occur on the ember admin ember http puu sh 8lbkf png the active class needs to be added back in so that it appears correctly >>>beginner ember fix_wanted
ember js settings fade between panes on the existing admin when you click between the general user or apps panes the existing pane fades out and the new one fades in this animation needs to be reimplemented on the new ember admin >>>ember
ember js content screen featured posts on the content screen there is star button that is meant to allow you to mark post as featured featured http puu sh 8lbdt png currently the button exists on the ember admin but it doesn work additionally items marked as featured don get the star in the left hand list this should automatically update when the featured star gets clicked ember featured http puu sh 8lbba png >>>ember
ember js editor save publish button the save publish button is one of the more complex components in the ghost admin it is popover and should behave as such opening when the up arrow icon is clicked and closing when something is selected or when user clicks else where the default state is in draft mode opening it up allows you to choose between draft or publish mode current http puu sh 8lasx png publish mode makes the button go red to indicate the status of the post will change current publish http puu sh 8laci png once post is published the button changes published http puu sh 8lagb png choosing unpublish makes the button go red again unpublish http puu sh 8laij png clicking the items in the popover set the mode of the button the mode is also indicated by tick mark next to the relevant item in the popover clicking the button itself is what should cause the action to fire clicking the button should update the post potentially also causing status change at the same time >>>editor ember
ember js content redirect implement the content redirect for ember ghost ember content ghost ember this is in lieu of the days when we have dashboard at ghost and the blog posts live at ghost content `>>>beginner ember fix_wanted
ember js user menu should link to profile the user menu item your profile needs to link to ghost ember settings user it doesn do anything at the moment existing http puu sh 8l7ie png >>>beginner ember fix_wanted
ember js user menu styles the user menu doesn quite look right at the moment here what it is meant to look like existing http puu sh 8l7ie png here what it looks like right now ember http puu sh 8l7jt png the actual user won display for now but the component ought to be the correct size and shape please can somebody fix it >>>ember
ember js correct route for debug page currently the ghost ugly debug tools are reimplemented at ghost ember settings debug` to match the existing editor this needs to be ghost ember debug we ll look at moving this stuff to permanent home sometime soon >>>beginner ember fix_wanted
mail api implement way to change the transport and add test this is closely tied to 2650 and 2715 where sebgie had great idea so pr incoming shortly hopefully >>>api
ember js correct behaviour for trailing slashes ve noticed the following when browsing around the ember admin when first loading up the admin by browsing to ghost ember it takes me to ghost ember 4` this should be ghost ember with trialing slash if refresh the page the slash appears assume this is connect slashes kicking in similarly if am on the post list and click the pencil icon to edit the post end up on ghost ember editor 4` without trailing slash if click on `editor` get taken to ghost ember editor` if click on `settings` get taken to ghost ember settings general` clicking between screens also doesn have trailing slashes if refresh any page get trailing slash guess that connect slashes is working for all server requests but that ember router hasn been configured to enforce the slashes hopefully this is just configuration option somewhere >>>ember
discussion permission dependencies im branching this off of 2739 as think this deserves more discussion am having trouble with the notification permissions once we have multi user think it is more than likely that apps would want to show persistent notifications your article foo was published by editor this would mean that notifications need to relate to certain user this user should then be allowed to delete the notification so admin me considering the please set up an email transport notification on startup notification should only be shown for users in certain role in this case only for admins an editor author would not care about the notification are they allowed to delete it though think similar permission issue may arise with posts is an author allowed to delete his own posts right now the answer is no what does an author do when he accidentally created post call an editor think it would be beneficial to introduce self permission for bread operations meaning that can execute those operations if created the entity in question use case for this might be for posts an author cannot read posts unless they are his own keeping in mind that at some point people will be able to change roles permissions we should think about how permissions depend on one another `theme edit` uses `theme browse` to validate that the theme that the user is trying to activate actually exists if were to create new role where allow user to `edit` but not `browse` themes because reasons it would break the `theme edit` api method solution would be to move the internal true we have introduced for the settings api up into the permissions check how would the settings api know that it is allowed to touch core settings >>>later permissions
additional permissions related to 2600 and 2264 003 needs to contain some additional permissions for mail send send test for tags adding editing deleting for notifications browsing adding deleting and possibly fine grained reading of individual instances suggest the following tag json api admin editor author noauth tag browse tag read tag edit tag add tag delete notification json api admin editor author noauth notification browse notification add notification delete add should probably be possible as an internal thing mail json api admin editor author noauth mail send mail sendtest >>>api data
permissable doesn take apps into account as discussed here https github com tryghost ghost pull 2732 issuecomment 42937859 and on irc http 107 20 237 151 8081 logs 23ghost 20140513 am102634 post permissable user permissable don take into account app permissions we may also need settings permissable it may also be worth considering how we can deal with the special noauth rules where published posts and blog settings are available to all etc as defined 2264 so that this can be part of canthis rather than workaround in the api >>>api
better strategy for updatetags the `updatetags` method in `server models posts js` manages the adding and removing of tags when saving post it quite complex function it is hard to read little bit prone to breakage we get reports of tags not being added properly see 2283 and it also has very little test coverage from `model posts spec js` hint you can run blanket on just this file to see by temporarily modifying `blanked coverage js` removing the `requiredir` statements and adding just `require integration model model posts spec js to the end we can probably reduce the overall complexity of this function quite significantly by using different strategy instead of figuring out which tags to detach and which ones to attach detach all tags and then attach the completed new set the steps would be call `post tags detach to detach all tags perform the tag wherein query to find which of the new tags already exist create any missing tags call `post tags attach to attach all the new tags once the method has been refactored we should make sure that `model posts spec js` fully covers both creating and updating posts with tags being created attached and removed >>>data tests
make db import backwards compatible after moving the db api to json api format db exporteddata we still need to support imports from data generated with the eariler json format `exporteddata` >>>api
ember js use ghost popover on post settings menu publish save button the post settings menu see 2618 currently implements its own buggy popup behavior the publish edit button 2747 also needs popover fixup depends on 2418 >>>ember
ember js fix the icons in the admin nav bar in the original backbone admin nav bar there are icons for each of `content` `new post` and `settings` original admin menu http puu sh 8di9y png in the ember admin all items have the content icon ember menu http puu sh 8di8h png each item should have class which adds the right icon >>>beginner ember
fix unhandled rejection errors there are number of unhandled promise rejection errors which are shown in the server console if you navigate around the backbone ghost admin particularly on the editor screen >>>bug
about the content in ghost editor use content the result is the same content expect content >>>bug editor
ember js ember model vs ember data vs placeholder for continuing the discussion from today meeting here the link to the discussion http 107 20 237 151 8081 logs 23ghost 20140506 pm52129 essentially we are trying to decide what the future of the data layer in the ghost admin looks like right now we are using ajax but it feels like we re having to do lot of work ourselves that would be done for us by other solutions specifically we re looking at ember model https github com ebryn ember model ember data http emberjs com api data and orbit js https github com orbitjs orbit js tree master as potential solutions or should we just stick with ajax for now note the outcome from this discussion should be clear plan on how we are going to deal with models data documented on https github com tryghost ghost wiki ember admin ui>>>ember
introduce utility functions to ease api handling internal handling of the api is becoming bit more complex and uglier than originally thought we have lots of places now where we only need to access the first element or even specific key of the first element of an api response one example is https github com tryghost ghost blob master core server api users js l54 in addition to having to access the first element we always need to check whether the correct elements were provided to the api https github com tryghost ghost blob master core server api users js l10 l15 this can be unified to work for all entities we had quick discussion about this in irc http 107 20 237 151 8081 logs 23ghost 20140506 pm32954 this can happen as part of the ember work as it will not touch api responses just clean up certain parts of the internal api handling also dibs >>>api
add logic for determining the best http status code to return with multiple errors this was discussed at length here https github com tryghost ghost issues 2643 issuecomment 41168893 essentially our api is capable of returning multiple errors potentially although very unlikely this could result in multiple status codes as per the todo https github com tryghost ghost blob 39e654e9c345fdcb7d65ba9fa18840f19ca13e32 core server api index js l152 we need to consider what to do in the case that multiple different errors generate multiple different status codes do we return the worst how do we measure worst or do we return simple 500 to cover the whole lot or some other strategy >>>api
add distinct error classes this issue is an improvement to our error handling suggested by appleyaks in https github com tryghost ghost issues 2643 issuecomment 42112831 we are using the following errors with the corresponding error code in `api index js` badrequest 400 unauthorized 401 nopermission 403 notfound 404 requestentitytoolarge 413 validationerror 422 emailerror 500 internalservererror 500 all existing api errors should be replaced by an error class that holds the corresponding error code internal api requests are expected to deal with the error object returned and `api requesthandler has to convert the object into valid json response >>>api
discussion api time format at the moment we use the iso 8601 format for dates and times returned internally and over the api the date format has to be converted to epoch time when sqlite is used since the database doesn support date time formats that means that every read or write operation in sqlite has to do date conversion was wondering if there would be benefit in using epoch time format for all internal timestamps and only convert them when needed or shown to user thoughts iso 8601 epoch time if we are going to change to epoch time we would need to change the date time fields in mysql so this is probably an issue for the future milestone since datatype changes are not supported yet >>>api
published date changed with post update on occasion when post is updated after publishing the viewable date of publication is changed also it appears that the ability to set the aforementioned post date is broken thanks edit made new post with updated bug report gizmoray>>>bug
update check isn reporting data properly the update check does lot of api lookups but these haven been updated in line with the api changes some of them also seem to be failing with permissions problems this needs investigation to ensure that the the update check reports data properly and tests added to make sure we don lose visibility on problems with it >>>api bug
creating post and tag at the same time results in an incorrect response under certain set of circumstances editor tag widget js l298 https github com tryghost ghost blob master core client views editor tag widget js l298 is throwing the error uncaught typeerror cannot read property touppercase of undefined this happens when trying to save again or publish after an initial save which included brand new tag it seems that the response from the api when creating new post and creating tag at the same time is incorrect steps to reproduce start writing new post give it title give it tag which doesn yet exists save the post as draft try to save the post again technical details ghost version master latest commit ca3b378 db sqlite3>>>api bug
fenced code blocks should use language classes hi currently fenced code blocks just translate the language if given directly into the class javascript content produces content according to the hmtl5 spec http www w3 org tr html5 text level semantics html the code element the recommended way to markup code with language prefixed class content think ghost should follow the spec here >>>bug editor
translations ar translate installation main page this is for installation main page and the rest will follow it just to make sure it works fine husam>>>docs
use jshint on core test tl dr lint all the things we currently dont lint the code in `core test would like to do quick pass over all code in there and properly format it to pass jshint tests think it should comply to the same standards as `core server thoughts >>>tests
syntax highlighting bug within the editor image https cloud githubusercontent com assets 120485 2829205 0f3f6be6 cfa0 11e3 87bd 6d02bd58462d png this should not be highlighted bold in any way>>>bug editor
bug tag in blog description leads to display of without outer quotes on the top of page issue summary after inserting self musewithlanguage objective `as blog description without outer quotes appears at the top of the page with whitespace spanning the width of the page tried with chroma and casper themes casper theme is unchanged screen shot 2014 04 29 at 58 53 am https cloud githubusercontent com assets 3445290 2828564 aef39c9e cf95 11e3 85f1 f76d7a6ef218 png steps to reproduce go to site com ghost go to settings make sure you in general make blog description self musewithlanguage objective save go to site com without outer quotes appears at the top of the page with whitespace spanning the width of the page technical details ghost version master latest commit insert commit ref client os os 10 server os amazon linux ami release 2014 03 node version v0 10 26 browser chrome 33 1750 152>>>beginner bug
add option to disable login limiter for testing env our phantom js casper js functional tests are quite slow and the build takes while one optimisation we could make is to disable the login limiter so that we can run those tests without second pause to prevent triggering the login limiter we would however still need way to verify that the login limiter works >>>tests
word count function doesn work in chinese in the writing page word count doesn function properly when writing in chinese probably also in japanese and other asian languages as it only counts english words and ignores chinese characters hopefully you can investigate it >>>i18n
permitted options for model methods this is somewhat related to 2610 which talks about method argument called `options` at the api level this issue is talking about the model level including named models and the base model the majority of methods at the model level which are used by the api findone findall edit add destroy and have an argument called `options` although sometimes it is called `opts` please fix this which is passed through to bookshelf knex as the options for the query this options parameter needs to be filtered at the model level so that it is only ever allowed to contain known options this is already done for posts findpage but needs to be done for every method on the base model recommend having no allowed options unless there is an obvious generic option that should be permitted in the case of `findone` which also takes `args` which is meant to be set of key value pairs for the query this should be limited to properties of the model in question >>>api
mail api move to primary doc format status messages in the same vein as 2593 we need to update the mail api to use json format for requests and responses that matches with the other objects believe that when requesting an email to be sent the format should look something like where `message` contains the details of the email to be sent and `options` isn used at the moment but in the future imagine it may contain things like schedule info the response back from the api will similarly respond with something along the lines of where status contains information about the status of message sending was it scheduled queued do we know it sent successfully or did we send it without knowing the outcome etc >>>api
db api request response format the db api is little different to the other apis as it doesn really relate to an object none the less the responses and requests should be updated to be consistent with the rest of the api as much as possible also worth considering is how an export will work with ember what will the endpoint need to look like so that file download can be triggered >>>api
error message responses during yesterday public meeting http dev ghost org public dev meeting 22nd apr we discussed the need for unified error response format think we have determined that our key requirements are to be able to return multiple errors to be able to link an error to particular property on an object validation errors to be able to return sane and consistent response from both the internal and http calls preferably without duplicating status codes in the response object the solution suggested was something along the lines of where message is the description of the problem may or may not be shown to the user property indicate which property on the object the error relates to if there is one and type is human readable name for the error which would map to an http status code some questions concerns have message some formats such as the http problem http www mnot net blog 2013 05 15 http problem or collection json http amundsen com media types collection format objects error format define both title and message detail field when logging errors to the console in ghost we try to provide an error message context message and help message this makes sense on the console where there is no other visual context to message and doesn really make sense in the ui where simple message with visual context is probably more helpful however it does beg the question what should the error message be does it need one or two parts and should we expect it to be shown directly to the user think that in general we should consider that these messages are being passed between different parts of an application regardless of whether they are sent via http to the ember client or internally to some server side code or to an app and that the application will try to do something useful with the message such as display it in context to the user change it for user friendly version translate it or if it doesn know what to do display it directly think that one message should be enough no need for title property this relates directly to the object endpoint in question so if the error is in response from the post api the property is probably property of the post model given the example of `title` should we return simply `title` or `posts title` or even `posts title` the need to consider this becomes clearer if you think about returning validation error for author name should it be `name` `author name` `posts author name` type really like the idea of using type status code map there can be multiple error types which map to single code and it would even be possible to introduce subclassing so we could have generic `servererror` 500 and apps could return `myappservererror` or `myapp servererror` or `servererror myapp` or something similar any completely unknown type should map to 500 think also up for debate is whether it should be simple human readable string like validationerror servererror etc or whether it should be returned in the form of uri like docs ghost org api errors servererror or https github com tryghost ghost wiki api errors servererror think having url would be nice but lot of extra work to maintain perhaps we could add this later as separate field here are some examples of what it might end up looking like >>>api
post filter menu time to implement the post filter ui which has been around in some form or another since v0 but hidden from view this should use the standard existing dropdown menu styles in order to filter posts by few different attributes in future this will be more comprehensive this is first pass solution to allow some very basic sorting of the post management screen when menu item is clicked on the post list heading and the posts loaded below should update accordingly image https cloud githubusercontent com assets 120485 2768194 75c9d2c0 ca41 11e3 84c0 0d71d13ac128 png >>>ember feature
boolean handling as it is implemented now all boolean values are converted to integers to be consistent with the values stored in sqlite since we have `schema js` we know what type the values should be and we could change the values to real booleans now the purpose of this change is to have boolean datatypes for api responses without doing another conversion in `tojson this issue would need updates to the `fixbools method updates to tests and probably changes to validations >>>api beginner
notifications api proper endpoints for persistent notifications for full details of how notifications are intended to work please see 1454 the api for persistent notifications needs updating and bringing into line with the rest of the api although this only stores information in memory it should still operate as if this were not the case the notifications api has functions available `add` `browse` `destroy` `destroyall` there is no need as far as can tell for edit or read operations `destroyall` is only used in tests and does not need to be made available via http the `add` `browse` and `destroy` methods should be made available via http routes post ghost api v0 notifications get ghost api v0 notifications del ghost api v0 notifications as mentioned by sebgie in https github com tryghost ghost issues 1454 issuecomment 31344888 below the `add` method should not require an id to be sent as it does now it should only send the data to be stored and the id and any other calculated or default properties should be stored with that data the creation should return the object with an id as well as having location header as per 2635 as this is the correct route for del operations even though there is no get each notification should have concept of an id message to display type success error warn info status is always persistent whether it can be dismissed closed removed true by default location it should appear bottom or top delete request to non dismissable closable notification should fail for the time being the response from these api calls should conform with the new json api standard >>>api
post add returns location header whenever an object is created via the api the response should include location header for the newly created resource for example if we send post request to ghost api v0 posts` we should get back header like `location ghost api v0 posts doing get request on the location provided would return us the object created this should be part of `api index js` as it is piece of additional processing which should be handled by the `requesthandler` similarly to the cache invalidation headers all of the api route tests should add tests to verify that the correct header is added to the response >>>api beginner
new view route for posts in editor in ghost we introduced magic edit route for the frontend add edit` to the end of any post url and it will take you to the editor screen for that post we would like to add the opposite route where adding view to the end of the url when you re viewing post in the editor will take you the post on the frontend of the blog so if at ghost editor and change the url to ghost editor view` ll be taken to welcome to ghost or the date version of that permalink if date permalinks are enabled this route will probably eventually have button somewhere on the editor but for now we should only add the route >>>beginner
proposal use jsdoc code documentation would really love for ghost to switch to jsdoc and start documenting all functions and variables used throughout the project right now ghost only has scattering of code documented making for code base that relies on the reader to interpret all code without any help from comments and docs from the developers that implemented the code that currently exists in using jsdoc it should really help make clear what arguments function expects to receive making for easier reading for new developers and also acting as way to self validate code that is being written because javascript is loosely typed it impossible to know what types of objects function expects without either knowing the code base logging what variables are passed into the function code that is annotated and documented with the jsdoc format can have documentation dynamically generated there are already couple of tools available that do this jsdoc itself https github com jsdoc3 jsdoc some examples of generated documentation jaguarjs jsdoc http davidshimjs github io jaguarjs doc docstra http terryweiss github io docstrap themes spacelab dgeni https github com angular dgeni used to generate the entire angularjs documentation page https docs angularjs org api for an example of what fully fleshed out file with documentation looks like have look at ember component js file https github com emberjs ember js blob master packages es6 ember views lib views component js not sure what ember uses to generate their documentation or what format they use but that could be good solution as well know we used groc in the past which uses literate programming to document itself do not have that much experience with literate programming but from what ve seen of it and from what ve seen of ghost codebase it would seem that jsdoc style documentation would be of greater help to the code base and to new developers additionally the ecosystem around jsdoc style documentation is stronger with many more tools available to allow us to get moving at faster speed feel like getting ghost code base documented will really help both existing and new devs as well as make the code itself more robust hopefully this can lead to some productive discussion >>>docs
post api returning additional objects this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the post json object format laid out in 2347 and is related to 2604 the posts api is currently the most functional api it is the only api which handles proper browse requests with pagination and other options this is logical and will continue to be built upon one of the extra features in the post browse request is the ability to return all the posts which have particular tag this will soon be expanded to also allow you to request all the posts which have particular user when making these requests the object queried for tag or user is also included in the response currently this object is returned as top level property called `aspect` we want to move this `aspect` object into the `meta` object we also want to consider whether `aspect` is the right name for this object or if there is better name for it any suggestions >>>api
bug edit route works for all strings in ghost we introduced magic edit route for the frontend add edit` to the end of any post url and it will take you to the editor screen for that post this feature is working but it is working no matter what you add to the post url so sdfjdfds` works as well as edit steps to reproduce go to ghost blog and click on post the welcome to ghost post where the local url might be `http localhost 2368 welcome to ghost change the url adding `edit` to the end `http localhost 2368 welcome to ghost edit` and see that you are sent to the editor page with login step if you are not logged it change the url adding some other string to the end `http localhost 2368 welcome to ghost blah` and see that you are still sent to the editor page this issue is marked as `beginner` because the fix is single line fix to check that the edit parameter https github com tryghost ghost blob master core server controllers frontend js l186 does contain the word edit as well as fixing the bug this issue should be resolved by adding tests to check that edit works and other routes don in `core test functional routes frontend test js` technical details ghost version 2>>>beginner bug
editor link keyboard shortcut broken just upgraded to ghost and the keyboard shortcut to turn the selected text into link is not working instead of putting the cursor on the selection of `http it pointing it several characters back this is the result http imgur com mi0lra2 png >>>bug
discussion options vs args for api methods most methods across the api take at least one argument and usually just the one there is vast inconsistency between how these arguments are named the argument in the majority of cases is big smooshed together js object containing all of the data that may have been sent to the api this is because much of the time the api is requested over http in which case the requesthandler https github com tryghost ghost blob master core server api index js l46 creates the options argument by merging together the request body any files any query parameters and any url parameters in many cases this is treated like it is just the request body containing an object to add or edit in this case the argument is often named after the type of object and suffixed with `data` so in the user api the argument is called `userdata` and in the post api it is called `postdata` in other cases the argument is called `options` or `args` some api methods particularly some of the less restful user methods for managing passwords take multiple arguments the end goal here is to simplify what arguments the api takes to clarify what they are for each method and to make sure they are consistently named and used regardless of whether the method gets called via route or internally there are couple of different things we could do here one possibility would be to specify that api methods only ever take one argument call it `options` and document what options must and may contain for each method different approach would be to consider the object separately to any possible options change the `requesthandler` to keep the `req body` separate merge together `req query` and `req params` and do something clear and consistent with `req files` then the method signature for each method would be `method object options perhaps the best option is hybrid approach where each method still only takes single argument let call it `request` and this contains structures for the main object and any options the newly updated post api `edit` method takes an argument called `postdata` which looks like rather than leaving id any other url params query params or files out in the cold lets wrap them in `meta` object the same as we would with response or for an example with query params not sure if the meta object would be confusing or not so putting this out for discussion before we do any work regardless of the decision made the output from this issue should be all arguments to all api methods named the same clear documentation on what must and may appear in the arguments for each method>>>api
post api explicit includes this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the user json object format laid out in 2347 at present we default to including certain data with post including `tags` `fields` and the `author` these objects should only be included if they are explicitly requested using include` the api should be updated to accept the `include` parameter and to only return these objects if they were requested this should also involve passing the information down to the model layer so that the additional `withrelated` queries are only done if the api needs that data additionally it should be possible to optionally include any of tags fields author created by updated by or published by this change will require requests to the post api to be updated in various places ensuring to request only the additional objects which are needed at any given point >>>api
post api author relation this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the user json object format laid out in 2347 from 2124 related objects should default to using their relation name as the key therefore in the post response there should be an author key not an author id key the post json object that gets returned from the api or sent to the api from the admin ui should have an `author` key never an `author id` key to start with it should be included expanded out to contain the whole object by default which it currently is once we have done the work which changes it so that objects have to be explicitly defined the `author` key should contain an id by default and an object if explicitly requested that work is separate to this issue this will involve ensuring the change is reflected everywhere including in the response for post request and in the request to save post etc this change could be made at global level by changing the `tojson` methods used on the models tests will also need updating and coverage should be added where it is missing this is marked as `beginner` issue because it is an isolated change however it will need some level of comfort with the internals of our api models this issue is similar to 2607 >>>api beginner
tag api parent relation this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the tag json object format laid out in 2348 currently tag json objects in api requests and responses look like this they include `parent id` key for the parent relation as part of our move towards json api this key should be renamed to the name of the relation not the name of the field so `parent id` should become `parent` the `parent` is not currently used for anything it is just field in the db that gets passed around this will involve ensuring the change is reflected everywhere including in the response for tag request in the response for post request in the request to save post etc this change could be made at global level by changing the `tojson` methods used on the models tests will also need updating and coverage should be added where it is missing this issue is marked as `beginner` because it involves an isolated change and no functionality depends on this key this issue is similar to 2608 >>>api beginner
settings api move to primary document format this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the settings json object format laid out in 2350 the equivalent task for posts 2580 has been done with the pr 2596 however the task for settings is significantly different at present the settings api responses are completely different to all of our other apis the response when requesting single setting looks like and when requesting collection you get response like the aim of this task is to make these responses consistent with all of our other json api esque responses that is return the full object with anything sensitive omitted with plural form named key in terms of the api itself this is going to involve ripping out lot of code but the settings api is the most heavily used and so will require lot of work updating the various places where it is called the settings api is also the only are which has an in memory cache which should also be transformed to work with the new format the request format should also be changed meaning the client side models and code for saving settings will need adjusting the weird hacks for adding `availablethemes` and `availableapps` can remain for the time being until the work on the individual `apps` and `themes` apis are completed finally all the tests should be updated and coverage should be added where it is missing it would also be appreciated if you would add docs to this 2125 as you go thanks >>>api settings
tag api move to primary document format this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the tag json object format laid out in 2348 the equivalent task for posts 2580 has been done with the pr 2596 and should serve as an example of how to do this for tags there is only one api route method for tags which is `browse` accessible via ghost api v0 tags the response from this method looks like the aim of this issue is to change the format of the tag object in all requests and responses so that the tag object is contained in an array with the key `tags` this will involve changing the response format updating all of the places in which the response is used updating the tests and adding coverage where it is missing this issue is marked `beginner` as there is only one api function to change and that function is only used by the client side model for `editor tag widget js` it would also be appreciated if you would add docs to this 2125 as you go thanks >>>api beginner
post api pagination meta this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the post json object format laid out in 2347 currently all of our pagination data is included as top level items on response as part of our move towards json api these items should all be included in `meta` object there are some additional complexities to this issue in order to ensure that this response remains consistent throughout the ghost application and to reduce remove the need for the post processing which currently exists in controllers frontend js https github com tryghost ghost blob 9c1fe62173d0be5fc3af1e35164ba5a7554dcfbb core server controllers frontend js l23 the final `pagination` object expected by themes looks like all of these properties some of which are computed are provided to the theme because themes can do the math these items need to be returned by the api instead of calculated afterwards so that all apps themes and internal requests get the same data the `meta pagination` object can then be passed directly to the theme for the time being it should be passed as its old name `pagination` >>>api themes
non rest function route names the majority of our api routes follow very tidy restful bread convention at present with everything being read browse get add post edit put or destroy delete operation we currently have just one exception to the rule which is ghost api v0 posts slug title as we push more stuff down to the client side and require that more things be done over the http api we re going to need more routes for functions of objects the following is list of all the functions which don fall neatly into the bread convention along with their matching route name if there is one all of these names are up for discussion can we come up with nicer function name and can we come up with clean route function route posts `generateslug` `get ghost api v0 posts slug title` users `register` `check` `changepassword` `generateresettoken` `validatetoken` `resetpassword` `doesuserexist` tags settings db `exportcontent` `get ghost api v0 db `importcontent` `post ghost api v0 db `deleteallcontent` `delete ghost api v0 db notifications `destroyall` mail tbc apps tbc themes tbc user model is the biggy here >>>api
finish up the 003 data version this issue serves as note to self that we will need to have issues to clean up wrap up finish up the import export migrate etc code for 003 before we do release some tasks that need doing look for and add any missing fields we know we ll need soon tag management indicates cover image for tag etc ensure we can upgrade from all versions https github com tryghost ghost wiki version info ensure we can import from all versions https github com tryghost ghost wiki version info 3285 move the import logic so that it belongs to the right version 3285 make sure the exporter behaves correctly 3284 test on mysql as well as sqlite3 and add blank mysql dump files to https github com tryghost ghost config tree master ghost versions 3286>>>api apps data
remove the old body classes note this must only happen once we have shipped releases in which the new replacement `paged` and `page slug classes are available the new classes should become available with the closure of issue 1967 which should happen in the release after once we are ready we need to remove the `archive template` body class and also the `page template slug classes this is done in the `body class` core helper >>>themes
user api move to primary document format this issue is result of the api format discussion in 2362 and is part of larger project to move our api towards the json api format which is documented in the epic 2124 this is one step in the journey towards achieving the user json object format laid out in 2349 the equivalent task for posts 2580 has been done with the pr 2596 and should serve as an example of how to do this for users the aim of this issue is to change the format of the user object in all requests and responses so that both the single user and user collection has the user object being contained in an array with the key `users` this will involve changing the request format changing the response format updating all of the places in which the response is used updating the tests and adding coverage where it is missing >>>api users
add api endpoints for themes the following api end points are intended to manage themes using the gui `get ghost api v0 themes get list of all available themes `put ghost api v0 themes update which theme is the current active theme at present setting the active theme means updating the setting in the `settings` table in future this may call something to actually switch the active theme rather than doing this passively on the next request >>>api themes
discussion apps the best approach to commenting systems one of the most popular modifications people make to their ghost blog is to add comments this is relatively straightforward amend to make to theme at present but when apps become available we expect it to become matter of few clicks here is list of some of the commenting systems that can be integrated with ghost at present if you know of others please leave comment and will add it to the list disqus http disqus com livefyre http web livefyre com moot https muut com facebook https developers facebook com docs plugins comments google comments http bioselemental com ghost adding google comments annote http annote in nodebb http blog nodebb org nodebb v0 released isso http posativ org isso intense debate http intensedebate com juvia https github com phusion juvia these solutions all have slightly different approaches to how they can be integrated but it almost always requires embedding some extra code into the blog page therefore we need to make sure there is simple way to integrate between the app and any theme that is there needs to be an easy way for themes to support the addition of comments with minimal impact or effort on everyone part at present we have ghost foot which enables us to embed code in every page this will likely be augmented by code injection 1993 however this isn suitable solution for comments for two related reasons firstly because most comment systems require the code to be injected at the point where the comments should appear and secondly because comments are usually only wanted on blog posts only in `post hbs` not anywhere else therefore propose new helper comments this can be placed by theme developers wherever comments should appear and can be leveraged by comment app authors to output their code via an api method something like the upside to this suggestion is that comments can be added to themes long before it does anything in fact we can get theme developers to do something like this for added flexibility the downside to this is that it requires theme authors or users to do some work in order to get comments working not all themes are kept up to date so it worth considering whether we can add fall back for where comments get inserted if comments doesn exist this begs second question about how to tell if theme supports certain features can we detect them or should we get theme authors to declare their feature support in `package json` somewhere this is probably different discussion though another downside to this helper is that it is very very specific this is good in some regards comments are very common piece of functionality so it probably not superfluous helper but comment systems have one other common feature that isn supported by this helper which is displaying comment count so do we also add comment count or do we get comment apps to implement that helper if they support it adding helpers seems lot but getting individual apps to implement helper means they probably won do it consistently so throwing this open to discussion is there better way >>>apps later themes
post api move to primary document format this issue is result of 2362 and is part of larger project to move our api towards the json api format which is documented in 2124 this is one step in the journey towards achieving the format laid out in 2347 current response format single post post collection the aim of this issue is to change this so that the single post response matches the response from the collection with the post object being contained in an array with the key `posts` this will involve changing the response format changing the request format updating all of the places in which the response is used updating the tests and adding coverage where it is missing >>>api
bold shortcut in editor under mac osx the `control b` shortcut under mac osx performs move one character backward think current behaviour is not expected only `meta b` should be enabled under mac osx >>>bug ember
bugs with the touchscreen editor this is one of those things where don really have enough information to raise the issue properly nonetheless want to track the issue to ensure it doesn get lost there seem to be two vaguely separate issues with relation to touchscreen computers laptops ultrabooks large screened devices with touchscreens firstly some people are reporting that the editor doesn work for them in chrome on windows on these sorts of devices secondly regardless of whether the editor works or not these devices have mouse and keyboard as their primary inputs so the touchscreen editor is not the right thing for them >>>bug editor mobile
discussion filter context information as shortly discussed in 2554 filters should provide contextual information 2560 implements an additional `context` parameter that can be passed to `dofilter` filter might decide to render post differently when rendered for an rss feed or for an email an additional named context parameter would help to make context based decisions when filtering in this issue id like to discuss way to let the filter know in which context it is applied `prepostrender` is applied both to render posts for the frontend and for rss feeds do we need to define named contexts like `rss` `homepage` `single` which would match the controller methods and could be probably be auto applied should they be auto applied how are named contexts passed key wise `dofilter prepostrender post context rss seems viable but would end up looking like `function filter data context console log context context example use case for ghostalk http talk ghost io im developing an app that will display the player when the post is rendered in the browser but not when it is rendered for the rss feed where `itunes enclosure` is used >>>apps later
bug local filestorage returns wrong url after upload issue summary when using ghost with custom defined content directory the local filestorage will return steps to reproduce use the custom config from https gist github com anonymous 10009864 where the contentpath is changed try to upload an image ghost will return path that contains part of the local file system path the url uses part of the path of the local filesystem the implementation uses `imagespath` https github com tryghost ghost blob master core server config index js l65 instead of the correct `imagesrelpath` in https github com tryghost ghost blob master core server storage localfilesystem js l36 to construct the url to the uploaded image this image can be flagged as beginner tests should however be added to make sure we dont break this again in the future technical details ghost version master latest commit 9e358fb9>>>bug
provide context to filters this is follow up on 2554 `filters dofilter` should accept an additional parameter `context` that is passed to each filter callback >>>apps
build failure image drop zone modal renders correctly have troubles running our test suite on new computer get the following error in approximately out of test runs think this failure is timing issue with sending two `put` requests when saving cover image and blog logo ll send pr to remove the second `put` request >>>bug
discussion filter parameters while implementing 2365 came to realise that we need conventional way for filters to receive parameters `rss item` and `rss feed` should both provide contextual data in addition to the object that is filtered an app that registers filter for `rss item` will want to get the `post` object the `tag` if tag based rss feed is rendered and maybe the `page` of the rss feed this would mean that parameters will be passed to the filter `prepostrender` should also provide information about the context where the post is rendered an app might decide to render post differently when rendered for an rss feed or an email do we need predefined named contexts like `mail` `rss` `frontend` to allow filters to behave according to the context theyre applied in right now `prepostrender` is applied both to render posts for the frontend and for rss feeds would like to get discussion going on how contextual data should be passed to filters have two solutions in mind pass all data as an array with the object that should be filtered in the first spot filters dofilter name object post tag page as an object where the key `object` references the object to be filtered filters dofilter name object object post post page tag video im leaning towards the second solution simply because registered filters can always use `data object` to get the object to filter >>>apps
api endpoint and ugly debug button to send test email as we move towards having apps that may want to use more advanced mail functionality it probably be useful to be able to send test email the response from trying to send an email should turn up if there are any catchable errors and verifying receipt of the email confirms that mail does in fact work the test email should contain some nice friendly text the welcome email is good place to get inspiration possibly something like hello there excellent you ve successfully setup your email config for your ghost blog over on url if you hadn you wouldn be reading this email but you are so it looks like all is well happy emailing xoxo team ghost the endpoint should probably be something like post ghost api v0 mail test and the button in the ugly debug tools an be green or blue suppose they re ugly debug tools >>>api apps installation
ember js upload modal the upload modal needs to have its functionality ported over upload modal http puu sh 8l5os png it currently uses jquery plugin to handle uploads which should be used for now depends on 2416 updated by erisds added screenshot above the upload modal exists on both the `settings general` and `settings user` tabs and appears twice on both screens it contains an image dropzone which allows user to upload an image whilst the image is being uploaded and processed the save button is deactivated hitting save should save the image and close the modal the underlying screen should then update to contain the new image if the user hits cancel the image shouldn be saved >>>ember
new tojson method to return json according to the jsonapi standard as defined in the following issues we want to reformat the json response from our api to match the standard laid out by jsonapi http jsonapi org with the exception of keeping objects inline posts 2347 tags 2348 users 2349 settings 2350 the json response provided by our api is currently slightly modified https github com tryghost ghost blob master core server models base js l94 version of the json format provided by bookshelf http bookshelfjs org docs dialects base model html when calling its `tojson` method once we have duplicated the old api so that the admin ui remains stable on master 2543 we can then create new version of the `tojson` method the `tojsonapijson` method that will be used by the new api to provide json objects in the jsonapi format this will mean placing relations into `link` objects instead of inlining them as the existing api does it will also mean moving additional properties such as pagination data into meta objects this issue covers the creation of new base method for producing json from bookshelf objects and the associated unit tests it doesn cover ensuring that it gets used in the right places which would require functional integration tests that will be done in other issues will add links once they are created >>>api
clone the current api to legacy api use in the admin on master as result of 2362 we have decided to take the api cleanup work step farther and refactor our api to match the jsonapi http jsonapi org standard as closely as we can in order to do this without breaking the existing admin which is currently being rebuilt on the ember branch we want to clone the existing api and call it the `legacy api` the duplicate version which will then be the `api` will then be refactored in line with the spec the current admin ui will be switched over to use the `legacy api` for the time being the new version will be regularly merged into the ember branch so that it can be used to build the ember admin ui >>>api
utilize caching to reduce travis build time current builds take approximately 10 12 minutes most of this time is spent on `npm install` believe that we could use simple caching to prevent hitting `npm` servers when our `package json` hasn changed sample script that we use for ember travis builds is here https github com emberjs ember dev blob master bin cached npm this script does the following checks for `tar gz` file named based on the current `package json` md5 checksum in s3 if present it will download and extract to the current cache directory proxies to standard `npm` client while overriding the cache directory generates `tar gz` file of the cache directory both `node modules` and the system `npm` cache publishes to s3 using travis secure environment variables >>>tests
included jquery is not minified issue summary just updated to the latest stable release of ghost and found small issue the automatically inserted jquery by the `ghost foot` helper uses development non minified version of jquery steps to reproduce use the stable release use theme that includes the ghost foot directive run ghost and open browser to the index page observed result public jquery js` is not minified desired result jquery should be the production and minified version jquery should follow convention and be named `jquery min js` technical details ghost v0 node js v0 10 26 browser chrome v33 1750 154 client windows server ubuntu 12 04 lts>>>themes
add tests for using ghost as an npm module from 2078 tests to ensure all these features remain in working state we want to ensure that developers using ghost as module won get any nasty surprises this is in part similar to 2442 which will use this feature in order to run our own tests but we should also test the ability to require ghost in the desired fashion >>>tests
populate the last login time the user schema has concept of last login but this is never set when we set user status to active after determining they have successfully logged in we need to also set the last login time to the current time >>>beginner users
custom error page isn used adding an `error hbs` file to theme no longer results in blog errors being rendered using that template steps to reproduce add an error hbs file to your theme visit page that doesn exist the error is still rendered using the ghost 404 template technical details ghost version 2>>>bug themes
translations id id created id id created id id folder edited lang permalink updated config yml translated index and windows installation pls tell me if something missing >>>docs
ghost won start if there no apps directory when trying to upgrade from old versions of ghost as per the upgrade instructions try to start ghost and it quits without an error it seems that this is due to the fact that have plugins dir rather than an apps dir steps to reproduce install an old version of ghost follow the upgrade instructions delete core replace core root files replace old casper with new casper run `npm install production` start ghost ghost dies technical details ghost version rc2 >>>apps bug
add api end points for app settings to manage settings for apps the would suggest to add the following api end points similar to ghost settings app default settings are added using json file 2139 `get ghost api v0 apps settings get list of all available settings `get ghost api v0 apps settings get setting using id or name `put ghost api v0 apps settings edit setting>>>api apps later
add api end points for app fields with the first release of apps it ll be possible to store data associated with `posts` `tags` or `users` to access these app fields would like to suggest the following api end points `get ghost api v0 apps get list of all available fields for given id `get ghost api v0 apps get field by id or key `post ghost api v0 apps add new field `delete ghost api v0 apps delete field `put ghost api v0 apps edit field example kudos app add new kudos counter for post with id get kudos for post with id returns increment kudos counter by one think that the correct way to increment counter would be patch with an increment operation have opened proposal to add `increment` operations to json api https github com json api json api issues 214 which does not comply to the patch specification does anyone know of nice and clean way to realize counter while still complying to the specifications >>>api apps later
release candidate ready for testing there is now second release candidate of called rc2 https github com tryghost ghost releases tag rc2 which has been published ready for testing if you are able to do some testing this would be must appreciated if you find any bugs please raise them as separate issues according to the contributing guidelines https github com tryghost ghost blob master contributing md bugs if you complete successful testing please let us know by adding comment here detailing what you tested and on what environment covering relevant things like os browser prod dev mode database etc some important areas for testing importing tag importing tag editing tag pages etc the final release is scheduled for 26th march if all goes well thanks >>>tests
http resource on https site just noticing that the default blog logo in settings links to an `http` resource even though ve configured ghost for `https` this is both in the administrative area the user facing page the mixed content warning is annoying >>>beginner bug
bug pg random test failures still seeing test failures for pg builds some were fixed in 2075 but seeing the following https gist github com erisds 51b967755c732b1a074e >>>bug tests
import leaves file in root level of ghost directory summary of issue performing an import in the ghost debug tools leaves json file in the root directory of ghost steps to reproduce go to ghost debug click export click choose file for import and select the file you just exported click import after import is complete look in the root level of your ghost directory observed result after performing an import have file called 1395636690831c2d24c907828416a25ef41902a4039cb with the contents of my ghostdata json that was exported additional information client os mac os 10 server os amazon linux ami 2013 09 node version v0 10 26 ghost build number rc1 ghost database mysql browser chrome 33 1750 152>>>bug
using delete button on debug tools does not delete tags summary of issue on the ghost debug page the delete button says that it will delete all posts and tags from the database but it does seem to be deleting tags steps to reproduce create post with tags go to ghost debug and click delete button go to ghost and click new post in the tag area start to type in tag that you used in original post observed result when typing in tag am receiving the tag suggestion box additional information client os mac os 10 server os amazon linux ami 2013 09 node version v0 10 26 ghost build number rc1 ghost database mysql browser chrome 33 1750 152>>>bug
tag display issues summary of issue when post has large number of tags they will display weird in the lower right hand corner steps to reproduce create post add tags and continue to do so till the tags stretch all the way to the right hand side observed result the last tag that is submitted has the rounded corners cut off the first few characters of the tag being typed in are grey instead of white screen shot 2014 03 23 at 08 18 pm https cloud github com assets 4643742 2495912 1f04b110 b30a 11e3 8347 1297b8a60313 png additional information client os mac os 10 server os amazon linux ami 2013 09 node version v0 10 26 ghost build number rc1 ghost database mysql browser chrome 33 1750 152>>>bug ember
refactor the date helper to render timeago on the client ghost is intended to work seamlessly when heavily cached one of the fundamental features of ghost is page load speed speed speed cache it get more speed as it stands ghost themes can have any dynamically rendered content so caching works perfectly unless you use date format timeago in which case things get funky to fix this we need to do something fancy to output initial html server side which gets overwritten on the client side the helper needs to notice that `timeago` was used and register moment js as dependency for the theme add it to `ghost foot` ghost also needs to serve little bit of js which reads the html output by the `date` helper and knows to replace it think we have everything we need to make this work but it is bit fun >>>themes
image file names get sanitised with underscores hyphens might be better it has been suggested to me by one of our users that search engines will read hyphens in urls as spaces meaning that words separated by hyphens in file names and file paths can be read when we sanitise file names we replace all non word characters with therefore simple change to may cause minor improvement in seo have no idea whether this is definitely thing but quick google search seems to verify it such simple change worth it >>>media
customise slug base name for different models fixes 2480 when the santisation of slug results in an empty string we use basename instead this was post and is now the table name for the model minus the trailing this isn massively robust but works as temporary fix>>>beginner
server error warning message audit these are all the customised server side errors can find frequently the error comes from somewhere else and the context help are added there are some places where there is only an error message passed through just wanted to put all these messages together so that we can identify anywhere that these can be improved ghost index js l9 `err err context err help` pass through config js validation l32 `new error could not locate configuration file approot please check your deployment for config js or config example js l39 `new error could not open config example js for read approot please check your deployment for config js or config example js l46 `return errors logerror new error could not open config js for write approot please check your deployment for config js or config example js l70 `errors logerror new error cannot find the configuration for the current node env node env envval ensure your config js has section for the current node env value and is formatted properly l78 `errors logerror new error your site url in config js is invalid config url please make sure this is valid url before restarting l83 `errors logerror new error your site url in config js cannot contain subdirectory called ghost config url please rename the subdirectory before restarting l89 `errors logerror new error your database configuration in config js is invalid json stringify config database please make sure this is valid bookshelf database configuration l98 `errors logerror new error your server values socket or host and port in config js are invalid json stringify config server please provide them before restarting update check l41 `errors logerror error checking for updates failed your blog will continue to function if you get this error repeatedly please seek help from https ghost org forum xmlrpc l52 `errors logerror error pinging services for updates on your blog failed your blog will continue to function if you get this error repeatedly please seek help from https ghost org forum admin controllers admin js index l62 pass through from update check render index export l130 `err admin js your export file could not be generated upload l157 `e` pass through from storage signup mailer l267 `error message unable to send welcome email your blog will continue to function please see http docs ghost org mail for instructions on configuring email password reset l362 `err admin js please check the provided token for validity and expiration api db import l54 `e api db import content check that the import file is valid json apps l43 failed to parse activeapps setting value message your apps will not be loaded check your settings table for typos in the activeapps value it should look like app app2 double quotes required l83 `err message err the app will not be loaded check with the app creator or read the app documentation for more details on app requirements database migration l188 your database is not compatible with this version of ghost you will need to create new database l201 there is problem with the database err message err` helpers l681 missing helper arg storage index js l17 `e` pass through from loclalfilesystem localfilesystem js l32 pass through from fs unlink l39 `e` end of save method require tree reading package json l19 message could not read package json file context path l28 message name or version is missing from theme package json file context path l32 message theme package json file is malformed context path l102 warning not error message theme does not have package json file context index >>>server
empty tags get named post and then post summary of issue when creating tag that consists entirely of characters that will be stripped out for the slug the slug that ghost uses is post and then post for any subsequent tags steps to reproduce create new post add tag of publish your post now visit your post and click on your tag observed result when first saw this behaviour was confused why the url of my tag was tag post until created another tag that had all characters stripped out of the slug and the url became tag post would suggest changing the logic to make the url tag tag and then tag tag to make it less confusing screen shot 2014 03 22 at 11 49 56 pm https cloud github com assets 4643742 2492802 7ad5ba1a b257 11e3 8ec8 1779bb96c73c png additional information client os mac os 10 server os amazon linux ami 2013 09 node version v0 10 26 ghost build number rc1 browser chrome 33 1750 152>>>bug
post successfully marked as featured notification stacks summary of issue the post successfully marked as featured and post successfully marked as not featured notifications stack when the star is repeatedly clicked steps to reproduce on the content tab select post repeatedly click the star to favorite and unfavorite the post observed result screen shot 2014 03 22 at 11 42 40 pm https cloud github com assets 4643742 2492799 ef3077c0 b256 11e3 930d 068b1f6996e7 png additional information client os mac os 10 server os amazon linux ami 2013 09 node version v0 10 26 ghost build number rc1 browser chrome 33 1750 152>>>bug
sql error thrown when publishing post with duplicate tags with different capitalization summary of issue adding the tags lowercase and lowercase sql error is thrown and the post can not be published steps to reproduce click new post give post title add the following tags lowercase and lowercase publish post observed result when post is published the following sql error is thrown screen shot 2014 03 22 at 11 26 04 pm https cloud github com assets 4643742 2492793 fb71e614 b255 11e3 84d0 45a261dbcab0 png additional information client os mac os 10 server os amazon linux ami 2013 09 node version v0 10 26 ghost build number rc1 browser chrome 33 1750 152>>>bug
tag archive bodyclass archive template should in future be straight rename to paged see 1967 in order to make this straightforward the current version of archive template should behave as we would expect paged to in future at the moment archive template is applied to all pages of tag archive it would solve lot of future headaches if it was only applied from page onwards >>>bug themes
better theme error handling when theme is working fine and fuck up one of my handlebars tags no error is shown until ghost has been restarted eg enter blog title somewhere when refreshing the page nothing happens until ghost is restarted then you get an error message on trying to load the same page not overly picky about how it done appreciate that there are technical constraints but sure we could improve how this is handled to give the user some feedback about their being some broken code in their theme >>>themes
bug error warning messages can get muddled have noticed that the errors and warnings shown at the start of ghost can sometimes get muddled up so that the related parts are not together here an example muddled http puu sh 7chrn png steps to reproduce add several themes to `content themes` make sure some of them have no `package json` make sure that one or two have broken `package json` file start ghost and see what happens technical details ghost version master latest commit client os windows server os localhost node version 10 25>>>bug
add api endpoints for apps the following api end points are intended to manage apps using the gui `get ghost api v0 apps get list of all available apps `get ghost api v0 apps get app details using id or app name `delete ghost api v0 apps delete app using id or app name `put ghost api v0 apps edit app using id or app name currently needed to activate deactivate apps>>>api apps later
font renders too large on some page loads in google chrome when using the latest ghost release rc1 noticed that when using excerpt it doesnt display any `pre` or `code` elements also when refreshing the page by going to the address bar and hit enter it bumps up the font size don know if this is already known issue but thought will mention it before version gets released have created small video with quickcast to show you my problem http quick as m8grfjg6>>>bug
meta title helper has inconsistent output for tag pages issue summary from 795 meta title outputs the post title meta description outputs an empty string if you are on the home or archive pages meta title outputs the blog title meta description outputs the blog description this is fine and makes sense but trying the new rc1 it seems the new tag pages output tag title steps to reproduce output meta title in tag page meta title issue https cloud github com assets 321603 2480843 3a9891b2 b0cb 11e3 96a7 899d39b69d94 gif technical details ghost version rc client os windows server os windows node version 10 24 browser chrome>>>beginner themes
bug importing large content fails if post in tag already exists issue summary when importing our site data 255 posts tags such as popular the import fails when post already exists with tag that has in it if create new ghost instance and straight import it works if create new ghost instance create new post with the tag then try and import it does not work this bug may be content specific because with other example content have made it imports just fine am happy to email my content to the ghost team just do not want public steps to reproduce this import works install brand new instance of ghost log in and create test post with post tag of head to debug and import content content will import just fine gif of import working ghost import bug works https cloud github com assets 4715098 2477988 a1c8b87e b078 11e3 80ba 1cc76bb07b91 gif this import does not work install brand new instance of ghost log in and create test post with post tag of head to debug and import content ghost will sit for minutes and then throw an error gif of import not working ghost import bug broken https cloud github com assets 4715098 2477992 ab9d4d92 b078 11e3 8797 27ae45d93f16 gif after minutes of waiting ghost import bug broken 5minlater https cloud github com assets 4715098 2477995 b3b976ae b078 11e3 80b7 16f29f9fae0e gif this is bug because the import fails to add any data when the post with the tag exists technical details ghost version rc1 installed via npm and direct download both have problem client os mac osx 10 server os mac osx 10 node version v0 10 22 browser chrome v33 1750 152>>>bug
ghost and emacs backup files it seems that ghost templating system reads emacs backup files they are by default file with the same filename of the original file with tilde as suffix whenever edit theme my changes aren taken in effect until delete the backup file or rename it seems like ghost reads from it instead of the regular file >>>bug themes
release candidate ready for testing there is now release candidate of called rc1 https github com tryghost ghost releases tag rc1 which has been published ready for testing if you are able to do some testing this would be much appreciated if you find any bugs please raise them as separate issues according to the contributing guidelines https github com tryghost ghost blob master contributing md bugs if you complete successful testing please let us know by adding comment here detailing what you tested and on what environment covering relevant things like os browser prod dev mode database etc some important areas for testing using production environment using mysql sub directories the update process update notifications editing on mobile using the npm module now published probably lot more the final release is scheduled for 25th march if all goes well thanks >>>tests
reduce remove circular dependencies there are couple of locations throughout the code base at the moment that suffer from circular dependencies feel confident we ll eventually be able to remove all of these ci doubt it ll be easy but definitely doable if anyone notices circular dependency could you please add it as comment here as we collect known circular dependencies it ll be easier to resolve them >>>server
tag editor allowed tags and escaping at present tags are allowed to contain pretty much anything including html doing this is weird and also results in odd behaviour tag test http puu sh 6opvs gif we need to more carefully consider what valid tag is or isn and validation to match our decision and make sure that the tag editor can handle all valid values imagine that this may be done as part of the ember refactor >>>ember
discussion ember js components ember ghost ui there was significant discussion around this in the public dev meeting yesterday logs are here http 107 20 237 151 8081 logs 23ghost 20140318 pm62116 essentially we are trying to decide where and how to draw the line between ember components and reusable ghost ui https github com tryghost ghost ui components to clarify the idea of ghost ui is to create highly reusable frontend framework very similar to twitter bootstrap http getbootstrap com number of interactive items such as notifications popover menus and modals are candidates for being components in ghost ui by moving these items to ghost ui it becomes possible for us to reuse the styling and interactions across the ghost admin ghost apps ghost org the marketplace documentation and any other ghost properties as well as allowing the community to make use of it in their own projects the difficulty is that ember does not automatically play nicely with jquery components so we need to think about how we can make the ember js ghost admin and ghost ui play nicely together does it still make sense to separate out these components in this way will we need ember js wrappers if so what should they look like is there another way to achieve our goals reusability >>>ember
editor link shortcut is the same as lock screen on chromebooks want to add hyperlink in my article do my editing on chromebook the editor shortcut to create link ctrl shift is the same shortcut used by chromeos to lock the screen https groups google com forum topic chromebook central dars6rb3ozg so when attempt this not only do not get my link but locked out of my desktop maybe we could use ctrl like gmail does >>>ember
refactor the api route tests to use supertest there is suite of api tests currently located in core test functional api` which should probably live in core test functional routes api` these tests currently use request which is awesome but not as clear and concise as supertest we like to refactor them to use supertest the same as the admin and frontend route tests note we also want to refactor the existing supertest tests 2442>>>tests
use the ghost app object directly in route tests now that 2225 is complete we have ghost app object that we can use and depend on in tests it should be possible to refactor the supertest route tests in core test functional routes to use the ghost app instead of requiring that server be started this should make our tests run faster and more reliably without throwing random 500 errors >>>tests
editor image markdown gets confused by undo when editing around image markdown in the ghost editor the code sometimes gets confused and shows you the super secret sauce markers which make the editor uploads work originally raised by hswolff in https github com tryghost ghost pull 2398 issuecomment 37761224 it felt dirty without an issue steps to reproduce go into the editor type in an image tag delete the text use the keyboard shortcut to undo the deletion on mac it cmd the following text is then restored technical details ghost version master has happened forever >>>bug editor
bug invalid tokens generated for some email addresses some people get redirected to the forgotten password screen when clicking on the reset link in their email the invalid or expired token error message unfortunately doesn display on this page but on finally successfully logging in this is what appears this can be reproduced with email addresses with pluses in if remember correctly two pluses makes it break so for example `erisds testing ghost gmail com` which is valid version of my gmail email address and will get sent to erisds gmail com gets an invalid token have also seen this happen with other email addresses for which couldn see reason no odd characters but also could not verify that the problem was not that the token had expired already therefore believe the character encoding needs investigation technical details ghost version 1>>>bug users
specify version of supported browsers ie firefox chrome safari opera ios safari opera mini android browser blackberry browser ie mobile etc >>>docs
when installed can signup system centos x64 ghost visit http 127 2368 ghost signup it can work the tip is always ghost is signing you up please wait >>>bug
ember js editor controller this is specifically dealing with the high level requirements of the editor route ghost editor` and ghost editor post id` this is distinct from 2425 and 2426 and should not effect those tasks this should include loading post correctly from fixtures when accessing the editor with post id already designated ghost editor 4` should load the editor with the contents of post with id please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production >>>editor ember
ember js editor markdown entry preview mirroring this is an advanced task this is focusing primarily on text input on the left pane and mirroring its preview on the right pane there is currently naive implementation of this in place however it needs to be brought into parity with what currently exits in production whoever takes this on please keep in touch with how it going as this is the core of ghost please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production >>>editor ember
ember js editor screen implement the tag editor component this is specifically the component that sits at the bottom of the editor window which handles creating and modifying tags for that post tag editor http puu sh 8l1ci png this task is to only create that individual unit of functionality responding properly to user behavior and persisting all pertinent behavior that exists in the current production version current production version of the widget https github com tryghost ghost blob ember core clientold views editor tag widget js implement as is best fitting ember view or component or whatever preferably something modular please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production updated by erisds added screenshot above the tag editor allows user to add tag to blog post the tag can should be completed by typing comma hitting enter or on blur tags can contain any character with the exception of comma as the user types the tag editor should display list of suggestions of possible tags the up down arrow keys can be used to navigate the list and enter selects clicking the cross removes the tag >>>editor ember
ember js settings debug tab this currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks implement controller porting over logic from existing backbone view https github com tryghost ghost blob ember core clientold views debug js>>>ember settings
ember js settings apps tab this currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production apps tab http puu sh 8l5qn png please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks implement controller porting over logic from existing backbone view https github com tryghost ghost blob ember core clientold views settings js l494 updated by erisds added screenshot above this is ugly and not very functional at present it depends on at least having mock version of 2465>>>ember settings
ember js settings user tab this currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks implement controller porting over logic from existing backbone view https github com tryghost ghost blob ember core clientold views settings js l344 update current template to remove the blocks of code that have todo comments above them probably depends on asset helper to be implemented handle uploading images perhaps abstract functionality>>>ember settings
ember js settings general tab this currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks implement controller porting over logic from existing backbone view https github com tryghost ghost blob ember core clientold views settings js l157 implement word counter for description area>>>ember settings
link to rich text in the editor the markdown editor could be improved if you could add new tag to it for the embedding purposes for example the user enters http example com then you could use library such as olly js https github com abeisgreat olly js and convert that link to reach media text for example if they enter the link to youtube video it automatically embeds the youtube player and removes the link this will make writing lot more easier as the library that suggested before covers wide range of different websites such as soundcloud spotify youtube vimeo and etc >>>apps
ember js post settings menu depends on 2418 the template should be abstracted out as it re used in multiple locations please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production update by erisds the post settings component depends on some reasonably complex business logic one thing not 100 on with ember is what logic should go where for reference some recent issues around that logic post settings ux https github com tryghost ghost issues 1351 draft slug bug https github com tryghost ghost issues 2136 the post settings menu appears in two separate places on the content screen content http cl ly image 3c2n1l1r2r3m image 202014 04 03 20at 204 12 41 20pm png on the editor editor http cl ly image 3c2n1l1r2r3m image 202014 04 03 20at 204 12 41 20pm png >>>ember
ember js popovers need some system in place to allow for popovers they re currently used by the admin dropdown and the post settings view so this behavior should be abstracted and reusable this should probably be implemented as an ember component with an api such as where `open` is property on the component and the `popoveropen` property is defined in the template that is using the component either the controller or route please note if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production >>>ember
ember js notifications need to find best way to implement this component view please note if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production >>>ember
ember js modals need to find best way to implement this component view should probably definitely use yield as its contents are dissimilar may want to support default values for buttons in the modal but should be flexible this is list of the modals that currently exist in the admin dashboard upload modal used on settings general and settings user delete post modal https github com tryghost ghost blob ember core clientold views post settings js l306 used from the post settings popover show post html https github com tryghost ghost blob ember core clientold views editor js l528 shown via shortcut in edit post screen show markdown help https github com tryghost ghost blob ember core clientold views editor js l385 from edit post screen delete all posts https github com tryghost ghost blob ember core clientold views debug js l95 used from the debug screen please note if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production >>>ember
ember js fixtures add enough fake posts to allow for them to require infinite scroll in the view this is needed for 2414 we need to flesh out enough posts so that we can then mock out the ui for the infinite list view find the current fixture here https github com tryghost ghost blob ember core client fixtures posts js>>>beginner ember
ember js all posts list infinite scroll this is the list of all posts which has infinite scrolling behavior it currently only lists all available posts and has no concept of lazy loading additional ones this task is probably medium experienced difficulty level this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks should probably use list view however open to objections suggestions https github com emberjs list view depends on 2415 for extreme clarity this task is referencing this view element screenshot 2014 03 16 16 29 24 https cloud github com assets 322576 2431900 b81e0516 ad49 11e3 9f5d 50e1de1ff6a5 png >>>ember
ember js signin screen this screen currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks implement controller form submit handler as it currently exists in backbone view logic https github com tryghost ghost blob ember core clientold views login js l24 url http 127 2368 ghost ember signin>>>ember
ember js reset password screen this screen currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks modify existing route to take in token param https github com tryghost ghost blob ember core clientold router js l17 implement controller porting over existing backbone view logic https github com tryghost ghost blob ember core clientold views login js l205 url http 127 2368 ghost ember reset>>>ember
ember js forgotten screen this screen currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks implement controller porting over logic from existing backbone view https github com tryghost ghost blob ember core clientold views login js l166 include mock ajax handlers url http 127 2368 ghost ember forgotten>>>ember
ember js signup screen behavior this screen currently exists in the ember branch in non functional manner this task is to port over the existing behavior into ember so that the screen behaves as it currently does in production please note for all ember tasks we are currently mocking all ajax requests so that we can move forward without that blocking progress if you find anything that is blocking the completion of this task please make note in this thread so we can find the best way to find resolution usually these blocking issues are also blockers on other issues right now the aim is to reach parity with production tasks wire up controller to handle form submission ensure all functionality is maintained https github com tryghost ghost blob ember core clientold views login js l92 send mock ajax request to sign user up and handle success response correctly https github com tryghost ghost blob ember core clientold views login js l119 url http 127 2368 ghost ember signup>>>ember
broken modal background overlays 2x inconsistent behaviour in modals this is in both and latest master background overlay loads on first click but not second master bg1 https cloud github com assets 120485 2428752 b97da898 ac5a 11e3 9867 d2061674e19b gif background overlay doesn load at all bg2 https cloud github com assets 120485 2428755 d347f44a ac5a 11e3 8a38 aa12114edc93 gif >>>bug
discussion created by updated by without user most rows of our database scheme have field for create by and updated by values at the moment these values are always referring to the admin user with `id 1` when permissions are in place these values are going to impact the behavior of ghost open this issue to discuss what the values of created by and updated by should be for changes ghost does without an active user looking at the following cases initialization of fixtures dbhash>>>data
don use codemirror on touchscreen devices codemirror doesn work on touchscreens mobile at all this is the number thing that people are missing from ghost so let fix it by removing codemirror and using plain old textarea on touchscreen device whilst we re at it lets refactor the existing editor and add some separation of concerns so that dropping in replacements to codemirror or showdown or the view management switching from backbone to ember is easy not only will this make it possible for us to fix the lack of mobile support but it should help us get the editor rebuilt in ember much quicker >>>editor ember mobile
check for missing files in grunt contrib concat task issue summary we use `grunt contrib concat` to concatenate number of javascripts that we fetch via bower lately there has been an issue where bower dependency changed the structure of the repository and with it the path to the asset we wanted to concat reference https github com erisds ghost commit 47bfd046bb1e296c556248662af2422ffff01a0c commitcomment 5600087 we would like the concat task to fail throw an error when file is missing this could mean that pr needs to be prepared for `grunt contrib concat` with an additional option to enable this behaviour steps to reproduce change the path of one of the references file in the concat task execute the concat task `grunt concat dev` `grunt init` enjoy there no feedback for the developer user that there missing file technical details ghost version master>>>bug tests
make the showdown extensions make sense currently there are showdown extensions used in ghost this issue attempts to quantify and explain all the ways in which they are confusing broken and then get that fixed the image preview extension located at core client assets lib showdown extensions ghostdown js` problems is poorly named ghostdown even though it actually isn ghost version of markdown at all but just the code which transforms normal image markdown into the placeholder for uploading is located in `core client assets` because it is used in the admin ui only frontend ui should show normal image or nothing oddly contains the or more underscore fix which means this is only happening client side no idea how missed this this should always have been in the gfm extension solutions rename it to ghostimagepreview that what it is move it to shared with the other extensions even though it only used in the admin client this will be far less confusing can never find it and wrote it move the or more underscore fix and tests to the gfm extension the gfm extension located at core shared lib showdown extensions github js` problems poorly named originally started out as showdown own `github js` extension but has had great deal of additions and amendments such that having the same name is now confusing it buggy as hell large number of the editor bugs https github com tryghost ghost issues direction desc labels bug 2ceditor milestone page sort created state open come from this file and in particular the logic of whether something should be pre or post processed or processed with certain blocks extracted the file is under commented and probably under tested given it complexity and importance solutions rename it to ghostgfm to make it clear that this is custom implementation of gfm features look through the list of editor bugs https github com tryghost ghost issues direction desc labels bug 2ceditor milestone page sort created state open and kill anything that quick win with lots of tests add crap tonne of comments look for missing edge cases in tests the typography extension located at core shared lib showdown extensions typography js` problems when it was added it wasn added to the integration tests thus it actually breaks tonne of things and we didn know so it needs to be tested see 2312 it breaks stuff so it needs to be fixed see 2312 it not versioned or in bower because of the use of fonts on the editor it isn being put to good use see https github com tryghost ghost ui issues 12 solutions add it to our integrated showdown tests fix the problems with it try to get version added it added to bower see https github com caerphoto showdown typography issues get the editor fonts changed see https github com tryghost ghost ui issues 12 >>>editor ember
ghost admin ui quite broken after switch to ghost ui ve raised all of the issues ve found on ghost ui https github com tryghost ghost ui issues this may or may not have been the right thing to do depending on whether the bugs are caused by the de rubification or because ghost ui makes assumption about markup classes in ghost which are wrong for some reason none the less we need to review the admin ui and look for any further regressions here are the ones ve found so far notifications displayed incorrectly https github com tryghost ghost ui issues settings pane item not selected in sidebar https github com tryghost ghost ui issues delete this post link on editor post settings menu is incorrect colour https github com tryghost ghost ui issues 10 save publish post button broken in ghost admin https github com tryghost ghost ui issues 11 for the last one pretty sure that the functional tests should be failing because we test publishing >>>bug
ember js naming convention for components helpers turns out ember components need to have in them this makes for unfortunate ugly naming if you try to force it in so it would be better to pick prefix convention like `gh component` or `ghost component` one for johnonolan to confirm whether there is anything particular that fits with branding otherwise lets just pick one think shorter is better and pr it update we ve decided on `gh as this matches with what happening in https github com tryghost ghost ui this is reasonably simple issue for someone to go through and rename all the components and helpers and ensure all uses of them are updated to reflect this >>>beginner ember fix_wanted
character doesn show on markdown editor see animation with added keyboard viewer missing character https cloud github com assets 1196299 2368226 a455b792 a79d 11e3 8243 ff7b741fc292 gif this is on mac osx 10 chrome version 33 1750 146 using british keyboard layout >>>bug editor
apps filter rss feeds in the discussion issue for the filters api https github com tryghost ghost issues 2113 it was mentioned that it should be possible to filter rss feeds the suggestion is that there should be filter called `rss feed` which filters the whole feed and one called `rss item` for each item im not 100 certain that we need both believe that `rss feed` would have access to all the data so could be used to do both but im willing to be shown im wrong on this anyhow it would be great to get the rss filter into place so that it can be used in anger to create real world apps >>>apps later
discussion apps actions events notifications during the last public meeting http 107 20 237 151 8081 logs 23ghost 20140304 pm61925 it was discussed that there is concept for apps that isnt properly covered by the intended apis filter mechanism filters are for changing the behaviour input or output of ghost in some way by hooking into data settings etc and changing filtering the information in some way good example being filtering the meta data provided by the ghost head helper the data api allows apps access to the crud methods of the json api however it is considered that apps may also wish to hook into or be notified of when an event happens in ghost for example when new post is published these are fire and forget notifications where there is no guarantee or knowledge of when all apps have finished responding and no concept of priority filters provides both these things in wp there is the concept of filters again for changing data and actions which are like events but php in javascript we have real events the first question is shall we call this feature actions events or notifications the second is how to implement it and what to do about considerations like permissions do these things still have enough information what the current user is to have access to things which require permissions thoughts on postcard please >>>apps later
discuss standard spec for json rest api as sebgie seems to be cleaning up the json rest api would like to start discussion why or why not it could make sense to use standard spec format for the api the format suggested by sebgie in https github com tryghost ghost issues 2347 https github com tryghost ghost issues 2348 https github com tryghost ghost issues 2349 https github com tryghost ghost issues 2350 looks beautiful and straight forward to use in the last years several standard formats specs media types for hypermedia apis have been developed pro profit from clear set of rules expertise of creators there are libraries tools that can provide consume these standards out of the box this reduces the dependency between client and server loose coupling clients could consume it based on api description con standards are young and still evolving some standards json api http jsonapi org format the standard format used by ember data the current ghost api seems already close to this format by steveklabnik hal http stateless co hal specification html collection json http amundsen com media types collection siren https github com kevinswiber siren restful objects http restfulobjects org odata http www odata org edit added odata as suggested by erisds >>>api
use the new timezone setting in the server side date helper once 2360 is completed we need to update the server side `date` helper used in themes from core server helpers index js` to display the date in the chosen timezone this means reading settings so will require the date helper to become async comprehensive set of unit tests should also be added for the date helper in this issue as it is currently untested solving this for the client side can be left until we have full ember ified admin >>>i18n later
add timezone dropdown to settings there is more info here https github com tryghost ghost issues 1265 issuecomment 35809646 the full list of timezones will be determined in 2359 if that completed first the full list can be added in this issue if not just use gmt london and gmt amsterdam as the options for now to make it work as result of this issue we should have new dropdown on the `settings general` screen with at least the options listed above the default setting selection should be gmt the setting doesn get used anywhere yet >>>later
determine the best list of time zones for use in ghost there is more info here https github com tryghost ghost issues 1265 issuecomment 35809646 in short we want to research and determine what time zones should be included in the list taking into account keeping the list usable so as short as possible but not excluding anyone here are example lists twitter https gist github com erisds 873603c769b7c4d15f43 141 options slack my new fave thing https gist github com erisds 7524f98965c5739d20fd 95 options as far as can see there are 30 unique options in the lists but again guess there must be reasons for showing so many duplicates assume again because some places have different rules for how and when the timezones change through the year >>>later
additions for the apps schema model we have identified number of additional properties that are needed to complete the apps schema model slug type string maxlength 150 nullable false unique true version type string maxlength 150 nullable false status type string maxlength 150 nullable false defaultto inactive there may be more >>>data
completing the apps perms branch thought it would be useful to document the steps to getting the 003 data updates branch wrapped up and merged back into master merge 2250 this is pretty much ready to go merge 2179 also looks ready additions for the apps model needs slug version and status 2356 merge master along with the necessary changes to validations thinking it probably good idea to also start designing implementing the api endpoints and proxy methods issue tbc build an app that uses all the new features in anger kudos issue tbc possibly also good to get 2139 done and onto this branch this gives us solid base for the key parts of apps keeping it out of master for little longer gives us chance to ship >>>api data epic
user schema changes as part of the multi user project we will need to make some changes to the user schema making column modifications will require 601 the `name` field unique constraint needs to be removed the `slug` field needs to have unique constraint added more changes tbd>>>data
setting api response the structure of our json rest apis are up for spring cleaning 2124 have compiled what think could be changed to improve consistency and readability for settings single setting `get ghost api v0 settings title` `get ghost api v0 settings 1` not implemented yet json object v0 new json object follow the structure of our other objects and add `id` `uuid` `type` `created at` `created by` `updated at` `updated by` wrapped in an object that contains settings key and holds an array jsonapi org format singular ressource added links property jsonapi org format to one relationships added linked property jsonapi org format compound documents subject to change `created by` and `updated by` could become expandable properties later see 2346 setting collection `get ghost api v0 settings json object v0 new json object respond with an object that contains property with an array of settings added `linked` property jsonapi org format compound documents added `links` property jsonapi org format compound documents since availableapps and availablethemes are retrieved from the filesystem directly wonder if we should move these settings to different endpoint as apps are coming to life not sure if it would make sense to have table in the database that holds all information about apps and is populated when an app is installed this would allow us to have special endpoint for app management >>>api
user api response the structure of our json rest apis are up for spring cleaning 2124 have compiled what think could be changed to improve consistency and readability for users single user `get ghost api v0 users 1` json object v0 new json object wrapped in an object that contains users key and holds an array jsonapi org format singular ressource added `links` property to user object jsonapi org format to one relationships added `links` property jsonapi org format compound documents added `linked` property jsonapi org format compound documents added `roles` role object not defined yet added `permissions` associated with the role permissions object not defined yet permissions will be used to adapt the front end to the rights certain user has subject to change `role` and `permissions` could become expandable properties later see 2346 user collection `get ghost api v0 users json object v0 new json object respond with an object and move the users array into `users` property added `linked` property jsonapi org format compound documents added `links` property jsonapi org format compound documents >>>api
tag api response the structure of our json rest apis are up for spring cleaning 2124 have compiled what think could be changed to improve consistency and readability for tags single tag `get ghost api v0 tags 1` not implemented yet json object v0 new json object renamed `parent id` to `parent and added as linked object wrapped in an object that contains settings key and holds an array jsonapi org format singular ressource added links property jsonapi org format to one relationships added linked property jsonapi org format compound documents subject to change `created by` and `updated by` could become expandable properties later see 2346 tag collection `get ghost api v0 tags json object v0 new json object respond with an object and move the tags array into `tags` property added `linked` property jsonapi org format compound documents added `links` property jsonapi org format compound documents >>>api
posts api response the structure of our json rest apis are up for spring cleaning 2124 the most complex json object is post have compiled what think could be changed to improve consistency and readability single post `get ghost api v0 posts 1` json object v0 new json object `author id` is renamed to `author` wrapped in an object that contains settings key and holds an array jsonapi org format singular ressource added links property jsonapi org format to one relationships added linked property jsonapi org format compound documents subject to change `tags` `created by` `updated by` and `published by` could become expandable properties see 2346 post collection `get ghost api v0 posts json object v0 new json object move additional information in `meta` property jsonapi org format top level added linked property jsonapi org format compound documents added links property jsonapi org format compound documents change pagination information to more generic values calculation for pagination can be done in our helper `limit` number of posts per page `offset` offset in number of posts instead of page `total` number of all posts >>>api
expanding json api objects some objects contain other objects in their response properties those objects are represented as ids or full objects at the moment for better consistency it would be nice to return ids by default and introduce request parameter that expands the ids to objects example `get ghost api v0 post` `get ghost api v0 post expand created by updated by` this is nothing we need to implement right now but open this issue as reminder >>>api
don cache 404 errors for some unknown reason thought it would be good idea to cache 404 page for an hour this really messes with people minds let fix it 404 pages should not be cached in the same way as 500 errors >>>beginner bug server
ember js the future of ghost mobile as we rebuild ghost in ember js we have some important considerations which need to be taken into account around mobile right now our mobile support consists of css3 media queries and that about it most things break on mobile at this stage especially on ios7 especially on the editor screen mobile is the number biggest complaint which we receive via our what would you like to see improved the most popup survey on ghost org and strongly believe this needs to be part of everything we do rather than tacked on as an afterthought the good news is that think ember is going to allow us to do some really really exciting things with mobile that really looking forward to but before that this slideshow is mandatory viewing for participation in this issue http mattandrews info talks port80 2013 doing mobile right there are three critical elements that believe we need to detect and adapt to throughout every aspect of ghost admin viewport size device capability connection speed ember affords us the capability as understand it to be very aggressive with serving different ui and interactions based on these parameters so this is something think we need to think about quite carefully so let recap couple of core responsive principles to make sure we re all on the same page and to lead into why think this is particularly exciting there are primary accepted ways of approaching responsive web design development is another thing desktop first this is arguably what we do now all styles and scripts are written for ghost admin as it appears on large viewport as the viewport shrinks media queries are enlisted to modify the ui to fit small screen some things shrink some things move and some things disappear it the same ui but rearranged to be smaller mobile first this is the opposite all styles and scripts are written to initially target small viewport and if viewport is larger then additional styles scripts are loaded in this is the trendy hipster if you don do it this way you aren real developer one that everyone loves to rave about because the performance is better imo in the context of complex user interface neither of these are ideal they both target one primary viewport and then compromise on whatever is considered to be the secondary why because they still have to have all the same elements on page either the mobile version is hiding bunch of shit or the desktop version is missing bunch of shit ultimately the dom is either mess or graveyard because responsive design doesn just mean making ui look different it means different ui so what is ideal the best mobile user experience by some margin is from dedicated mobile websites mobile twitter com and facebook com are the most obvious examples of this these mobile websites feel like native apps they re fast they re slick and they have largely very different sets of elements to their desktop counterparts but mobile websites themselves aren ideal they re an entirely different codebase and entirely different app they re usually overly specific to just one particular viewport size really everything 400px and below is mobile what about 420px 450px 600px hmmm the combo move here where shit gets fun and where think ember might allow us to do some things which haven been experimented with to any great length before at least not that ve seen which is to adapt our dom based on our predefined responsive criteria that viewport size device capability and connection speed for those of you playing along at home the dom in some ways is really the most important thing behind every single piece of responsive work it is the dominant factor that influences the outcome if you will dominant design oh no he didn oh yes he did anyway this has been long back story to arrive at single relatively simple point which interested in what if we used ember to serve entirely different ui components to different devices based on what will work best for them few very basic examples for context navigation menu serve completely different nav like icons fixed to the bottom of the screen instead of trying to re squish everything into some horrendous menu dropdown editor serve simple fullscreen text input rather than the enormous mobile hating codemirror implementation settings serve the list of settings pages as one view and navigate between the sub views after tapping on them rather than loading them all at the same time as on desktop we do this in very basic broken way already with jquery there lot of room for improvement allow switching between post previews on ghost content management by swiping left right to go to prev next items in the list disclaimer not saying we should do all of these they re just examples of interesting dom changes which could significantly improve the mobile experience this issue is intended as starting point for discussion on how this type of approach can be integrated into what we do with ember at very high level am not intending to come up with an exhaustive list of every possible mobile ui enhancement that we could create rather that we build ghost admin with sufficient flexibility so that it is possible to experiment with things like this as we grow no brad frost https speakerdeck com brad frost beyond media queries anatomy of an adaptive web design and there are undoubtedly people who have more experience both with designing and implementing ui patterns like this so interested to hear any other points of view on the general approach as well as the implementation as it relates to ember >>>ember fix_wanted mobile
enhancement sensible default fallbacks for partial dates in post settings write new post open the post settings menu and in the date field enter 28 feb close the post settings menu open the post settings menu desired behaviour the date is set to 28 feb 2014 12 00 actual behaviour the date is set to 28 feb 2012 00 00 if not specified it would be awesome if the year defaulted to current year and the time defaulted to 12 00>>>editor
feature request user email address hide publicly at the moment we have the ability to user author email in themes which is great for creating `mailto link if users would like it to be there however if user doesn want their email address public and the theme they use shows it they can delete their address from the user settings field as it required for notifications as such the options at present are themes don use the author email tag to ensure privacy themes do use the tag and users have to delete it if they don want their email shown it would be great if there were an option in the admin settings ui that user could switch to determine whether theme could access their email address or not that way themes could safely use the author email tag to create `mailto links for those who want them without comprimising the privacy of those who don >>>settings themes users
bug title for tag archive pages is missing issue summary on tag tag slug the lt title tag will be empty this is because corehelpers meta title is missing check for this steps to reproduce create post with tag go to the tag page for the tag you created check the html source lt title will be empty technical details ghost version master latest commit be8b9cf0922886b747285fb284ea42710673ef75 >>>beginner bug
add fixtures to migrations we need way to update and add fixtures to the ones that are added when the database is created https github com tryghost ghost blob master core server data fixtures index js my use case would be that would like to add new permissions as described in 2264 and assign the new permissions to different roles >>>data installation
tag hbs template file not detected when present in theme issue summary when tag hbs template file is added to theme it not detected and the index hbs file is applied steps to reproduce add tag hbs file to template with distinguishing features restart ghost and look at tag archive in my installation could get my tag hbs template file detected if changed the frontend js controller file on line 128 from `view paths hasownproperty tag tag index to `view paths hasownproperty tag hbs tag index new to github contributing so not sure if ought to submit pull request or exactly how to but ll give it my best shot and please let me know if doing anything the wrong way technical details ghost version master latest commit 383da3148459652c45a57644a4704d9ad1816d8a client os windows server os windows node version 10 18 browser firefox 27 01>>>bug themes
tags with same name but different slug get added twice issue summary when adding tag name that exists as two different slugs both tags get added you can only get into this scenario when importing posts as it currently impossible to create two tags both with the same name but different slug urls screenshot 2014 03 02 23 11 28 https cloud github com assets 322576 2306538 ed7147ca a289 11e3 9e23 fa4998aae3f3 png steps to reproduce need to import posts and tags in which you have two tags both of which have the same name but different slugs go into post editor and add the slug name save refresh the page and both tags show technical details ghost version master latest commit 383da31 client os mac server os mac 10 node version 10 25 browser chrome version 33 1750 117>>>bug data importer
bug settings content pane gets rendered twice on initial load issue summary if you go to `ghost settings` the content pane gets rendered twice this happens only on the initial page load steps to reproduce in l58 https github com tryghost ghost blob master core client views settings js l58 of `client views settings js` add `console log` statement go to `ghost settings` and see console output you ll find the message printed twice this is bug because the page should not be rendered again once it has already been rendered solution l64 https github com tryghost ghost blob master core client views settings js l64 should have `this pane id` instead of `this pane el id` `this pane el id` is always returning an empty string whereas `this pane id` returns the `id` of the current pane ll be filing pr with this solution in while technical details ghost version master d996ff68e7c5b01999a9304f731b183ca8eeb14a client os elementaryos based on ubuntu 12 04 server os elementaryos based on ubuntu 12 04 node version v0 10 16 browser chrome v32>>>bug ember
character encoding bugs in rss feed you ve got some character encoding bugs in your feed xml apostrophes are being incorrectly encoded feed https cloud github com assets 120485 2304622 38c2d86a a22b 11e3 8d14 592facb17761 png >>>bug
bug markdown renderer messes with embedded html issue summary markdown supports html and should just print it out as is the showdown renderer seems to add additional `s after certain tags causing them to break steps to reproduce enter the following text into the markdown editor result note that the `table` renders just fine without additional elements added the `audio` tag however is surrounded by and has an additional added inside causing the element to break in chrome at least for me note that the rendered markdown also contains fancy quotation marks which is probably related to 1795 screen shot 2014 03 02 at 16 30 02 https cloud github com assets 176576 2304462 f4dd5b12 a21f 11e3 8bd5 e8591eab189e png technical details ghost version master latest commit b84c8a47 browser chrome 33>>>bug editor
feature request bulk actions menu for admin content pane think it would be great to have the ability to apply actions to multiple posts pages in the content pane of the admin interface for me personally this has come about with testing imports and wanting to delete series of posts quickly however do not think that is the only reason for such menu to exist perhaps someone might want to bulk flip post status or turn posts into pages would think that in the future there might be use case coming out of apps ve honestly gone back and forth on this one being part of core so looking to see what others think >>>ember feature
feature request enhance edit post usability the content page in the admin interface has one little issue that has been bugging me more and more as use it selecting post in the left pane is easy but going to edit that post particularly on widescreen monitor with no touch is not easy the distance between the left pane and the edit icon on the far right is too great not too mention that the pencil icon is tiny target not to get all fitt law up in here but to me that seems like serious enough usability issue to warrant discussion and correction looking to johnonolan for suggestions here and for verdict but my one idea is to add some edit delete buttons to the actual post item in the left pane would only show them on hover over the actual item screenshot for posterity widescreen edit example https cloud github com assets 1540648 2303332 1ebf7110 a1b5 11e3 9449 cb31a8fc0fd2 png >>>ember
validation failure error message when checking static page checkbox checking the static page checkbox while editing post causes this error message to pop up validation isin of field page failed believe this is due to validation that has been added in this commit https github com tryghost ghost commit ac7f4f05c43196cc1117e0dc44bbafabefabad0f specifically in the file core server data schema js on line 11 it adds the following validation for the page attribute of posts checked the postdata being sent int from the http put request sent when the checkbox is clicked and it contains the attribute page true that validation bit posted above should probably be this instead there may be better way of fixing this but this seems to fix this particular issue was concerned that the validator would complain that true is not the same as but it seems to work regardless perhaps this has something to do with the fact that it is stored in the database as an int or maybe there is some implicit casting happening not sure the validator js library being used doesn seem to have isbool validator >>>bug data
bug apostrophe in image alt tag causes word count to be incorrect using this syntax for important an image and then attempting to pull in only 50 words on the front page of the blog results in nearly the entire post showing up on that front page if remove the apostrophe get just the first little bit of the post again on ghost 1>>>bug editor media
404 link think it would be nice if the 404 page on the blog had link back to the homepage in the admin you can continue to navigate but on the frontend there no option to go anywhere if ghost is up and serving 404s we can be reasonably certain the homepage works so that seems like good place to go next >>>ember
support for markdown reference link syntax as well as inline syntax whilst writing simple html scraper to generate the required json for importing into ghost ve hit problem the html markdown service using converts html anchor tags into reference style links as described on the official markdown syntax page http daringfireball net projects markdown syntax this syntax appears to work when viewing full blog post http the photographic me um ghost io llynnau mymbyr but doesn render correctly in the blog list page http the photographic me um ghost io nor in the editor using ghost org hosting thus running version >>>bug editor
add the apps icon to the apps ui there is an icon for the apps page in settings apps ui https github camo global ssl fastly net 3f41ba4a479eb8f3aede4bd23c2da2aee095df1e 687474703a2f2f662e636c2e6c792f6974656d732f30683162315a313031463356304d316d3359324f2f417070732e706e67 believe that the css for this is one thing that wasn converted from plugins to apps or some similar issue either way it would be awesome if we could dig it out and get it working >>>beginner ember
keep apps ui behind config option with the thought in mind that we may need or want to ship at any time and that the app ui is going to be incomplete for some time think it may be good idea to only show the app ui and anything related to it if config option is set `apps true` or something similar this will allow us to continue to develop it with confidence that users are not cloning the latest master and having shock >>>apps beginner
reformat month based image upload directories honestly just opening this before someone else does currently we save uploads in the folder structure images 2014 jan image jpg` which is pretty fucking weird it would probably make lot more sense if it was images 2014 01 image jpg`>>>fix_wanted media
bug not all tags show when publishing posts issue summary it seems that some users are experiencing tags disappearing or not appearing when post is published the case and reproduction steps for this are not yet clear it has been reported on the forum https ghost org forum bugs suggestions 3987 only last tag included in new posts had thought that it may be related to 2075 but as far as can tell from the forum post this is being reported on both mysql hosted service self install and on do droplet which would use sqlite3 technical details ghost version 1>>>bug
linting es6 sadly jslint doesn cope with es6 modules in order to keep our code standards up we re going to need new linting solution it needs to be as close to the strictness of jslint as possible the obvious question that always pops up when talking about this is why do we use jslint in the first place quite simply the answer is because jslint removes the option to configure it this means that there is less opportunity for debates arguments about what our code style should be and we can get on with coding if we have to switch to jshint we need to pick configuration basically the same or as similar as it can get to as jslint and stick to it >>>ember
ember js css sass and other assets need to copy in our old assets into folder structure that fits the ember way to do things >>>ember
ember js admin nav bar first piece of the ui to rebuild in ember has to be the nav bar right the gotcha is it needs to set body class >>>ember
call to action functional tests in core test functional admin we have set of functional tests using casper js to visit the admin ui and test it out however quite lot of functionality is not properly tested here are some areas that need tests there are likely more would love to see prs adding tests even if it just single addition general main menu navigation top left user menu navigation content screen left column title draft page published label featured star green add new post button right column written published by text author name edit post icon post settings menu delete modal editor screen image uploads markdown modal tag menu post settings menu delete modal publish button settings screen image upload modals form filling it would be really really really good to get bit more coverage to help with the ember migration >>>ember tests
switch to bower for managing frontend dependencies to date we ve had no management around our various frontend dependencies as we switch to ember we re going to want to use bower think it would be really good to do this in master for our current setup and merge it back into the ember branch thoughts we can probably put the majority of our dependencies in bower json and then run `bower install` as part of `npm install` https github com stefanpenner ember app kit blob master package json l17 this should be reasonably straight forward to do however there are couple of considerations what to do about our shared vs client dependencies the intention was always that shared should contain anything that might be shared between the admin client and the theme this has become little bit confused over time shared vendor showdown github js is heavily modified version of the original used on both the client and server client assets vendor showdown extensions ghostdown js is custom extension used client side only to manage image uploads deal with multiple underscores if we can make sensible decision about how to sort these bits out this might even be good candidate for `beginner` issue >>>ember
ember js admin ui rewrite code https github com tryghost ghost tree master core client the following is an outline of the admin ui as it stands and all the pieces that need to be rebuilt in ember js build tools add relevant parts of eak into ghost grunt tasks es6 modules current routes all routes except signin signout forgotten reset and signup are protected through login when logged out redirect to signin applies to all remaining routes signin ghost signin signout ghost signout after sign out redirect to signin forgotten password ghost forgotten posts list ghost editor existing post ghost editor id editor new post ghost editor settings ghost settings redirects to settings general settings general ghost settings general settings user ghost settings user settings apps ghost settings apps only when config is switched on 2423 signup ghost signup add new user password reset ghost reset token change password ghost changepw content ghost content same as ghost 2746 debug ghost debug 2743 all routes should end in trailing slash 2741 admin redirects for users etc 2779 current features general navigation bar on the top of all pages 2275 2708 sets body class dependent on page user menu 2744 is fully working popover 2418 links to profile support and sign out 2745 error pages 2851 404 500 posts list posts list preview selected post settings menu for selected post delete modal 2845 2849 feature toggle for selected post 2748 url reflects currently selected post fetches 15 posts at time uses infinite scroll api is designed to support this 2414 editor split screen markdown preview 2426 image upload dropzone crazy code to make it work between editor panes 2426 mobile editor 2957 markdown help modal tagging 2425 settings menu delete modal 2845 2849 post validations 2856 save as draft or publish 2747 keyboard shortcuts 2752 zen writing mode 2988 notes on future behaviour editor should stay as is for now we will rewrite this in future project offline capabilities are very much desired in future but not as part of the rewrite create new post in offline mode regularly push local draft into localstorage new status localdraft addtional to draft published have the full collection of posts available offline or should user be able to opt in for selected post for offline editing settings fade between panes 2749 currently active pane 2751 settings general 2421 misc inputs upload images blog logo cover modal 2547 save 2846 client side validation needed currently incomplete on all inputs rules defined in core server data default settings json 2846 settings apps 2423 misc inputs activation buttons needs the new apps api endpoint 2465 debug 2847 upload file import download file export reset button should all have api endpoints but may need changes notifications login email password login button authentication is done with server call managed via cookie session is stored in the db note need new approach for auth oauth oauth 2759 forgotten password 2843 forgotten password screen enter email address submit reset password screen enter new password submit currently done with server call note need new api route for reseting sending email redirect signin api endpoints for development we will write stupid express server that mocks the current api endpoint and static responses for all requests sebgie will lead this additionally needed api endpoints authentication de authentication password recovery image uploads restful api endpoints documentation available on the wiki https github com tryghost ghost wiki 5bwip 5d api documentation ember specific discussions model layer currently using thin wrapper around ajax calls discussion on switching to ember model or ember data located in 2699 settings user 2422 moved to multi user misc inputs upload image modal 2547 save change password client side validation needed currently incomplete rules defined in core server data schema js>>>ember epic
ember js integrate admin ui prototype into ghost repo the prototype at https github com manuelmitasch ghost admin ember demo can be used as starting point and integrated into this repo >>>ember
json api permissions in preparation for 2058 2059 and 2124 have summarized list of roles and their permissions for the json api this is not complete list of api functions yet roles admin somebody who has access to all the administration features on your blog editor somebody who can publish and manage posts including the posts of other users author somebody who can publish and manage their own posts noauth somebody who is not authenticated yet posts json api admin editor author noauth posts browse status published or created by self status published posts read status published or created by self status published posts edit created by self posts add posts destroy created by self posts getslug settings json api admin editor author noauth settings browse core blog app theme settings read core blog app theme settings edit core blog app theme db json api admin editor author noauth db exportcontent db importcontent db deleteallcontent user json api admin editor author noauth users browse users read users edit user self users add >>>api permissions
rss feeds should not include the author tag currently our rss feeds include the author tag for the channel element see http john onolan org rss this only makes sense in the context of single author blog which will go straight to hell as soon as mu is introduced traditionally this tag should be left out it may be worth doing an audit of ghost rss feeds vs wp rss feeds because there quite lot of difference at the moment eg http blog kissmetrics com feed fine with the two being different but like to make sure we re structuring feeds differently for the right or at least some reasons >>>bug
redirect feed to rss great deal of people coming in from wp are used to the feed route from their previous installs they are now having an issue of old feed urls 404 ing it would be useful if we reserved the feed route and redirected it to rss ideally this would take into account the current url so that it compatible with 2260>>>beginner
bug reset link redirects to signin issue summary the reset link which is sent out in emails is currently redirecting to the signin page steps to reproduce go to ghost forgotten enter your email address and generate new token requires mail configured click on the link in the email that is sent the link goes to ghost reset but is automatically redirected to ghost signin blah technical details ghost version master latest commit >>>bug
forgotten password link is broken issue summary forgotten password link is broken on signin page steps to reproduce navigate to ghost signin click hover over the forgotten password link it is missing ghost from the beginning technical details ghost version master latest commit >>>bug
feature is helper theme context awareness really struggled to word the title for this in way that makes sense essentially there are some clear limitations at present in what can be done with themes in terms of outputting post data differently in different contexts for example really love casper but like it to render my very first post in full and the rest in list form can do this by using the construct if first else if in my index hbs but that affects page etc as well as the home page which is undesirable so this demonstrates the problem that you cannot output posts differently on the home page vs other pages without using css as there are class hooks but no way to detect using handlebars similar problem occurs if you use partials perhaps you have partial which outputs posts for both the index and post templates but you want to change one detail there is no way to tell using handlebars whether the current context is post list or single page or whether it the homepage or an archive page or tag page list furthermore what if want to output the first posts in the list in full rather than just the first one does anyone have any more examples of similar use cases where context awareness would be useful >>>themes
preview link to draft post ghost makes it extremely easy to preview markdown in real time but what if we want more than that for example user might want to add mathjax support in the website and want to see the latex code rendered on the preview pane as they are typing this is currently not supported because the user needs to fiddle with file such as `ghost core server views default hbs` to make sure mathjax can be loaded and they can see the preview this is not practical in all scenarios for example some users don want to change the existing code in order to get the custom preview working so right now user has to preview the post by publishing it first and by manually loading it in the browser what am proposing is why don we add feature to ghost that will let the preview to be rendered without publishing the post page first so users can preview their post if they are logged in admin by going to preview post slug think that would be nice wordpress also has this feature and it quite nice to have it >>>ember
wrong cursor position in markdown editor for unicode cursor position messed up in markdown editor as seen in the screenshot below screenshot http imgur com rpsgxrp png issue summary summary of the issue and the browser os environment in which it occurs if suitable include the steps required to reproduce the bug steps to reproduce copy this into the editor make sure the sentence got wrapped on to multiple line move cursor to the second line and try editing the cursor will most likely be on the whitespace expected outcome cursor should be in the correct place technical details ghost version trial client os mac os 10 browser chrome 32 1700 107>>>bug editor
first run process auto configure url probably requires 2164 to be merged first it would be great if we could try to handle the setting of blog url in nicer way than having to edit config js file ideally check if the url has been set to something other than my ghost blog com in config js if so do nothing if not write the blog url in config js with the base url from wherever example com ghost setup is run this is pretty complex as we will need to first check to see if ghost can write to the file then we need to read and parse the file before modifying some part and writing again it is probably best to only configure the url for the current environment but perhaps doing it for both dev and prod would be easier >>>installation
bug importer adds the same tags to every post issue summary when importing posts the posts are imported correctly but every post gets the same set of tags which think are the tags from the lastest post steps to reproduce create new clean blog add two posts one with `tag1` and second with `tag2` go to `settings debug` export your data press the delete button to clear your blog import the data you exported notice that both posts now have only `tag2` technical details ghost version master latest commit 819d82ac9e41088b8b27d69f1cc915ded6885779 database sqlite reproduces on mac and windows>>>bug data
add tests for subdirectory support we have introduced subdirectory support in but there are apparently no tests to ensure that this feature is not broken by new commits as mentioned in 2223 we should be able to pass different configurations to the test runner when the changes for ghost as module are merged >>>tests
remove the deprecated helper pageurl in 2216 `pageurl` is being renamed to `page url` but the original name is being left in as an alias with deprecated warning message we ve left that in for ghost version to give theme developers time to update their themes after 2216 is complete and we have shipped we need to clean up after ourselves and remove the deprecated `pageurl` alias >>>themes
helper naming convention camelcase snake case after discussion in the public dev meeting http 107 20 237 151 8081 logs 23ghost 20140218 pm60842 it was determined that the most sensible course of action for the time being would be to make everything consistent the majority of the commonly used helpers are currently using underscores with the exception of `pageurl` which needs to be updated to be `page url` `pageurl` should be left as an alias which calls `page url` using `pageurl` should still work but spit out friendly part warning message using logwarn warning pageurl is deprecated please use page url instead the helper pageurl has been replaced with page url in ghost and will be removed in entirely ghost in your theme pagination hbs file pageurl should be renamed to page url 2217 has been raised to keep track of removing the alias in the rest of the camelcased helpers are used in the admin only and can be simply renamed without deprecation >>>beginner themes
app version updates from seeing some references to an app version number in different issues assume that it would be the best to store the app version in `package json` and treat it like any other version number when the app ecosystem comes to life we ll need to provide an update path for developers to update ghost relevant information settings when releasing an update of an app think that the following values would need to be updated permissions if stored in the database default app settings in addition to `install` `activate` `deactivate` and `delete` would vote for introducing an `update` method to update apps with higher changed version number >>>apps later
required api version for apps to ensure that an app is compatible with the installed ghost version apps should provide the expected api version app installation then checks if the required api version matches the available api version and provides feedback if the installed version of ghost is not compatible would propose that available and required api version are stored in `package json` app `package json` ghost `package json` after introducing version for the api we need to make sure that we do not introduce breaking changes to the api and keep legacy deprecated versions of changed interfaces for some time >>>apps later
wip integration with downsize contextualtags api this commit is an initial attempt to integrate with the downsize contextual tags api commit https github com cgiffard downsize commit 00f9fd88f6a0d0a7261f4d037dedd119e8d899ef this implementation would allow you to pass context true to content and not get your core markdown generated elements clipped the elements ol ul pre and blockquote would all not be clipped instead whatever element the character limit or word limit was hit inside of would be finished before the html is clipped ve tried to adhere to code and api conventions please let me know if there anything you like me to change this is my first ghost pr so love feedback relates to https github com tryghost ghost issues 2206 https github com tryghost ghost issues 2166 best regards adam commit message introduces the context true api to content currently defaults to false >>>themes
discuss potential theme api extension to prevent clipping paragraphs part way through interested in feedback from the theme community on an api extension that ve been working on also like the community help in determining how to expose the api as understandably as possible the idea is to let you make sure that the content snippets used for summarizing post on the index page aren cut mid sentence or mid paragraph currently you can use content words 55 or content characters 55 to get post snippet with 55 words or characters respectively as is implied by their names they will also cut off sentences and words half way through this leads to snippets like the following from the ghost blog today we re very pleased to announce an all new look and feel right here for the official ghost blog up until now our official blog had been running completely standard implementation of the default casper theme which ships with every copy of ghost it worked very well to get us started but we ve always this seems great for some types of themes and content but undesirable for others have change prototyped that would let you set flag to indicate that the markdown paragraph in which the word limit is met should complete anyway effectively letting you set the fuzzy length of the snippet and letting you be sure that content won be clipped mid sentence using this setting would make the previous snippet from the ghost blog come out as follows and have 76 not 55 words today we re very pleased to announce an all new look and feel right here for the official ghost blog up until now our official blog had been running completely standard implementation of the default casper theme which ships with every copy of ghost it worked very well to get us started but we ve always wanted to have something little more custom that part of the rest of ghost org and properly integrates our branding does this sound useful to anyone as far as api goes thinking something like this content words 55 rounding markdown block other values would for starters only include the default `none` which would correspond to the current behavior suggesting `markdown block` instead of say `paragraph` because the functionality currently makes sure lists and some other high level markdown blocks are also completed ul ol blockquote and pre does this seem like an understandable api is there anything you would change any and all feedback would be greatly appreciated >>>themes
improve the ability to debug themes theme developers don really have much in the way of help with debugging at present like to improve this by making the handlebars log helpers work providing clearer messaging around potential errors with how the theme api is being used the intention is to provide additional messaging in dev mode only for when people are playing around with their theme to guide them and help make building ghost themes as easy as possible >>>themes
grunt warning issue summary when running grunt commands it serves warning that research in other repositories such as https github com backbone boilerplate backbone boilerplate issues 237 indicate that the fix is to relocate the `grunt cli` dependency from `devdependencies` to `peerdependencies` in the `package json` file have submitted relevant pr in the case that this is correct solution steps to reproduce `npm install` `grunt` technical details ghost version master latest commit 2329edd server os ubuntu 13 10 node version v0 10 25 >>>bug
provide proper status codes for api operations halfdan linked me http tools ietf org html rfc2616 was thinking whether it be good idea ocd doing it right thing if we provided the proper status codes for api responses currently we re using 500 404 415 413 403 401 and 200 along with the 304 for caching the rfc allows for more granular bits like 201 created http tools ietf org html rfc2616 section 10 could be used for new posts users tags 202 accepted http tools ietf org html rfc2616 section 10 could be used to get back to the browser once data is here but before promises resolve and proper response gets back not sure though thoughts >>>api
markdown arabic farsi thai etc support markdown editor currently can work correctly if right to left words were inside the text it doesn select the right words or move in right way you can generate arabic text for testing here http generator lorem ipsum info arabic >>>bug editor
optimise ghost boot up this is bit of case of me thinking out loud perhaps it part of 1789 but it is also related to 2156 and 2179 package json support at the moment we have bootstrap initialise the config file server init does whole tonne of stuff finally calling server listen serve first request middleware wondering if the server init could be streamlined into only things that are absolutely necessary to happen before ghost even starts surely whole heap of this isn actually needed until we serve the first request which needs it for example mail it might never ever be needed so why bother initialising it before we start ghost similarly with the new package json stuff should we be loading this into config that certainly convenient but should it be somewhere else loaded only if and when it is necessary or should it be passed to config later on in the flow generated when requested this is pretty different way of working but thinking it could lead us to much more streamlined more modular code it could give us faster boot time and smaller memory footprint by default but am just thinking out loud wink >>>fix_wanted server
can access debug tools in ghost debug page clicking on general tab in ugly debug tools does not show the tools panel tested this on mac using the ios simulator and on samsung galaxy s3 visit http ghost debug on mobile click on general nav observe that no action happened screen shot 2014 02 12 at 36 29 pm https cloud github com assets 939287 2147655 c641f590 93d5 11e3 9555 aefa6458e542 png >>>ember mobile
bug code blocks not working inside of lists issue summary code blocks inside lists screw up the lists steps to reproduce if you have code block inside list the numbering of the list items is incorrect as seen here here http imgur com sqmngb3 png raised on forums https ghost org forum bugs suggestions 5315 multi line code blocks and ordered lists technical details doesn work on github comments but does work on dematerializer marked ghost version 4>>>editor
investigate marked as replacement for showdown again chjj comments on 422 have lead me to reconsider our short and long term goals with markdown this is no small undertaking but believe it would be valuable to re investigate using marked instead of showdown there are few key aspects to this investigation can ghost custom image tag magic be done better with marked does it solve many of the open issues https github com tryghost ghost issues labels bug 2ceditor page state open without breaking any of our existing test suite does it have any features that would make proper scroll syncing easier perhaps we can borrow back some inspiration from dematerializer http www zolmeister com 2014 02 dematerializer blogging for developers html specifically see this https github com zolmeister dematerializer blob master app js directives js l24 thanks hswolff if anyone is interested in grabbing this that would be awesome happy to provide insight into the image tag magic and also help write tests for open issues in order to deliver pr from this investigation showing exactly where marked differs from showdown so that we can evaluate the change >>>editor
tags are finalized only after separator is placed steps to reproduce fill tagfield with tag1 tag2 tag3 switch focus to other ui element results http imgur com 0m26sl6 png should be all tags are finalized as 1st 2nd workaround fill tagfield with tag1 tag2 tag3 eg comma in the end >>>ember
session expiry error message is an arse ghost sessions last 12 hours some people keep the window open lot lot longer than that if they do their session goes away and when they go to save they get an unhelpful error message which just says unknown error it would be great to upgrade that message to say something sensible like oops you re not logged in >>>bug
enhancement add initialization to models hswolff suggestion in issue 1655 actually now that you mention it one thing love for the models to have is the ability to be instantiated upon invocation and not upon having the module required what mean by this is right now there bit of bottleneck we cannot load any model files before the config js file has been loaded as bookshelf is set up directly in the module and not behind function that allows you to set it up at your own desire this believe is one big thing that is in the way of us no longer having to require server in promise ve also run into issues related to this when testing it would be great if core server models base was moved into function on module exports with every other model file following suit so that when we wanted we be able to call initbookshelf to begin the bootup of the models as opposed to having to delay requiring the entire module loove if that was done love hotel open this issue as reminder that this needs to be done but would like to get 1401 and 2058 done first because we would do things twice otherwise >>>data
feature improved post excerpts previews this issue is primarily intended to spark conversation and gauge interest most themes ve seen use excerpt for post snippets some use content words or contents characters all of these options are lackluster as they remove context or content and offer no control of the process an improved api would be awesome see two primary options preview annotation context sensitive content blocks preview annotation could be or some nicer syntax to wrap or designate the end of the text to be shown in the preview it could perhaps even allow for content separate from that shown in the actual post the preview could be made available to themes with an api like preview this could be good for writers who want to carefully craft their preview blocks this functionality sounds like it might be great for developing as plugin at least initially context sensitivity in content and excerpt blocks is more interesting it could make sense as default functionality serving initially to just do better than chop text mid sentence ghost could provide an api like content max words and attempt to more intelligently do sub contenting within requested bounds to some extent this could perhaps be offloaded to the downsize script that ghost is currently using and going to look into it but downsize job is to take arbitrary html and return shortened html and in working within that bound it both loses contextual hints from markdown and is forced not to make assumptions that would be solid for ghost for example that the input is html that can be generated by markdown perhaps snippeting could be done better in markdown itself that obviously has whole host of problems though >>>themes
feature have an option append to the content helper would like to add the append option to the content helper to have the possibility to append some text to the truncated content for example let the content be without html tags lorem ipsum dolor sit amet consectetur adipiscing elit aenean diam justo blandit eu lacinia et pretium ac orci integer laoreet porta accumsan when you would call you would get lorem ipsum dolor sit amet consectetur adipiscing believe many themes are taking the content with excerpt which is what casper is doing excerpt hellip but that prevents you from having some pictures or code or whatever on your index hbs if you were to try to add manually something like this you would get lorem ipsum dolor sit amet consectetur adipiscing because the html tags are closed before the ellipsis what do you think the append option is just my idea if you have better idea feel free to share >>>themes
draft app settings advanced generated ui following on from 2142 and perhaps 2143 we will need to complete the ability to create generated ui for app settings this issue is still draft as the final details won become apparent until we really get stuck in but here are some thoughts there are basic set of inputs we ll want to support short text text input long text text area checkbox select dropdown select spinner as per posts per page image upload switch on off we need to have basic version of each of these with the obvious customisations we also need to be able to generate the full list of settings make it possible to save them and make sure that things going wrong gets handled sensibly more on this to come >>>apps later settings
ghost filters are broken issue summary calling `filters registerfilter` from an app via the proxy object causes an error error cannot read property ghost foot of undefined full error message when trying to register the ghost foot filter https gist github com erisds e55f095150114e1fc6ad it seems that the `this filtercallbacks` is always undefined so guess the way the module is setup to get instantiated isn working properly there are also two properties `this filtercallbacks` and `this filters` think only one is needed believe once upon long before github we may have tried to maintain list of all the available filters this may be useful but isn done at the moment steps to reproduce create an app as per the wiki guide https github com tryghost ghost wiki apps getting started for ghost devs add the following snippet to the `activate` function make sure the app is set in `activeapps` as per the wiki guide https github com tryghost ghost wiki apps getting started for ghost devs run npm start technical details ghost version master https gist github com erisds e55f095150114e1fc6ad>>>apps bug
bug tags are not escaped in editor widget issue summary it possible to create tags with html foo which is then not properly escaped in the editor tag widget steps to reproduce enter tag with some html this is bug because it not only allows you to enter html that is then not escaped but also break the document by simply several closing tags tag escape https cloud github com assets 176576 2117154 668e5752 90b9 11e3 987a 46d47ad499e7 gif technical details ghost version master >>>bug
from address on welcome email is triggering spam filters currently the welcome to your new ghost install email is sent from user email address this is triggering spam filters heavily as the user is receiving an email from and to the same address but from different origin ip classic email spam spoofing phishing think it would be advisable to update all system emails to come from ghost blog url update webmaster blog url where blog url is taken from config js>>>beginner bug
discussion app settings dynamic ui in addition to 2142 it is anticipated that apps will want to create custom settings and context for their settings screens as shown in the following screenshot custom http puu sh 6n85p png unlike the standing label field and help text settings ui that ghost has this is an entirely custom center aligned piece of ui that is interactive changing the slider or entering different time would change the text output at the bottom this issue exists to discuss the following how can we make it possible for apps to register template for their settings screen how can we make it possible for them to register the image css and js assets that would be needed how can we make it possible for them to retrieve and save the data it may not be possible to achieve this if we want to deliver in reasonable time frame but we can at least have clear plan of how to get there >>>apps ember later settings
app settings generated ui single text input requires 2139 the goal of this issue is to be able to define single text based setting for an app as per 2139 and have this result in working text input on that app setting page and not the setting page of any other apps settings http puu sh 6n7km png the outputted ui needs to contain the label help text defined in the app settings and standard text input pre populated with the value from the `app settings` table when saving the setting it needs to run any validations such as max length defined in the settings and save the new value notifications for success validation error or other errors need to be generated such that they are consistent with the rest of ghost the key part of completing the goal of this issue is creating structure for defining settings uis that can easily be output so that as we expand the abilities of apps and this system it will be able to generate screens with many and various settings data binding will be serious consideration for this issue >>>apps ember later settings
draft apps wire up the correct install activate manage delete ui this is draft issue to go along with 2065 as it is anticipated that work will be required after 2083 and 2040 to get the app screens wired up exactly correctly >>>apps ember
apps additional lifecycle and settings ui following on from 2083 it would be nice to get the app ui few steps closer to it final version so that we can ensure everything works as needed each app should be output as an icon generic for now name and green grey button to activate deactivate the app it doesn need to be pretty or horizontally laid out or anything just lets get the right stuff on the page clicking on an app takes you to secondary screen which contains working activate or deactivate button in the top right corner will be replaced with on off switch later working back button in the top right corner and the app name in the top middle or at least contain those things somewhere on the screen settings http puu sh 6n7km png >>>apps later
app settings ability to define default settings similarly to 2095 apps are going to need to be able to define their own settings imagine this would be something like our own default settings json where they can define setting default value and any standard validations it is also intended that app settings would have type which relates to the type of data it is going to store see 2102 to go along with the data and type there will need to be way for settings to define what sort of input to display to the user short term that might be one of text field textarea checkbox or dropdown long term it will be necessary for apps to define their own custom inputs as example consider an app which provides some basic settings for customising theme some of this might be default inherent for example the default input for string could be text input the default max length might be 150 as it is in ghost pretty much and select inputs may validate that the option is in the ones provided by default once we have way to define these settings we then need to do something with it we probably need to pre populate the `app settings` table with the options and their default values is there anything else we need to do with this creating the ui to change the settings comes in separate issue >>>apps data later settings
model extension for apps once 2102 is done we will need to extend our models to be able to use the new database tables once the discussion around 2102 is complete ll update this issue to include details around what needs to be done but in short we ll need models for `app settings` and `app fields` we ll need way to augment the existing models with additional data from app fields we can limit the ability to extend the existing models to just posts for now and add users and tags in we may also want to split this issue into one for `app settings` and different one for all the `app fields` one >>>apps data
image url falsely parsed as mailto retina images with the 2x cause the markdown renderer to falsely mangle urls into mailto hrefs this was reported in the forum https ghost org forum bugs suggestions 5197 image url gets mangled with mailto for no reason issue summary this happens both on the admin backend as well as in the published post steps to reproduce enter url to an image that has the 2x suffix foo http example com image 2x jpg the link to foo will show up as `http example com 3ca 20href mailto image 2x jpg 3eimage 2x jpg 3c 3e` technical details ghost version 1>>>bug editor
app installation permissions modal requires 2083 the first time an app is activated it will also be installed internally to an app installing means it runs the install lifecycle method externally to an app install means adding it to the `installedapps` setting and also confirming the apps permissions with the users therefore when clicking on the activate button if an app is not yet installed we need to show the user screen with the permissions the app is requesting for now this can be modal that just dumps some any all details from package json and gives the user the ability to accept or reject doesn matter that it is 100 right now if the user accepts the app will get installed activated providing the install process completes if the user rejects the app will not get installed and will remain deactivated the ui will be spec completed properly in 2101 >>>apps ember installation later
unknown error when sessions ends on settings page when session has expired trying to save ghost settings triggers red unknown error to reproduce leave your settings screen open for 12 hours and press save related to this issue feel like this is happening too often do we have much shorter session time than average >>>bug
url helper in contentfor when inside the post tags it possible to retrieve the url of the post by using the url helper url when using contentfor block however this doesn seem to work for the sake of explaining this issue will use my own example on my default hbs have created block like this block meta want to fill this block from the post hbs and there have the following code in my post hbs contentfor meta contentfor everything is working fine except for the url helper this gives me back random strings which are different on almost every refresh of the page these strings look like the following example lhqbzgwu >>>bug
json data api docs with the api cleaned up and consistent we should document for all available endpoints the options arguments available and what they do the possible return values the possible errors or warnings >>>api docs
json data api cleanup for consistency the api needs clear naming convention for functions some thought about the names of non bread functions clear naming convention for options arguments some thought about what options arguments are available to each function clear convention for return values consistent behaviour for error and warning handling once this work is complete we should rename the api routes from v0 to v1 update by erisds 10 04 14 as result of the discussion which occurred in 2362 we now have clear plan of what we want to do with our api in order to make it clear consistent and easy to make decisions about how things should work we want to move our api towards supporting json api but with one major difference all included objects should get included inline rather than using linked objects linked object support will be added in the future via some sort of switch the move towards the json api response format http jsonapi org includes number of distinct changes the response is an object with number of keys one of those keys should be the pluralised name of the primary document type which is being returned in terms of ghost this means `posts` `tags` `users` `settings` etc the response object can also contain `meta` key this will be used to return pagination data the key for the primary document type always contains an array even when only one object is returned therefore the response for single post would look like posts id uuid related objects should default to using their relation name as the key therefore in the post response there should be an `author` key not an `author id` key related objects should only be exanded into full objects when explicitly declared with `include` the headers on the response should include content type header of application vnd api json application json the response to create request should include location header like location `http my`blog com ghost api posts 12` the keys for pagination data should be moved into top level `meta` object we should add support for patch requests long term we should add support for the sort query param long term there are quite few changes some of them bigger and harder than others the following is list of issues which should get us from where we are to where we want to be move to primary document format posts 2580 tags 2605 users 2593 settings 2606 db 2647 mail 2650 notifications api proper endpoints for persistent notifications 2637 tag api parent relation 2607 post api author relation 2608 post api pagination meta 2604 post api explicit includes 2609 non rest function route names 2601 options vs args 2610 internal cleanup consistency provide proper status codes for api operations 2187 error messages 2643 2690 complete documentation 2125 >>>api epic
allow html inside tag prefix suffix tags prefix bull currently outputs plaintext it would be nice if html could be used here >>>themes
draft tag management ux ui this is draft placeholder issue it will be replaced with details of ux ui for editing and removing tags from johnonolan when it is ready this needs to built asap in order to make 2111 2112 more worthwhile useful >>>ember settings themes
handle errors from apps appropriately it not going to be possible to close this until pretty late in but hope that having this written out will mean that expectations are clear and we might not have to do any additional work for this issue firstly starting ghost with non existent apps defined in either activeapps or installedapps needs to result in nicely formatted red white green error message output to the console but no crash and no unhandled promise errors in dev mode apps which don exist simply don get loaded into ghost and the app ui will deal with messaging this in more friendly way and providing options to resolve the problem secondly errors in apps also need to result in sensible behaviour again nicely formatted red white green error message on the console absolutely no crashing or unhandled promise rejections coming from ghost itself if an app throws causes an error during it initial activation or loading then don load the app at all if the error is caused later handle the error as best as possible where possible we might want to consider deactivating an app that causes errors especially if those errors appear in key place such as on the app management screen as if this was to show 500 error page the user would be prevented from disabling broken app some errors that might happen in apps syntax errors in javascript typos attempts to use apis that don exist or don make sense in given context attempts to do things that apps are not meant to do destructive actions an app might delete stuff it depends upon problematic missing dependencies in apps any errors of any kind with package json files essentially we have no way to guarantee the quality of code in an app it may well break and we need to be ready for that >>>apps later server
the has block helper note originally discussed in 1574 and 1562 the idea for the `has` block helper is the result of much discussion and is an attempt to provide the tools theme developers need to do different things based upon the context they are in we deliberately and specifically avoid logic in templates where possible handlebars only allows boolean conditionals the `has` helper is generic enough to solve many scenarios for ghost theme devs whilst still not entering into the murky land of defining what is pretty much an entire programming language the intention is that the `has` helper will allow you to ask questions about the object in the current context starting with asking questions about what tags the current post has like if the current post has the tag funny the attribute `tag` allows for asking questions about tags with just one tag provided it checks for just the single tag however there are other formats available for asking other questions if the post has the tags funny or video has tag funny video has if the post has the tags funny and video has tag funny video has for simplicity the and and or forms cannot be used together as block helper `has` needs to support inversing so that the not form of any question can be done by using handlebars or `else` syntaxes has tag funny video has has tag funny video else has >>>themes
bug rss feeds not validating issue summary rss feeds have been reported as not validating on the forum https ghost org forum bugs suggestions 4101 rss feed validation failed the `author` tag is not defined for channel and data isn always correctly escaped steps to reproduce paste live url for rss feed from ghost blog into http feedvalidator org try to validate technical details ghost version >>>bug
discussion filters api the following filters appear in ghost so far helper filters each of these is applied to the default output from the helper of the same name before it is returned `body class` `post class` `ghost head` `ghost foot` `meta title` `meta description` data filters `prepostsrender` inconsistent and badly named it is applied to the data output by the the home and single controllers right before it is passed to render it is inconsistent because in some cases it gets an array of posts and in others it gets single post it is badly named because it has completely different convention to the helper filters here are some questions like to start discussion on before locking stuff down for what naming convention for makes the most sense for filters and helpers to date we used the underscore format on helpers to denote that they have matching filter other helpers are single word or camel cased is this good idea or is it just super confusing what filters do you want to see in ghost the helper ones can stay for sure although they may get renamed is it useful to have consistent set of pre render filters for all kinds of data sent to views we will have tag pages as of 2111 at what level do we apply those filters for example on post page do we apply it to whole post just the content etc interested to hear ideas from the community on where else they like to be able to hook into ghost rather than writing big list of what think making no promises that the suggestions will make it into still believe this will be interesting ghost >>>apps later
helper updates for tag pages these changes require 2111 to make any sense and will depend on changes to the `urlfor` function so it is possibly worth considering 1833 tag helper update for tag pages once the feature for tag pages exists the tags helper can be updated to output tags in an tag by default with an option to turn this off propose the option could be tags autolink false but would like some feedback from the community on this url helper update for tag pages once the feature for tag pages exists the url helper can be updated to support outputting urls in the tag context this means that if someone wants to create customised list of tags rather than using the tags helper they can do so by doing something like >>>themes
feature tag pages tag pages allow the for the browsing of posts which have particular tag by visiting the route tag slug where slug` is the slug of particular tag the tag page will provide the template with paginated set of posts for the given tag which can be accessed via foreach posts in exactly the same way as the standard post list is rendered using `index hbs` additionally tag pages will provide the template with all the data for the given tag such that it can be accessed by the tag via tag in the same style as the `post hbs` template the new tag controller will support template view hierarchy much like `page hbs` `post hbs` if there is template called `tag hbs` this will be used to render the page otherwise tag pages will use the standard `index hbs` which lists out posts note for this to be truly useful there are some changes need to some of our handlebars helpers as covered by 2112 note for users to really love this feature they re going to need to be able to manage their tags delete unused ones edit descriptions etc this will come along in 2119 >>>themes
editor doesn find the correct char offset to edit in internet explorer 11 issue summary was doing some tests with different browsers to reproduce the error described in 1007 and noticed an issue with the editor in internet explorer 11 it seems to calculate the offset of the chars to edit wrong sometimes steps to reproduce start with default installation of ghost and change the text of the starter article to the edit window inserts linebreak line this however when moving the cursor around the editor seems to think that the first line ends after brown and the 2nd line has more characters that appear as blanks when editing the 2nd line the typed chars are inserted chars to the left if you type char into the 2nd char of the line between and it is inserted in the previous word resulting in fqopx for some reason the calculation assumes that the last word in the previous line is wrapped around to the beginning of the 2nd line technical details ghost version client os windows 64 bit server os windows 64 bit node version node js v0 10 24 browser internet explorer 11 since this is probably related to the font layout should mention that my screen has resolution of 1920x1080 please take look at the screen recording there you should see the error ghost edit https cloud github com assets 156144 2070132 74462866 8d17 11e3 9ca3 948b9721f79f gif basically the offset is chars to the left which is the the width of the fox word in the line above and the additional spaces in the current line >>>bug editor
content words returns all content if the first html word is an image markdown that has single quote in its alt text issue summary content words returns all content regardless of the specified number if the first html word is an image markdown that has single quote in its alt text steps to reproduce when creating post have the first element be an alternate text with someimage jpg use content words or any number notice that all the content will be parsed not just the specified number of html words this is bug because the specified number of html words should be included in the content words even if the alt text of the has single quote apostrophe watch this screen capture for details https cloud github com assets 2859127 2062972 1e3a1bda 8ca9 11e3 9c93 3f78a0c16590 gif technical details ghost version production version client os windows server os windows node version v0 10 24 browser chrome>>>bug themes
occasionally nodejs index js gets stuck before printing the startup message occasionally when start ghost the process gets stuck somewhere before printing the welcome message when doing strace on the process it repeats the following lines epoll wait seems to suggest that it is waiting for something but since it is not yet listening on the port not sure what that could be am seeing this in ubuntu 13 10 64 bit with virtualbox running on windows host >>>bug
database schema additions for apps draft keeping this as draft for now as like some input on the exact schema to give apps some ability to store sensible data in consistent way we need to add few new default tables the first is the `app settings` table which provides for apps to store their own settings it is pretty much identical to the `settings` table but with an `owner` column which should contain string to identify which application created the setting instead of `type` column do we need anything else here the second thing like to add is the `custom data` and `posts custom data` tables better names are very much welcome bulb these tables should allow apps to effectively create new columns on the posts table or rather add additional properties to the posts object there is more to consider here should the `custom data` table be this general should the `post custom data` table have proper foreign keys is the type column needed on `custom data` or does this belong elsewhere is there more information needed to be stored for each item of `custom data` like validation or permission rules or should this information be kept somewhere else also something thinking about with this schema how should we fetch the data should we always fetch the additional columns or should we add use with option that that apps can pass via the api and augment the queries elsewhere in the app by using filters is that too complicated how is this going to affect performance etc >>>apps data settings
app permissions ui when installing apps we want to present to the user all the permissions that an app is asking for as per app ideas permissions https github com tryghost ghost wiki app ideas permissions permissions might be something like can add edit and delete posts can add new route all apps by default will be able to browse and read published posts browse and read users where each user only returns safe data the permissions can either be accepted or denied as group accepting will install the app denying will not install the app >>>apps later
app permissions ref app ideas permissions https github com tryghost ghost wiki app ideas permissions and 2007 we want applications to be able to define the permissions they require to work these permissions cover api acl style crud permissions on models like add post edit user and also potentially more general permissions on non objects like add route these permissions are used in two ways for implementing access control throughout ghost see 2059 to present to the user when installing theme to give the user visibility on what an app might be doing we need way for apps to define what permissions it needs this needs to be accessible throughout the application so that the acl tools can read check against them user acl exists in the form of roles permissions user roles user permissions and role permissions tables in the database the first problem that we need to solve is how should apps define their permissions is having their own config js as suggested by app ideas permissions https github com tryghost ghost wiki app ideas permissions the best solution or could this be done in package json the main difference being that js file can contain javascript and that package json has specified format and is used by other things so might end up with its own permissions option which would clash the second problem is how to make these permissions available to the application is loading the permissions object array into memory enough or should we load these into the database as result of this issue like to see defined spec for basic set of app permissions and how to define them on the wiki as well as implementing the loading of these permissions in the app loader >>>apps
markdown issues with new lines line breaks are not always working it hard to describe what is happening therefore made gif would expect the formatted right being the same as the input left markdown https cloud github com assets 2971735 2058040 302747fa 8b5a 11e3 8a5b fffecc97876c gif narrowed it down and changed regular expression thought got it working until did `grunt validate` it starts failing at https github com tryghost ghost blob master core test unit client showdown int spec js this is rather strange because if reconstruct that output manually in jsfiddle http jsfiddle net f4zjp 23 it perfectly matches the provided regular expression take https github com tryghost ghost blob master core test unit client showdown int spec js l75 for example it fails with putting said input line that in my modified jsfiddle http jsfiddle net 43cnx the output of haunted markdown and fixed haunted markdown is exactly the same also the regular expression http regex101 com yp1gs7 matches hope didn write this too complicated >>>bug editor in_progress
handle session expiry gracefully ghost sessions last 12 hours some people keep the window open lot lot longer than that if they do their session goes away and when they go to save they get an unhelpful error message which just says unknown error firstly it would be great to upgrade that message to say something sensible like oops you re not logged in this is now covered by issue 2171 this issue focuses on improving the overall handling of sessions secondly would like to notify user that they are logged out before they attempt to save it would be great to have background script that pings the server checking for the session thirdly at the moment even if you log back in again via separate tab you still can save your post it would be super great if we could make this possible >>>ember fix_wanted users
bug page hbs sometimes not recognised in certain situations the `pages hbs` file is ignored scenarios observed results if switch themes to different theme the `page hbs` file is being called if copy `page hbs` from casper into my theme folder it does not get called if rename my theme folder to something else the `page hbs` file gets called if rename my theme folder back to the original name `page hbs` does not get called desired result the `page hbs` is always referenced if it exists forum topics related https ghost org forum bugs suggestions 5065 v0 page hbs doesn seem to do anything additional information version 1>>>bug
bug tag popup is no longer navigational with arrow keys when the tag popup appears you can no longer navigate through the tags as before scenario create post start typing tag that already exists use arrow keys to navigate the suggestion list observed result only the top and bottom tag suggestion can be selected desired result the user can navigate through the list and select tag freely using the arrow keys forum topics possibly related https ghost org forum bugs suggestions 5069 possible bug up down arrow key navigation broken for tag suggestion popup menu additional information browser all version node version v0 10 21 os mac os 10 9>>>bug
bug login signup input focus border misalignment all of the inputs in the authentication process so sign in forgot password sign up when focused add `1px` border making the box `2px` bigger in each direction making it misaligned with other inputs or its container screen shot 2014 01 31 at 09 00 05 https cloud github com assets 390392 2048924 b7dcc31e 8a56 11e3 9ec1 525f1586d1ce png see the bottom edge of the inputs here steps to reproduce go to the sign in sign up page focus on an input technical details ghost version via ghost org hosted service browser chrome 32 fix would be to use solid `box shadow` which doesn affect the dimensions like box shadow inset 1px aaa9a2 know it such simple thing to send pr for but wanted to check it wasn done for specific reason ll send pr if this was late night oversight >>>bug
bug tag with apostrophe gets truncated upon entry issue summary have tag rich cigar store with an apostrophe whch was created in previous post that when added to new post gets truncated screen shot http cl ly items 1f2m2r2r350b0k0a3b3o image 202014 02 03 2015 3a36 3a08 png screen shot http cl ly items 1f2e3s3t0k0n0a2a2u0w image 202014 02 03 2015 3a36 3a44 png after creating new post and typing few characters for tag selected the suggested tag from the popup menu using the up down arrow return key technique the tag actually get is rich everything before the apostrophe steps to reproduce add post with tag that has an apostrophe in it create another post in the tag field type the first few characters of the tag created in step and select it either with keyboard commands or with the mouse you should see truncated version of the original tag technical details ghost version and client os mac os 10 server os mac os 10 node version 10 24 browser chrome>>>bug
bug image upload and importer fail in ie9 with 403 error issue summary cannot currently upload any image or import file in ie9 because ie 10 does not support xmlhttprequest file uploads and therefore does not support the custom headers we use to tell our csrf protection that the file upload is ok see https github com blueimp jquery file upload wiki browser support wiki xmlhttprequest file uploads steps to reproduce fire up ie9 try to upload file any file in ghost see that nothing happens at all no error message nothing technical details ghost version client os windows server os localhost node version 10 24 browser ie9 >>>bug media
apps initial lifecycle and setting screen ui we have the draft designs in 2065 in order to make the app ui pretty we need to first setup settings screen and wire up little bit of the app lifecycle it would be good to start out with new screen in the settings area list of app names and versions pulled from the content apps folder package json files requires 2081 the ability to activate and deactivate an app something like this apps http puu sh 6db1t png >>>apps ember settings
add package json support for themes require tree already reads all of the contents of theme directory but we want to add support for reading the contents of `package json` file on the settings page if theme does have `package json` file we should read the name and version number and use these in the dropdown like themes http puu sh 6davd png if there is no `package json` file we should use the directory name as before also if theme does not have `package json` file output warning on the console explaining that themes should have `package json` files and link to page explaining what going on the url for that page is tbd it is worth considering how and where we load the data from the `package json` file probably at the same time as doing the requiretree and also when to output the warning at start when the directory is loaded when the theme is activated recommend both note this is temporary improvement to introduce package json files long term we will add support for more information via much better ui also note when implementing this consider that apps which are not currently used in the ui anywhere will also need to have package json files which are loaded >>>themes
publish ghost to npm there are few outstanding tasks that need to be completed before ghost can be published as npm module don require compilation of assets 2239 allow for ghost to be installed globally g` possible include project scaffold 1001 allow ghost to be mounted as an express middleware component 827 extend ghost bootup to take in config object directly 1818 allow configuration of content directory location 1858 allow disabling of logging 2103 document all ways to use ghost as npm module middleware your own bootstrap script globally 2008 conform to standards for npm modules with regard to running `npm test` 1053 tests to ensure all these features remain in working state including way to know when ghost has started so we know when we can accurately begin running our tests 2225 >>>epic
bug pg has random tag related test failures issue summary the pg build frequently but inconsistently fails the following test tag model post setting tags from an array on update attaches one tag that exists in the tags database and two tags that are new to the tags database expected actual full gist here https gist github com erisds 903c874724e156c0f40b which is really weird it also regularly fails with settings model api can read typeerror cannot read property should of null also shown in the same gist steps to reproduce unknown trigger few builds one is bound to fail technical details ghost version >>>bug data tests
bug published date in post settings is not being accepted in the various formats issue summary when entering date in one of the supposed accepted formats like `dd mm yy` ghost returns that the date is invalid when entering date with digit year such as `2014` ghost gets confused think you mean 20 and tells you off for setting date in the future this shows that only the first format `dd mmm yy hh mm` is actually being used steps to reproduce create post and publish it try to set the date to something in the past but using the format `dd mm yy` or `dd mmm yyyy` we should support all formats in the list and additionally lets do 1866 while we re here technical details ghost version rc1>>>bug
bug cannot set date on unpublished post issue summary it is currently not possible to set the date on an unpublished post again it throws an error in the browser console really need to add some functional tests for the post settings menu steps to reproduce create new post give it title save it as draft change the published date see the error message in the console this is bug because broke it by not adding guard here https github com tryghost ghost blob master core client views post settings js l161 technical details ghost version rc1>>>bug
draft code up the new app uis html sass the item is currently draft because the ui designs are still work in progress here they are so far for your viewing pleasure desktop http cl ly items 0h1b1z101f3v0m1m3y2o apps png tablet http cl ly items 101n3v1p130v3t0y3o1c apps 20 20tablet png mobile http cl ly items 1c09220x2e10402t422q apps 20 20mobile png delete http cl ly items 1x1s450v3k38081q0s0k apps delete png manage http cl ly items 3w183m170s0j2z1a0g12 apps bulkmanage png >>>apps ember
acl and strict rules for settings api the settings api needs an overhaul in terms of permissions this issue depends on 2060 and is an amalgamation of 736 and 1473 into one much clearer issue the goal of this issue is to make the settings api as safe and secure as possible the following rules should be true the only settings that should ever be created are ones which are defined in default settings json settings of type `core` are private apps can never read these settings and nor should requests which come from the client side or any other external context effectively these can only be read internally by ghost they can however be read by any ghost user how reading creating settings should work when specific setting is requested via get if it isn found we check to make sure it isn specified in the default settings json if it is we should return the default value and also load it into the db when trying to create or edit settings via put post if setting is not yet in the db we should again check if it is specified in the default settings json if it is we should create it but with the supplied value if it isn we should not create it and we should return saying the setting was invalid it doesn matter where the request comes from these rules should occur additionally if the request is not internal any request to edit read add or browse setting with type core will return an access denied type error message all settings api methods should be protected by standard acl allowing us to deny access to certain settings for different user groups the only question here is whether or not apps would validly need to know what databaseversion ghost is currently running if this is true then we need to find different way to deny access to the dbhash >>>api apps settings
acl add to model based api methods posts tags users much of the post api already has access control but this needs to be completed all methods in the `post` api should have access control including `browse` and `read` this will involve ensuring that `canthis` will work in way that supports anybody inc null user having access to the published posts and only the admin user having access to the non published posts given that we also have to consider adding acl for apps 2059 it may be worth extending the concept of `apicontext` to include where the request is coming from if it an internal server side request from ghost from an app or client side request this may provide us with way to specify that the client side context has access to all published posts etc all methods in the user and tags apis should also have acl added to them which should be reasonably straightforward the settings api is little bit more tricky and should be dealt with by separate issue 2061 >>>api apps
acl for apps as per the explanation here https github com tryghost ghost wiki app ideas permissions wiki permissions we want to make it possible for apps to register for permissions in the same way that users have permissions those permissions are enforced in various places most importantly in the api apps need to make internal requests to the api methods via the proxy object therefore we need way to determine or define which app is making the request this should probably be an extension of the apicontext see 2058 as we still need to know on behalf of which user the request is being made determine what permissions the app has this should probably be done by fetching those permissions from the correct app config provide way to ask if the current app and the current user have permission to perform the action they are trying to perform this should likely be an extension of canthis which takes more complex context than single user `canthis app my app user edit post it important to deal with permissions for both the app and the user as otherwise in future it could be possible for less privileged user to use an app to do things they shouldn be able to >>>api apps data
acl the api current user everywhere in order to roll out full access control we need to update improve and fix the concept of `apicontext` which exists in the api request handler https github com tryghost ghost blob master core server api index js l47 currently api context is set to `user req session req session user` this is wrong by accident the evaluates to `true` which evaluates to `1` which is the correct user id in the majority of cases but believe this should really be `user req session req session user req session user null` in addition to this we need to consider how to pass this concept of user through to every action which makes change on model so that the `created by` `updated by` and other user id are set correctly >>>api apps
support for additional permalink structures currently ghost supports the following permalink structures standard slug dated year month day slug in order to make it easier for people to move their blogs from other platforms to ghost we want to support any permalink structure which contains any of the following items slug` id` year` month` day` santised custom text containing or to be valid permalink each item must be separated by and there should be maximum of items the permalink must contain one of slug` or id` so that the post can be identified so could set my blog posts to have url like any of these year month slug year slug blogpost id post year month day slug at the completion of this issue ghost should support these structures if the permalink setting is modified directly in the db the ui for configuring the permalink in admin is covered by issue 1631 note some things we should consider for the future are whether or not to support adding html` to the end of urls so that imports from blogger work whether to import custom data and allow that in the url like the id which is in tumblr urls we do want to make it possible to have an app that does mass re writing redirecting of urls so we could solve these problems by having an app 301 redirect the html out of blogger urls and the id out of tumblr urls in which case blogger becomes year month slug and blogger becomes post slug `or even the default slug >>>importer
bug multiple hits on the save publish button can create multiple posts issue summary on slower connections where there is time to hit the button multiple times multiple posts can be created accidental double clicks or multiple clicks because it appears nothing is happening can result in multiple posts being created and or published steps to reproduce ensure your connection is slow enough to give you time between request and response open the editor enter title click on the save draft or publish button as many times as you can before the request completes this results in unexpected multiple posts believe the correct thing to do would be to disable the button until the request completes technical details ghost version database mysql connection slow >>>bug
move nprogress to ajaxstart and ajaxcomplete as recommended by gotdibbs https github com tryghost ghost pull 2032 issuecomment 33309330 it may be better to move nprogress from wrapping sync calls to being defined in ajaxstart and ajaxcomplete it would be nice to clean it up so that this was the only place it was used >>>ember
standard markdown linebreak support as discussed in 1087 ghost currently uses its own markdown flavour that deviates from the spec by converting single line breaks to tags while understand that this probably enhances usability for those not familiar with markdown it does create interoperability problems for those that use markdown in lots of places or use external editors which does hard wrapping so hope it would be possible to make this configurable so markdown nerds can still be happy neckbeard >>>apps
refactor flow of error rendering at the moment all errors 404 or 50 get rendered using the following templates in the admin we use the `server views error hbs` template on the frontend if the theme does not have an `error hbs` template we use `server views user error hbs` if the theme does have an `error hbs` template we use that however if there is an error when attempting to render the error template we fall back to using `res send` with some really basic super ugly html this is because it is reasonably common for custom themes to have errors on the error template and we need to be sure to catch them it may be better to refactor the way errors are handled on the frontend so that `user error hbs` becomes `default error hbs` we attempt to render 40 errors using the theme template but 50 errors always use the `default error hbs` this way if we can do the following with the error templates 404 theme 500 default 500 basic html but if we re rendering 500 we would always do 500 default 500 basic html alternatively we could refactor the frontend errors to attempt to use the theme template and if that fails attempt to use the default and finally revert to basic html if we re doing this we could also support separate `error404` and `error500` in themes so we would do 404 theme 500 theme 500 default 500 basic html or 500 theme 500 default 500 basic html however if we get string of errors like this we need smart way to display the fact that we encountered the latest error whilst trying to render an error page for the original error at the moment there can only be rendering error and an original error and we output it in the form finally we need to consider what happens to 40 errors that are not 404 errors >>>server themes
generate and store coverage reports from travis similar to after 1063 update our tests on travis to also generate the coverage report and then store the html file somewhere on github send the results to codeclimate we should at some point create github repo especially for storing data images etc from the tests html files could be stored in gh pages or in the wiki or just as files in folder on the repo with date stamp so we can see which is the latest none of that is necessary we have codeclimate account and can use that to collect and display coverage data in nice format >>>tests
import button does not work in firefox if you go to the semi secret import page in firefox and try to import file the click on the import button is not hijacked by the javascript and the form is instead submitted normally as rather pointless get request to `http localhost 2368 ghost debug importfile ghostdata json` if you don inspect the url it looks like nothing happens have not been able to nail down the root cause here but it seems to be related to some of the magic going on with the click event in debug js https github com tryghost ghost blob master core client views debug js source cc l25 >>>bug
enhancement add http caching for api calls all calls to ghost api v0 are currently not cached and the full response is transmitted for every request to speed up responses and reduce the amount of data transmitted it would be good to add `etag` http en wikipedia org wiki http etag and `last modified` http www w3 org protocols rfc2616 rfc2616 sec14 html sec14 29 headers to allow http caching requests with `if none match` and `if modified since` headers should then return `304 not modified` if there is no newer version of the dataset >>>api data
bug published at is not always set issue summary it is possible for blog posts to get into state where their `status` is `published` but `published at` is null steps to reproduce unknown this is bug ve seen reported numerous times on the forum https ghost org forum using ghost 3609 posts on content gone missing and is definitely still occurring in in added fix to make sure that when this happens the content screen doesn break https github com tryghost ghost issues 1730 but it still happens and borks the order of posts on the admin and frontend have feeling this is caused by the way we use the saving method in bookshelf and probably requires https github com tryghost ghost issues 1655 in order to be fixed but think it would be good to investigate to see if we can at least find way to reproduce it technical details ghost version potentially mysql only >>>bug
bug nprogress is not triggered when updating post issue summary when updating an already published post the nprogress bar blue line at the top of the screen is not triggered steps to reproduce publish post update it technical details ghost version browser chrome 32 1700 77>>>bug
docs documentation regarding ghost as an npm module am excited that the newest version of ghost supports its usage as an npm module however could not figure out how to use it properly specifically how to create custom routes to new pages ex about contact etc >>>docs
discussion app safety security one of the key areas we need to focus on as we introduce ghost apps is the safety and security aspect of running an app we need to make sure that apps are safe for our users sebgie started to flesh out some ideas here https github com tryghost ghost wiki app ideas permissions and know that jgable also had some similar ideas about how to do this think the ideas outlined here are sensible but also wanted to start discussion about how we can ensure that apps are not able to work around the security restrictions that are in place for example if we offer apps access to the database data models via an api we don want them to be able to circumvent this entirely by just doing `require knex have been toying with the idea of linting apps but that effectively means blacklisting certain strings like require knex and that never works really because people do stupid things like require kn ex so very interested to hear ideas from people about what we should and shouldn allow apps to do and how we can ensure this contract between ghost and its apps ideas in comments please >>>apps later server
timeout for requests again in an attempt to make sure that ghost doesn crash and continues to perform it job would it be good idea to add timeout for requests set to something high like 30 45seconds if request isn served in that time it would be nice to just display 500 error page with timeout warning rather than leaving the request hanging thoughts in comments >>>server
discussion error handling logging and debugging improvements as it stands ghost has errorhandling which is used throughout the system leaving it reasonably consistent we also have the nice red white green error messaging on the console to try to help people recover from issues ghost is also reasonably good at recovering from problems it has fall back and default behaviour in plenty of places and we are improving that in other issues however ghost log output is somewhat scarce when trying to debug problems ghost doesn always tell people when something has gone bit wrong it can often just serve non ok response and sometimes the error can appear as rendered 500 page but there nothing in the log we also don log when we get empty responses from the db etc we just carry on want to look at how we can improve this without adding too much code like to add an extra level of logging information my initial thought is to start using logwarn and only output this when in development mode or when debug is set to true in config js not sure if this is the right approach though concerned about adding lots of extra code and also concerned that the improvement will be minimal without some sort of verbose logging mode in the middleware that traces through how request is handled express logging is only about access logging as far as can tell and won output any more info so is there way to log where next gets called each time etc thoughts in comments please >>>server
bug bad behaviour when active theme is not available issue summary if someone removes or renames the currently active theme then regardless of whether we are already running or restarting and whether we are in prod or dev mode the admin should always continue to function normally which it does and the blog frontend should always display proper 500 error explaining the problem currently if the blog is running when the theme is removed load of unhandled rejection errors are thrown only visible in dev mode but we do eventually get proper 500 page if the blog is running and the theme did have an error hbs template then we get really ugly error message about not being able to find that template if the blog is restarted the frontend gets an unhandled promise rejection error only visible in dev mode in dev mode it hangs and in production mode it seems to crash show an internal server error message steps to reproduce navigate the frontend of the blog to make sure the theme is working rename the currently active theme navigate the blog again see the ugly error messages try restarting repeat these steps in dev mode and production mode and with themes that do and don have custom error hbs template no matter what happens ghost should keep running and serving error messages both as pages and in the console so that people can debug the problem technical details ghost version >>>bug themes
bug update notification causes double scrollbar when the new update notification is on screen it adds height to the element which breaks the fullscreen effect created by the relative positioning updatescroll https cloud github com assets 120485 1961223 0fd0f412 826b 11e3 99cd cea872689f86 gif can fix this but ll need conditional specialised class in body class for admin when the update notification is on screen `update available` would be nice but not the end of the world so punt to if it getting in the way >>>bug
feature support google authorship reasonably important thing for seo that very easy to support google authorship http www google com insidesearch features authorship is feature which allows writers to link blog posts or any web content with their google profile which subsequently makes their profile picture show up in search results this has been reported to increase click through rates by some 150 and supposedly makes your favourable in the eyes of the almighty goog there are two parts to supporting this feature in ghost create google profile url field should look like this with the link pointing to http www google com insidesearch features authorship image https cloud github com assets 120485 1960987 d6ffb072 8262 11e3 9192 5f5f8a1591dd png output meta tag on the author posts per yoast guide http yoast com push rel author head output the appropriate meta tag in ghost head for the author posts eg this should only be output on single posts not pages not archives multi user implications should also be considered >>>settings users
feature code injection to theme header footer via blog settings this has been talked about vaguely in multiple places few times so wanted to open an issue to centralise the discussion and get it on the historical record several platforms have feature which allows users to inject code into their user facing site via an account settings panel have included one example screenshot implementation of this squarespace below personally think this would be great to have in ghost it an instant easy way to drop in code for analytics site verification meta attributes 3rd party service integrations and many other quick things which would be nice to be able to use without modifying theme or writing full app believe from memory the arguments against revolved primarily around security concerns erisds image https cloud github com assets 120485 1960803 657d9f1a 825b 11e3 9aec e4f49fcaa45a png the click here for more help link in the screenshot goes here http help squarespace com customer portal articles 438250>>>ember feature settings
bug meta title shouldn explode if no title is available issue summary if meta title gets handed context that doesn contain post title` it shouldn explode steps to reproduce create an error hbs template in your currently active theme add helper that won work on error pages such as meta title restart the blog and visit 404 page witness the blog crashing with the error below error http cl ly image 392o211k2x3y we have no control over how theme devs use our helpers so if the context they are used in doesn make sense we need to be sure to output nothing rather than throwing an error technical details ghost version 4>>>bug themes
bug errors in theme error hbs should not crash ghost issue summary if user defines their own template for rendering errors and then there is problem trying to render that template ghost should fall back to the standard error template steps to reproduce create an error hbs template in your currently active theme add helper that won work on error pages such as meta title restart the blog and visit 404 page witness the blog crashing with the error below error http cl ly image 392o211k2x3y errors thrown by error handlers is always horrible state to be in we should never allow this to happen technical details ghost version 4>>>bug themes
update frontend js to use `js prefixed classes as hooks into the dom as per our should have been updated months ago frontend code standards https github com tryghost ghost wiki code standards frontend development standards html css we are trying to use the slightly obtrusive javascript http ozmm org posts slightly obtrusive javascript html method of separating classes used for presentation from those used for behaviour therefore anything used to hook in from jquery or backbone should use class name which is prefixed with `js and never use ids etc there are few places where this is not done including but not limited to login view client views login js l14 https github com tryghost ghost blob master core client views login js l14 mobile interactions client mobile interactions js l11 https github com tryghost ghost blob master core client mobile interactions js l11 etc etc vice versa `js prefixes should never appear in our sass so https github com tryghost ghost blob master core client assets sass modules global scss l949 needs to be removed >>>ember
rename plugins to apps there are several places throughout the codebase where we need to rename `plugins` to `apps` this includes but is not limited to the `content plugins` folder the `core server plugins` folder variables throughout ghost settings any comments it would be good idea to get this done as early as possible >>>apps
bug caused by unidecode bug post new article with title the article link will become http 127 2368 di 20 20pian 20 and 404 error happen after some check think it caused by module unidecode test code in index js unidecode require unidecode console log unidecode unidecode result node js ghost npm start ghost start node js ghost node index unidecode di pian it seems unidecode cannot decode chinese word correctly >>>bug
starting server outside of root causes upload issues when starting the server from outside the root ie `forever start sites ghost index js` any uploaded file will end up in content images 2014 jan` sorry for not using the issue template felt as an easy enough issue to describe this happened both on and master 91902575087adfea51ab86d4e74f516609751f15>>>bug
bug timing issue with database sessions this is bug can not reproduce but was reported on the forum https ghost org forum installation 4435 cannot login after upgrading to after some investigation think that there is problem with asynchronous calls in `bookshelf session js` >>>bug
import fails with generic error and entire app get stuck while evaluating ghost on an ubuntu 13 10 with nodejs 10 24 1chl1 saucy1 tried to import post from an octopress blog using this third party tool http djromero wuonm com import octopress posts into ghost even if the generated json looks fine to me while trying to import it get the following message problem was encountered while importing new content to your blog error unknown and the application get completely stuck and should restart it to make it work again is there some way to further investigate into this issue ve tried also with the latest version on master thanks >>>bug
investigation ghost memory usage ghost memory usage seems to have increased from 70mb to 90mb between and this is pretty big jump for not much increase in functionality we need to start reigning this in as it cannot continue to grow at this rate therefore think it would be good idea to start investigating what aspects of ghost are heavy on memory usage and look at ways to reduce this are there better patterns and code styles we could use are there issues with any of our existing code are we depending on modules which are heavy where there are lighter alternatives am playing with `mdb` and `dtrace` in every spare moment but am new to these tools so would appreciate anyone in our community who could offer bit of time to do some investigation themeselves provide advice on the best tools to use to track down unnecessary memory usage anyone who has any tips tricks or tools they can provide feel free to provide insight ideas and advice via comments like to put together some tools perhaps wiki page informing our community the best way to test investigate ghost memory usage so that we can start to get on top of it additionally raised 1914 as way to keep track of how much memory ghost uses on average over time and raised 1966 because some tests indicate memory leaks >>>server
theme errors should not crash the blog issue summary this is the second part or follow up to 1964 no matter what happens in theme or how bad an error is the blog should not crash it should just show 500 error page with details of the error steps to reproduce add an invalid handlebars helper to partial such as http my ghost blog com add an empty partial and include it in the default template technical details ghost version mode production>>>bug themes
custom page templates new feature page hbs is the default template used for pages but should be able to create custom layouts for custom pages let say create page called contact it generates slug of `contact` ghost should check to to see if page contact hbs exists and if it does use it it should also add `page template contact` to body class custom page templates in the context of ghost are intended as one off special templates for individual pages not multi use case templates like full width which have many application >>>themes
body class overhaul when page hbs template is used `body class` list post template instead of page template template class name should change based on currently used hbs` filename that would be really helpful when developing themes >>>themes
empty partials cause error 500 since there is an exception thrown on main index page occurs when one of below custom partials is blank https github com oswaldoacauan ghostium tree master src partials custom exception is thrown here https github com tryghost ghost blob 968176c7d70cd171f22f4f67476a46f227c1c855 core server helpers template js l19 adding below to an empty partial fixes an issue ghost version master latest commit c82d2eadba0176ce96ec91d57bfa8582cae50f95 server os archlinux ubuntu 13 04 osx 10 node version 10 original issue reported here https github com oswaldoacauan ghostium issues 47 issuecomment 32184528 >>>bug themes
bug ghost crashes under high load issue summary when ghost is under load it crashes when opening admin this issue is probably related to 1960 when using 10 times the users ghost doesn return an error anymore it crashes steps to reproduce used `siege` http www joedog org siege home to put some load on ghost for the test used `siege 100 100 http local tryghost org 100 100 users 100 100 repetitions no delay between requests while ghost is under siege opened http local tryghost org ghost with web browser and got the following error technical details ghost version master latest commit 91902575087adfea51ab86d4e74f516609751f15 client os osx 10 server os ubuntu 12 04 on vagrant node version v0 10 24 browser chrome 31 1650 63 >>>blocker bug
bug admin errors when ghost is under load issue summary when ghost is under load an error is thrown when opening admin steps to reproduce used `siege` http www joedog org siege home to put some load on ghost for the test used `siege 10 100 http local tryghost org 10 10 users 100 100 repetitions no delay between requests while ghost is under siege opened http local tryghost org ghost with web browser and got the following error stop the test and open http local tryghost org ghost and everything works fine again technical details ghost version master latest commit 91902575087adfea51ab86d4e74f516609751f15 client os osx 10 server os ubuntu 12 04 on vagrant node version v0 10 24 browser chrome 31 1650 63>>>bug
post html and markdown columns should use mediumtext this only affects mysql as per the old schema https github com tryghost ghost blob ccd7b211f22472fd14577f996f43e2586c161a27 core server data migration 000 js although not convinced medium the `html` and `markdown` columns of the post table should use medium text not just text we need to fix this in the schema at the very least such that any blogs created with are correct we also need to come up with way to fix this on any blogs which were created with this is tricky as knex doesn yet let us do column type migrations think potentially we could add piece of custom knex raw code for mysql as part of the migrations initialization long term we can replace this with the automatic migrations when column type migration is supported >>>bug data
need affordance to url encode post permalink integrating couple of social apis into ghost but see no affordance to url encode post permalink am overlooking the existing functionality if not like the prospect of an additional parameter to the url helper along the lines of encoding url but have correctly intuited from 1089 that encoded and url encoded are synonymous in themer space would url parallel helper called encodedurl find home in core >>>bug
bug themes that are symlinked cannot use custom partials directories issue summary if theme is symbolical link symlink then its partials directory will not be properly registered steps to reproduce copy the casper theme `cp rp casper casper copy` make symlink to the new casper copy theme `ln casper copy casper ln` add partials directory `mkdir casper copy partials` add partial `echo hello casper copy partials hello hbs` reference the partial in default hbs right before the closing body tag hello boot set the theme to casper copy save reboot the server load page verify success set the theme to casper ln save reboot the server load page verify error `error the partial hello could not be found` this is bug because symlinked theme directories are really common you may check out theme from github and link to it from your ghost installation it minor annoyance but common bug https ghost org forum themes 625 ghost is no longer detecting my partials https github com tryghost ghost issues 1747 and it hard to track down and debug without knowing about the problem cause the way in which the active theme directory is being checked for partials directory isn portable and fails on symlinked themes have fix coming as pull request technical details ghost version master latest commit c82d2eadba0176ce96ec91d57bfa8582cae50f95 client os mac os mavericks server os mac os mavericks node version 10 21 browser a>>>bug themes
show version number in admin would like to see the current ghost version running in the admin section so can validate that running the latest version with validate mean the current package version and not if successfully upgraded to the newest version could off course look at the package json file but to do so ll need shell access and know how npm nodejs work if look at 1260 can see that work is done to get something like all would like is to display this information on the admin pages >>>settings
bug update checker notification doesn refresh after upgrade issue summary after updating my ghost pre3 installation to noticed that the update checker didn go away steps to reproduce install ghost pre3 load admin panel notice super awesome friendly update notification upgrade to ghost load admin panel again notice the super awesome friendly update notification isn gone this is bug because upgrading ghost should clear the update notification it looks like it caused because when the update checker checks it sets nextupdatecheck in the settings table to the next date the update checker should run really good idea it also sets displayupdatenotification if ghost should display notification upgrading doesn clear this and it won clear until the next update check technical details ghost version client os debian jessie server os debian jessie node version 10 24 browser chrome>>>bug
challenge testing ci for memory usage love to see some sort of reporting on how much memory ghost uses as part of our build ci even though this information is readily available via process memoryusage all of the information tools around seem to be focused on instrumenting the app and detecting memory leaks although if we have memory leaks we should find them this is not what really interested in more interested in how much memory the app is using overall on average so we can keep an eye on usage as we grow the application every additional dependency all the modules we have internally all the data we store in memory etc all has an effect on memory usage and it would be nice to track this as we add new features >>>fix_wanted tests
markdown editor bold editor text when writing in the editor and you input the following screen shot 2014 01 11 at 11 01 52 pm https cloud github com assets 34726 1895571 5f1c9334 7b3e 11e3 8e5f 447f0ad14d48 png space or no space between the asterisks the text is bolded in the editor when nothing should happen >>>bug editor
static page checkbox automatically rechecked summary of issue when using the gear menu if you have clicked into the pub date field and then attempt to turn static page to non static the check box is automatically rechecked steps to reproduce click on new post fill in post title and post body with anything change action button to publish now click publish now click the gear and change the page to static page click on the gear again and click in the pub date field now try and uncheck the static page check box observed result when clicking to uncheck the static page checkbox it is automatically rechecked static page https cloud github com assets 4643742 1895488 54bda464 7b34 11e3 8f8d b8ddcc275c6f gif additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number pre2 latest commit browser chrome 31 1650 63>>>bug
sql error when saving post with tags summary of issue sql error when saving post with tags steps to reproduce click new post give your post title and body with anything click save draft add tags to the post click save draft observed result screen shot 2014 01 11 at 31 28 pm https cloud github com assets 4643742 1895483 13b3df7e 7b34 11e3 9eae 27598f439bf0 jpg the following notification is displayed additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number pre2 latest commit browser chrome 31 1650 63>>>bug
your passwords do not match notification stacks summary of issue on ghost reset interface the notification your passwords do not match stacks but the your password must be at least characters long does not steps to reproduce on ghost signin page click the forgotten password link click the url in your email on the password reset form fill out both password fields but do not make them match click reset password button multiple times observed result screen shot 2014 01 10 at 01 41 pm https cloud github com assets 4643742 1893261 d5614844 7a7d 11e3 86cf a7a09e23d337 jpg additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number pre2 latest commit browser chrome 31 1650 63>>>bug
randomly logged out summary of issue am randomly but reproducibly logged out of ghost interface when viewing content tab steps to reproduce these are the steps performed when noticed this issue started over and did them again step by step and was able to reproduce it have not tried to simplify the test case yet delete ghost database start ghost with npm start production go to yoururl com ghost create user click on new post fill in title and body change to publish now click publish now go to yoururl com in new tab open your new post go back to other tab with ghost admin interface refresh the page click on content tab animated gif to large to attach here so here it is https www dropbox com 5mdgijj3vjevj7f logged 20out gif observed result am logged out of ghost and taken to the following url ghost signin additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number pre2 latest commit browser chrome 31 1650 63 with debug on in the config js file this is the out put from right before am logged out >>>bug
import form allows multiple file uploads issue summary on the ugly debug importer when using drag and drop to choose files there is no feedback to say file is selected you can then drag further images and this will result in multiple imports occurring steps to reproduce goto ghost debug drag valid import file onto the import drag the same file again and again now pres import the file will have been imported times this is confusing and makes it look like the importer is duplicating stuff technical details ghost version master latest commit efe04a73 client os mac os 10 server os localhost node version 10 18 browser chrome 31 1650 63>>>bug
user settings right now we have single concept settings where all settings live with mult user we re going to want to abstract that into types of settings areas blog settings user settings settings https cloud github com assets 120485 1879660 33493aa2 794d 11e3 862b 5a433bed0a16 jpg blog settings blog settings the settings screen we have right now with multi user we only want these settings to be visible to admin users all other users should never see or have access to this screen user settings this is new settings screen using the same layout as blog settings but only populated with settings relevant to the user this should live on user by default profile public profile data ghost user profile default account username email password ghost user account image https cloud github com assets 120485 1879768 c43d2c0c 794e 11e3 8b0d 8d0a79a04f63 png nb the menu order is reversed in this screenshot it should be per the bullet points above additionally apps should be able to register their own user settings screens for example an app might want to allow users to be able to set their own writing reminders so would register ghost user reminders settings page that might look like image https cloud github com assets 120485 1879852 0f1c1660 7950 11e3 8ab0 1a5f829180c8 png >>>apps ember
bug esc key is not dismissing tag suggestions issue summary on the editor when typing tags list of suggestions pops up if there are any tags with similar name to the one you are typing this list should be dismissed with the esc key the code to do this exists but it doesn seem to be working steps to reproduce ensure you already have some tags by creating post with tag for example testing open the editor and start typing the name of tag which already exists test notice the suggestions list that pops up above the tag ui press the esc key note that the suggestions list has not disappeared it is expected that the esc key close the suggestions list however that is not currently the case technical details ghost version master latest commit fecb392 client os mac os 10 server os localhost node version 10 18 browser chrome 31 1650 63>>>bug
scrollbars https www facebook com messages hover around the different parts of the page and scroll this is how scrollbars in ghost should work there some example very basic example implementations of this here http rocha la jquery slimscroll nb do not want to use this just reference this is not simple issue we ve already had mess around with scrollbars in the past and totally failed there are many tricky cross browser and mobile implications which need to be tested the facebook implementation is the best ve ever seen by significant margin it does osx like interactions but with some additional features which make it more suited to browsers and other platforms very like would love to see pr for this with an initial prototype implementation and some thoughts suggestions >>>ember feature
abstract the allowed file types out of controller logic hey guys want to start small with contributions to ghost when reading through the controllers core controllers admin js found that the allowed file types were hard coded into the controller logic it easy and like to have go at extracting the allowed file types into the config what do you think where would an appropriate place be to abstract the allowed file types and function javascript if type image jpeg type image png type image gif type image svg xml ext jpg ext jpeg ext png ext gif ext svg ext svgz 	return res send 415 unsupported media type >>>server
cleanup reserved words in generateslug along with 1820 and 1833 we should also clean up the list of reserved words which are not permitted to be in post slug so that this is also constant stored sanely somewhere it should also be implemented in such way that it will be easy to make this list extensible by both configuration settings in ghost and also by apps it should be possible to make it so that some words can be changed removed like `tag` which might be translated either in ghost or in an app and some words like `ghost` can never ever be removed or modified from the list >>>server
ghost doesn stop me from making post named rss similar to 1879 made post named rss this looked fine on the blog index page screen shot 2014 01 07 at 12 08 23 pm https cloud github com assets 1204698 1862306 50742792 77cf 11e3 9ebc a018daa44603 png but trying to visit the post by clicking on the title took me to the rss feed unsurprisingly instead of to my post screen shot 2014 01 07 at 12 08 28 pm https cloud github com assets 1204698 1862309 620c557e 77cf 11e3 8643 a24805b25cff png ghost should probably prevent people from doing stupid things and using reserved urls additionally checking the static page check box for this post results in an unknown error screen shot 2014 01 07 at 12 12 13 pm https cloud github com assets 1204698 1862336 c0ba2dda 77cf 11e3 95c6 e835ec85ec67 png >>>bug
changing post url to ghost results in unknown error tried to make post named ghost which defaulted to url named ghost post so manually changed the url to ghost using the gear icon this resulted in the error screen shot 2014 01 07 at 12 03 23 pm https cloud github com assets 1204698 1862256 85c55db8 77ce 11e3 9504 66cdeb719b8a png now understandably doing this is bad thing trade but there are two issues with this ghost logged me out after doing this that weird it let me do this ghost should prevent users from naming post with reserved name like ghost >>>bug qa
static page checkbox is misaligned under firefox from jgillich on 1867 the only thing noticed is that the static page checkbox is misaligned under firefox unbenannt https cloud github com assets 347965 1858841 a24b2806 7796 11e3 80cb da74700a2f48 jpg think saw that before probably something that should be fixed before the release will do some more testing later windows professional x64 sqlite node 10 13 firefox 26>>>bug
version pre can start ghost after upgrade running ghost on digital ocean droplet getting this error after upgrading to pre version error cannot use in operator to search for browse in undefined typeerror cannot use in operator to search for browse in undefined at var www ghost node modules underscore underscore js 834 18 at array foreach native at each foreach var www ghost node modules underscore underscore js 79 11 at function pick var www ghost node modules underscore underscore js 833 at object var www ghost core server plugins proxy js 17 18 at module compile module js 456 26 at object module extensions js module js 474 10 at module load module js 356 32 at function module load module js 312 12 at module require module js 364 17 thanks >>>docs
minor bug command line error with fresh install ghost pre get the following error when testing ghost pre with fresh installation it is caused by update check trying to read mail configuration that is not available when ghost was started before editing config js system osx 10 chrome 31 1650 63>>>bug
deleting post hangs the blue loading bar summary of issue when you delete post the loading bar never receives finished event so hangs indefinitely deleting https cloud github com assets 367517 1858990 410d23ec 779a 11e3 856a 519d8cc58818 gif steps to reproduce delete the post from the dropdown watch the blue bar load until you get bored or need to pee observed result some blue bar goodness that never ends desired result the blue bar finishes once the delete has successfully happened additional information browser all version pre node version v0 10 21 os mac os 10 >>>bug
feature request export posts to the server filesystem as individual posts really like editing with ghost and run now one blog in production with it would like to enable the possibility to use ghost as an live editing environment and publish content into static blog site on the server using for example jekyll this would allow building sites and environments that scale extremely well and are very secure >>>apps
how to setup ssl full documentation on how to setup and configure ghost with ssl>>>docs
import should be done via ajax instead of form submit in some senses this is duplicate of 1654 however this issue refers only to changing how import is done so that import and upload can both be moved after the csrf middleware the import tool should be changed to work in much the same way as the reset tool such that the form is submitted using ajax and csrf is set using headers rather than form field this means that the field does not need to be parsed out in order for csrf to work and the csrf middleware can be moved before the upload and import routes ghost busboy should then be set as part of the middleware stack for the specific routes in routes admin and routes api rather than being set in middleware index so that it is explicit and clear that these routes require auth and csrf protection >>>bug media
ghost busboy middleware should not use user provided filename ghost busboy is using the user provided filename when storing the temporary file without any sort of checks this poses security issue especially when ghost is run as root or very privileged user as it is possible to trick ghost into overwriting files it has write access to this is an issue with unreleased code and must be fixed before can be released expected behaviour ghost busboy should use random filename probably hash of the user provided name and timestamp or some such big thanks to roly for raising this via our security mailing list >>>bug media
improve test coverage on core helpers index js blurb on test coverage if you run `grunt test coverage` you should get nice coverage html file appear in the ghost root this file takes into account the unit and integration tests but unfortunately none of the functional tests just yet the test coverage report is not used in travis and am not about to set required coverage level because do not believe that test coverage is black white issue some aspects of our system benefit more from testing than others test coverage for core helpers index js our helpers make up the theme api and therefore we should be absolutely certain what those functions do under all kinds of circumstances the test coverage on this file should be 100 and then some it currently at 68 would much appreciate any additional testing on this area of the code base although recommend avoiding the url helper on account of 1817 >>>tests themes
signup ui permits race condition on raspberry pi bcrypt is slow as dolla dolla bill yall sloth meme https cloud github com assets 1196299 1844511 46347b4a 7533 11e3 8af4 d0fa97e5ccdb jpg this of course means that when signing up that might take while however there is no indicator that anything is happening so one might click the sign up button bunch of times before ghost ever gets back to you if you do that ghost will flip table in slow motion much like l5o qkzsaku0yq36vaqymq2 https cloud github com assets 1196299 1844514 c706c714 7533 11e3 87e6 e1d7849f2646 gif resulting in screenshot 2014 01 04 11 22 26 https cloud github com assets 1196299 1844515 d0dcbcc6 7533 11e3 8401 caeefb8e0101 png the problem is that ghost receives the data from the frontend and starts working on it but it takes time to actually finish hashing the password during this time the front end is not updated thus leaving the end user clueless about whether anything is happening if the user then clicks the signup button ghost receives subsequent requests to create new users because the first request is not finished yet the test whether there already user present in the system will fail so ghost will process the request as if there wasn trying to add new user meanwhile the first request finishes adds the user and the second request is halfway through that will mean that the second request got past ghost check and encounters nasty database constraints resulting in epic failure the first user is still in though and as far as can tell it not broken but unpleasant >>>bug
default 404 error page is not styled when forceadminssl is true because of 1836 this is more involved to reproduce locally either run behind proper reverse proxy that will set forwarded proto header or on windows can use fiddler2 http fiddler2 com debugging proxy and in filters tab force forwarded proto header to be added to all requests set it to http to simulate http connection via reverse proxy reproduction steps setup as explained above set `forceadminssl true` in `config js` for development environment run ghost `node index js` clear browser cache ctrl f5 navigate to `http localhost 2368 blah` expected 404 error page with default admin styling doh ghost image actual unstyled raw 404 error page css fails to load the issue is in `core server middleware index js 221 225` the line appears after `expressserver use checkssl the checkssl middleware will try to redirect any request to ghost resources to https connection but in this case some ghost resources are admin theme static files from the client assets folder the two lines should be swapped check for static resource should occur before attempted ssl redirect that way static admin theme resources can be served properly regardless of whether this is http or https connection >>>bug
forceadminssl does not work when not behind reverse proxy reproduction steps set `forceadminssl true` in `config js` for development environment run ghost locally `node index js` navigate to http localhost 2368 ghost expected redirect to https actual no redirect the issue is in `core server middleware index js 179` code assumes secure https connection when forwarded proto header is not set that wrong assumption >>>bug
race condition when creating initial user could allow multiple users to be created in core server models user js in the add function the database is asynchronously queried for the number of users in the database and if one exists then the user cannot create new user it is possible multiple for connections to query the database for the number of users before one is created in that case multiple users will be created >>>bug
non existent apps cause an unhandled rejection dies attempting to activate non existent app causes an unhandled rejection error to be thrown and ghost then dies to reproduce edit the database directly set settings activeplugins to something like my non existent plugin ensure no folder with that name exists inside of content plugins an unhandled promise rejection is thrown short version long version https gist github com erisds 3c243e19e03889b136c5 expected behaviour helpful error message should be logged and then ghost should carry on as usual >>>apps bug
error handler shouldn bomb out if error is undefined if the error handler gets sent an undefined error it should output default error not die horribly this means guarding error message rather than just attempting to spit it out example try calling errorhandler logerror with undefined output the error handler dies yuk expected output the error handler should log generic error like something went wrong this bug should be fixed with tests does it also occur if the error is null >>>bug
base64 images not being displayed for example renders placeholder screen shot 2014 01 03 at 17 12 am https cloud github com assets 1175888 1837703 b5a928e0 743e 11e3 8113 f40791251f6c png >>>apps
cache invalidation headers are not set properly for date permalinks whenever post is updated we send an `x cache invalidation` header this does not send the correct url if date permalinks are selected current header example `x cache invalidate page rss rss january post should look like `x cache invalidate page rss rss 2014 01 01 january post >>>bug
date permalinks should use the publish date not created date currently the dated permalinks use the post created date not the post published date in the url as you can change the publish date of post it would make more sense for the permalink to use the publish date rather than the created date >>>bug
pg build failing pg build casper tests have been failing since merging 1793 https travis ci org tryghost ghost jobs 16201383 pg build route tests fail the same 1805 it like the welcome post doesn get inserted perhaps some problem with inserting fixtures >>>bug
build failure date permalinks don enforce format the functional tests are currently failing because we re now in january and dated permalinks are lapsing to 2014 slug` instead of 2014 01 01 slug` either works for fetching post as does 2014 201 01 slug` we need to be little stricter and enforce the number format effectively we ve got millenium bug astonished >>>bug
corehelpers content doesn truncate to zero words issue summary content words helper returns full post content instead of stripping all words steps to reproduce start ghost and look at post everything should look normal edit content themes casper post hbs on line 30 change content to content words and save reload the post you were looking at nothing will change though it should show no content edit the file again and change the helper to content words reload the post again and it will be truncated to words all numeric values except for zero work fine technical details it looks like this was introduced in 5c1091af10a6c605faf0bdabf9f38fa4c13150e6 part of the fix is in ghost and part is in the downsize library ghost version master latest commit f3a807365377f180ff5713b4faead2f6e286eddd client os mac os 10 server os mac os 10 node version 10 12 browser version chrome or safari latest>>>bug
parse typographically correct quotation marks formerly 534 let do quotation marks right http daringfireball net projects smartypants putting this on punt if it looks like this isn going to be possible with the current editor implementation>>>editor
new first run install process in we want to have slightly more comprehensive and sexy first run process for users it little more verbose helpful and includes an option to set blog title right off the bat there are two main parts to this issue the front end this is the new design for the front end for the first run process it is similar to ghost signup but different it should probably live on ghost setup this should re use as many of our standard form and button style components as possible only over riding where required this needs to be fully responsive again leveraging existing patterns first run https cloud github com assets 120485 1821507 9a5e1af8 7134 11e3 9767 ae2a431c5374 png notes wrapper max width 500px wrapper padding 30px title 6rem subtitle 6rem labels 4rem input descriptions 2rem light text lightgrey dark text midgrey the back end in addition to the new ui we also want to do couple of automated nice sexy things behind the scenes it would be great if we could try to handle the setting of blog url in nicer way ideally check if it has been set to something other than my ghost blog com in config js if so do nothing if not write the blog url in config js with the base url from wherever example com ghost setup is run set an automatically generated blog description of thoughts stories and ideas by user full name >>>installation users
bold text with underscores isn properly rendered at the beginning of line issue summary when writing post ghost doesn properly output bold text at the beginning of line when using underscores screen shot 2013 12 29 at 11 17 pm https cloud github com assets 965436 1820610 500485f0 70f8 11e3 93ca 152ae0460add png the same issue occurs when the post is published steps to reproduce create new post type test technical details ghost version master 64cf2b1b24642d9814e851a67ec610c73b526bc3 client os mac os 10 server os mac os 10 node version 10 24 browser chrome 31 1650 63>>>bug editor
revisit config paths update and config theme update the paths and theme modules are really nicely separated out and it great to be able to include them individually but the update methods are little awkward especially when working with subdirectories the subdir path can be pre assigned to any variables as it gets reloaded part way through start up config url shouldn change whilst the app is running therefore config paths update shouldn really be needed ideally config theme update shouldn require being passed the settings object but circular references are to be avoided it would be great to revisit these again in future to see how they could be improved upon >>>server
ghost fails to install on clean ubuntu 13 10 x64 server ve created new droplet on digital ocean for testing and ran the following commands starting from fresh ubuntu install `npm install` fails with strangely do not have these issues on os it seems to be wanting `grunt 0rc3 but what my system has is `grunt 2` can provide more info or even fresh digital ocean droplet for testing all need is public ssh key to give someone access not quite sure what requiring `grunt 0rc3 still looking >>>bug
hello there looks like something went wrong with your javascript summary of issue on first load the following text is displayed in lower left hand corner of ghost signin hello there looks like something went wrong with your javascript steps to reproduce go to ghost signin see message in lower left hand corner reloading the page the message does not appear reset browser in firefox reset everything go to ghost signin see message in lower left hand corner observed result weird text in lower left hand corner https cloud github com assets 4643742 1818585 6194b62a 7010 11e3 8222 1b0446fd955f gif additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number master latest commit 64cf2b1b24642d9814e851a67ec610c73b526bc3 browser chrome 31 1650 63>>>bug
if ghost user does not have avatar in gravator com 404 image displayed in ghost interface summary of issue if ghost user does not have avatar in gravator com 404 image displayed in ghost interface steps to reproduce install new ghost instance create user for ghost with email address that is not real observed result in ghost interface in the upper right hand corner where the avatar is displayed browser will display 404 image screen shot 2013 12 28 at 21 02 pm https cloud github com assets 4643742 1818488 9cb3e1e4 7007 11e3 81a3 8a2fc9ab0c7e jpg screen shot 2013 12 28 at 16 13 pm https cloud github com assets 4643742 1818455 715b2b8a 7005 11e3 8d1a 4fddbf02426f jpg desired result if the avatar url results in 404 http www gravatar com avatar 9da1c4e4827b0e980af5fb038a7bfb6f 404 use the default avator http www gravatar com avatar 9da1c4e4827b0e980af5fb038a7bfb6f or default ghost avatar additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number master latest commit 64cf2b1b24642d9814e851a67ec610c73b526bc3 browser chrome 31 1650 63>>>bug
turning on dated permalinks breaks links in rss feed summary of issue turning on dated permalinks breaks links in rss feed steps to reproduce in general settings turn on dated permalinks restart ghost view the links in the rss feed observed result when dated permalinks are turned on rss feed uses non dated permalinks and the link in rss feed results in 404 screen shot 2013 12 28 at 06 50 pm https cloud github com assets 4643742 1818445 9936ec8a 7004 11e3 9b21 d6967d4d5713 jpg screen shot 2013 12 28 at 06 53 pm https cloud github com assets 4643742 1818446 9937aa62 7004 11e3 8e4e 9df7cc906aaa jpg additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number master latest commit 64cf2b1b24642d9814e851a67ec610c73b526bc3 browser chrome 31 1650 63>>>bug
opening rss feed with no user created results in 404 user not found summary of issue before creating ghost user if you click on the rss link you will get 404 user not found error steps to reproduce install new instance of ghost do not create user on the ghost home page click on the rss link at the bottom observed result nasty 404 error desired result if no users exsist use ghost as author disable rss feed until user is created additional information client os mac os 10 server os amazon linux ami 2013 09 node version 10 24 ghost build number latest commit 64cf2b1b24642d9814e851a67ec610c73b526bc3 browser chrome 31 1650 63>>>bug
minor bug arrow not removed on tag input field when insert tag that does not exist yet into the tag input field little arrow but no selection box is shown steps to reproduce log in and start new post add non existent tag ghost admin https cloud github com assets 539213 1818306 ebee3114 6ff4 11e3 83fc 3f52f7ad7d08 png system osx 10 chrome 31 1650 63>>>bug
add functional unit tests for routing add unit tests to check that routing correctly works this would catch bugs such as 1753 and 1757 >>>tests
images are storing subdirectories in their paths if using ghost in subdirectory uploaded images are getting the subdirectory being returned as part of their path expected behaviour ghost should consider paths of images and other resources as starting after the subdirectory not including the subdirectory in the path the subdirectory should be added removed handled separately to reproduce change your url in config js to contain subdirectory start ghost visit the editor and upload an image note that the path for the image now starts with your subdirectory instead of starting at content images` which is the image mount path this is on the latest master 25f3df2>>>media
live theme switching doesn work on subdirectory when on subdirectory live reloading theme doesn work to reproduce change your url in config js to contain subdirectory start ghost visit the frontend and admin and see that all is working change theme go to the frontend of the blog see that it doesn work visit the server console see the error message error message short version `typeerror cannot set property handle of undefined` long version https gist github com erisds 7a569d29542cda638840 this is on the latest master 25f3df2 note ve also seen error messages related to partials will track these down and raise them as well >>>bug
new install confirmation email subject your new ghost blog body hello good news you ve successfully created brand new ghost blog over on blog url from config js you can log in to your admin account with the following details email address your email example com password the password you chose when you signed up keep this email somewhere safe for future reference and have fun xoxo team ghost https ghost org>>>installation
url inconsistencies in helpers res locals there are number of inconsistencies about how urls are generated built in the server side helpers and elsewhere url uses some fancy code which should be much more exhaustive and usable by other parts of the codebase ghost head generates the wrong route for canonical should be using the same code as url and uses two different url generation techniques one for relative and one for absolute pageurl doesn provide the subdir there are no unit tests yet to ensure the helpers cope with subdirs extensive use is made of this ghostroot and res locals also defines path variable this can probably be cleaned up renamed note raising this half way through fixing these issues it is an extension to 1754 >>>bug themes
when date permalink is ticked links to post do not work just changed my permalink structure to include the date but looks like it not working links in the homepage have the right formate yyyy mm dd title but when clicking on them get 404 page this happens both with posts published before and after the change in the permalink format if you want to test http codeclimber ghost azurewebsites net >>>bug
putting ghost under ghost subdirectory doesn work in my config file did this broke the website screen shot 2013 12 25 at 11 45 31 am https cloud github com assets 1204698 1808977 d65ef7a0 6d94 11e3 9c70 7173928cfd2c png this issue can be taken one of two ways if ghost wants to support users using subdirectory named `ghost` then this issue needs to be fixed if ghost doesn want to support users using subdirectory named `ghost` then this should be explicitly documented>>>bug
subdirectory is not respected the following files use ghost with no respect to the subdirectory breaking key portions of the website client tpl hbs tpl js 89 client tpl hbs tpl js 342 client tpl login hbs 10 client tpl preview hbs 56 client views settings js 386 `url ghost changepw server controllers admin js 289 `section req url replace ghost settings ig server middleware middleware js 30 `var reqpath req path replace ghost gi places that use ghost that might be right but not 100 sure so including them server data default settings json 56 notcontains ghost server routes admin js 27 `server get ghost login function redirect req res server routes admin js 32 `server get ghost signout admin logout server routes admin js 33 `server get ghost signin middleware redirecttosignup middleware redirecttodashboard admin login server routes admin js 34 `server get ghost signup middleware redirecttodashboard admin signup server routes admin js 35 `server get ghost forgotten middleware redirecttodashboard admin forgotten server routes admin js 36 `server post ghost forgotten admin generateresettoken server routes admin js 37 `server get ghost reset token admin reset server routes admin js 38 `server post ghost reset token admin resetpassword server routes admin js 39 `server post ghost signin admin auth server routes admin js 40 `server post ghost signup admin doregister server routes admin js 41 `server post ghost changepw middleware auth admin changepw server routes admin js 42 `server get ghost editor id middleware auth admin editor server routes admin js 43 `server get ghost editor middleware auth admin editor server routes admin js 44 `server get ghost content middleware auth admin content server routes admin js 45 `server get ghost settings middleware auth admin settings server routes admin js 46 `server get ghost debug middleware auth admin debug index server routes admin js 49 `server post ghost upload middleware auth admin uploader server routes admin js 60 `server get ghost middleware redirecttosignup middleware auth admin index server routes api js `server get ghost api v0 posts middleware authapi middleware disablecachedresult api requesthandler api posts browse server routes api js `server post ghost api v0 posts middleware authapi middleware disablecachedresult api requesthandler api posts add server routes api js 10 `server get ghost api v0 posts id middleware authapi middleware disablecachedresult api requesthandler api posts read server routes api js 11 `server put ghost api v0 posts id middleware authapi middleware disablecachedresult api requesthandler api posts edit server routes api js 12 `server del ghost api v0 posts id middleware authapi middleware disablecachedresult api requesthandler api posts destroy server routes api js 14 `server get ghost api v0 settings middleware authapi middleware disablecachedresult api requesthandler api settings browse server routes api js 15 `server get ghost api v0 settings key middleware authapi middleware disablecachedresult api requesthandler api settings read server routes api js 16 `server put ghost api v0 settings middleware authapi middleware disablecachedresult api requesthandler api settings edit server routes api js 18 `server get ghost api v0 users middleware authapi middleware disablecachedresult api requesthandler api users browse server routes api js 19 `server get ghost api v0 users id middleware authapi middleware disablecachedresult api requesthandler api users read server routes api js 20 `server put ghost api v0 users id middleware authapi middleware disablecachedresult api requesthandler api users edit server routes api js 22 `server get ghost api v0 tags middleware authapi middleware disablecachedresult api requesthandler api tags all server routes api js 24 `server del ghost api v0 notifications id middleware authapi middleware disablecachedresult api requesthandler api notifications destroy server routes api js 25 `server post ghost api v0 notifications middleware authapi middleware disablecachedresult api requesthandler api notifications add server routes api js 27 `server get ghost api v0 db middleware auth api db export server routes api js 28 `server post ghost api v0 db middleware auth api db import test functional admin content test js 27 `test asserturlmatch ghost content ghost doesn require login this time test functional admin editor test js `test asserturlmatch ghost editor ghost doesn require login this time test functional admin flow test js `test asserturlmatch ghost editor ghost doesn require login this time test functional admin flow test js 30 `test asserturlmatch ghost content ghost successfully loaded the content page test functional admin login test js `test asserturlmatch ghost sign we got redirected to signin or signup page test functional admin login test js 25 `test asserturlmatch ghost if we re not already registered we should be logged in test functional admin login test js 30 `test asserturlmatch ghost signin we got redirected to signin page test functional admin login test js 37 `test asserturlmatch ghost signin we should be presented with the signin page test functional admin login test js 44 `test asserturlmatch ghost signin should be redirected to signin test functional admin login test js 116 `casper waitforresource ghost test functional admin login test js 117 `test asserturlmatch ghost we got redirected to the ghost page test functional admin settings test js `test asserturlmatch ghost settings general ghost doesn require login this time test functional admin settings test js 117 `test asserturlmatch ghost settings user ghost doesn require login this time test functional base js 107 `casper waitforresource ghost sign test functional base js 195 `casper waitforresource ghost test functional base js 201 `casper waitforresource ghost sign test unit middleware spec js 35 `assert res redirect calledwithmatch ghost signin test unit middleware spec js 41 `it should redirect to signin path with redirect paramater stripped of ghost function done test unit middleware spec js 44 `req path ghost path test unit middleware spec js 46 `assert res redirect calledwithmatch ghost signin encodeuricomponent path test unit middleware spec js 54 `req path ghost path test unit middleware spec js 56 `assert res redirect calledwithmatch ghost signin encodeuricomponent path test unit middleware spec js 64 `assert res redirect calledwithmatch ghost signin encodeuricomponent path test unit middleware spec js 131 `assert res redirect calledwithmatch ghost test utils api js `apiroutebase ghost api v0 `>>>bug
static pages shouldn be prefixed by date when checking dated permalinks only posts should have dates this will allow for about style links for pages and 2013 12 25 mas` style links for posts >>>bug
short cover image hides profile page header have short 50px tall image as my author cover which causes the header on the profile edit page to shift upwards too much this causes the user name input box and the change cover button to be out of reach screenshot here https cloud github com assets 3165757 1807803 4d3937a2 6d16 11e3 9b77 8a8235c03940 png >>>bug
blog url is missing blog url is not set in the theme config>>>bug
can load custom partial hello ve read couple of posts where there seems to be problem loading partials but none of the reasons specified seem to apply to me running node v0 10 ghost ve checked permissions don symlink to my custom theme or any file checked that the folder structure for partials is like this my theme partials my partial hbs tripple checked spelling of files and folders use this code to load the partial in `index hbs` socialmedia get this error >>>bug
translations ko correct type and add translation of ko there type in the documentation page the label in the combo at the right top corner of the page should be add translation for korean >>>docs
add tests for import tool per discussion from 1699>>>importer tests
reusable images instead of uploading new image each time should also be able to pick from previously uploaded images and reuse an image instead of uploading duplicate copy know you can find the old image and copy and paste the image url but that makes it too hard to use >>>apps
enhancement resize images to reasonable size when uploaded it would be great if images would automatically be resized to reasonable size this would also greatly increase page load time with lots of large images >>>media
using punctuation for subdirectory causes errors subdirectory support works so long as use normal characters however the subdirectories and foo bar cause issues test config js console accessing `http 127 2368 works fine but accessing `http 127 2368 ghost results in the above errors and the following screen screen shot 2013 12 21 at 37 01 pm https cloud github com assets 1204698 1796762 6bad5eba 6a88 11e3 839f 49cbc8c52b50 png test foo bar config js console this time both `http 127 2368 foo bar and `http 127 2368 foo bar ghost signup work fine but when replace the with `z` expecting 404 ghost crashes with 500 response screen shot 2013 12 21 at 43 10 pm https cloud github com assets 1204698 1796765 fae799e2 6a88 11e3 99dd 44f024e73084 png my setup running ghost master os 10 firefox 25 26 chrome 31 1650 63 node js v0 10 24 my thoughts this seems to perhaps be an issue with non alphanumeric characters being handled improperly perhaps in regex or perhaps in some other way >>>bug
content disappearing from the content screen it has been reported few times on the forums https ghost org forum using ghost 3609 posts on content gone missing that posts go missing on the content screen after publishing post inspecting the databases has shown that the post is marked as having published status but the `published at` and `published by` fields are set to null this means that the underlying issue is probably to do with the mis timing of the `saving` and `creating` functions in bookshelf believe that this is largely resolved in the later versions of bookshelf such that the events happen one after the other however in the case that the status is published but the date is null this causes javascript error on the content screen including showing the no posts yet message after you add new one meaning it almost impossible to get out of this weird situation we need to at the very least fix the js error >>>bug
unhandled promise rejection error when sending password reset when trying to send password reset email an unhandled promise rejection error is thrown if mail is not set steps to reproduce ensure that there is no mail config in config js attempt to reset password at ghost forgotten see error in console >>>bug
featured posts left hand column on content screen does not update when marking post as featured the left hand column does not update to show the featured star the left hand column in general does not listen for updates to the model >>>bug
provide warnings for insecure content in the editor when the admin is in secure mode https uris for images scripts iframes which are not http will cause insecure content warnings in chrome you get this in the console the page at https my ghost blog com ghost editor 66 was loaded over https but displayed insecure content from http someurl com someimage png this content should also be loaded over https and this in the url bar http puu sh b4ppr png making it look like the site is insecure however it is only the user provided content causing this further problem is that ghost can be setup so that the frontend of the blog is also served over https and this is growing trend in which case these browser warnings would be persisted to the frontend and shown to all of the blog readers in the former case where the warning only appears to the author the problem is pretty minor however think in the latter case there is more of reason for us to take responsibility to help authors not include insecure content in their blog content the suggested solution was to highlight insecure urls in the editor in some way to indicate to the author that the uri is insecure the idea was to apply an orange for warning background or border to the resource in question in the editor or preview and to provide an explanation when the user hovered over it or to have an icon appear that could be interacted with in some other way to get more information >>>editor
featured post star doesn appear for drafts the featured post star in the content management system screen is not appearing for drafts featured star http cl ly items 1x2i0c0q0m0k0m2a1e1r image 202013 12 18 2014 3a52 3a50 png also it appears to be misaligned possibly didn get updated when the admin font did >>>bug
travis test failures know these are annoying and almost irreproducible but wanted to log this here it another timing error think which causes test failure on the first set of travis tests ve seen this happen once or twice recently nothing too bad https gist github com erisds 7f36ee3b274325b9a0aa will probably keep this issue around for logging randoms when see them because have bad habit of just restarting without logging what it was >>>bug tests
investigate reverse sort order on import note that this issue is an investigation only unless the bug is very easily resolved in some cases when importing posts they end up in the wrong order this is because the updated at is set when post is imported but the list of posts is not getting processed oldest first so it ends up out of whack think it only happens on mysql but may be wrong >>>bug data
image upload via ios android displayed sideways from the forum https ghost org forum using ghost 3213 images showing up sideways it is potentially linked with http stackoverflow com questions 9353629 images turning sideways upside down after being uploaded via phonegap ios current known affected platforms ios safari chrome android galaxy s4>>>media
unable to find setting dbhash to reproduce clean db sign up with an account immediately log out go to password recovery try to recover your password behold the glorious error message that is that screencap included for clearer instructions screencap unabletoreadsetting https cloud github com assets 1196299 1751177 0dee189e 65d0 11e3 98f0 389f170b3453 gif env mac osx 10 node 10 22 npm 14 chrome 31 1650 63>>>bug
importer don override users or theme or log out the original ghost import tool on ghost debug` was intended as backup and restoration tool purely for ghost as we are making this useful as an import tool for importing content from other blogs and as more people are making use of it we need to get rid of the functionality that overrides user credentials and logs them out instead if matching email address is found for user that is to be imported the feature can update any also matching name bio url and location fields but should not override the email address as that is what is matched on password status or date fields like last login the import should also not cause logout equally activetheme should not get overwritten if the new theme isn present on the new blog then the blog will fail to start >>>apps installation
uploader ui niggles when filestorage is set to false in config js the uploader should only ever show the url mode not dropzone mode in this case the icon to toggle back to dropzone mode should not show iconthing http cl ly items 3x441o1l2z3u3v2w3g35 image 202013 12 14 2014 3a59 3a07 png also the icon to toggle does not have the right cursor and also has very small click area meaning you often end up with horrible blue chrome highlight everywhere uploaderhighlighted http cl ly items 3i430u3z2h0t2g1u0z0k image 202013 12 14 2015 3a06 3a29 png >>>bug media
image uploads default to url as though filestorage is set to false this seems to have been caused by 1606 when you go to the editor and try to insert an image the image uploader shows the url box instead of the dropzone no dropzone http cl ly items 0t2h3q1x423q2n411w1o image 202013 12 14 2014 3a59 3a47 png this is behaving as though filestorage is set to false in the `config js` file despite the fact that it is not not sure why the changes to express hbs and our handlebars management is causing this but have tested various commits and it seems to be this one causing it >>>bug media
allow markdown tables feature request for creation of tables in markdown without having to use markup noticed this was in gfm and multimarkdown but didn see this specifically in the wiki for haunted markdown so wanted to make sure it didn get overlooked >>>editor
relative paths in css issue when relative from domain root core client assets sass layouts users scss` has reference to static image relative to root of the domain `background image url shared img user image png however if the site is running in subfolder config paths webroot then this reference will be wrong as shared will become subfolder shared given that relative paths given in css are relative to the css file not the page then the css can define relative paths therefore `background image url shared img user image png will resolve correctly as the compiled version of the sass file is ghost css screen css` all images in sass file will need to be checked and updated >>>bug
image uploads provide save button before they are ready it very difficult to tell this when developing locally without using something like charles proxy but it seems image uploads provide the save button before they are actually ready to be saved on the settings screen this can cause the image to be uploaded but the setting to be blank >>>bug media
default user image causing 404 on the ghost admin on latest master the default user image does not appear opening the console shows 404 for assets shared img user image png you can see the image is missing user image http cl ly items 450b1z0h3e3u2b2i3s3r image 202013 12 12 2012 3a52 3a26 png steps to repro log into ghost admin with fresh user account which does not yet have custom profile image think this is something to do with the asset path think it is meant to be ghost assets `>>>bug
improvement refactor models have come across the issue that the post model has problem with handling `saving` and `creating` events since the two methods are called simultaneously and rely partly on each other behavior have seen so far slug fails validation since it is not set when validation is done prerequisite for 1401 slug generation fails when multiple posts are imported with the same title>>>data
improvement remove res redirect from api calls calls to the public api `ghost api should not call `res redirect return value should indicate if the operation was successful or not and the client side javascript is responsible to redirect the user to the appropriate user interface this would allow third party applications to use the api methods with custom user interface >>>api
ghost foot helper uses config url causing broken script src using the `config example js` as my `config js` has my config development url set to `http my ghost blog com` when `corehelpers ghost foot` creates the script tag it outputs when in dev mode an obviously non existent path thoughts on how to fix >>>bug
settings not passed properly to frontend in the latest `master` changing setting of the blog has no effect on the frontend steps to reproduce login into ghost go to settings general change the title go to the frontend title has not changed >>>bug
static pages don load unhandled promise error thrown issue summary when trying to visit the url for published static page with or without trailing slash the page spins and eventually timesout steps to reproduce create new static page and publish it try to visit the page via the url server console outputs the following error message technical details ghost version master latest commit 365b4ca50ca34e807f9329b966e3717f5e61db9a node version 10 18>>>bug
add and remove column support for migration add the ability to `add column` and `delete column` if column is added to deleted from `schema js` the database should be updated accordingly >>>data server
clean up helpers after 1606 is merged and before is released we need to clean up the helpers to ensure that themes only have access to the helpers they should have json needs to die has tag should be made unavailable until 1562 is ready helpers for ghost admin should only be available to ghost admin>>>themes
user website format when user enters their website in their profile it is not clear whether to include the http portion this causes an issue when used in hbs files unless used with some processing to add the http component perhaps placeholder is needed or helper to add it >>>ember server
automatic email linking breaks custom mailto links as reported in the forums https ghost org forum using ghost 2847 not sure if this is bug when you enter mailto link in the editor this is the resulting html this seems to be caused by our automatic linking of email addresses the same applies to links without `subject` parameter but it good example why we should support this update this also happens for images as per 2131>>>editor
bug headings are being highlighted for certain keywords reported in the forum https ghost org forum bugs suggestions 3261 greyed out heading affected keywords are signup forgotten reset since headings in the editor preview are automatically annotated with an `id` they conflict with the css stylings of the signup form update by erisds `notifications` is another one we need to make sure all ids in sass are scoped or removed>>>bug
password reset link in email broken if url has trailing slash in `config js` if you specify the url as `http mydomain com then the reset link will have double in it see `http my ghost blog com ghost reset mtm4njawmze1njkzoxxnywjvckbqyxzvcnn6a3kuy28udwt8ue1ceettnkozthnkofdzdm9mbwjprtn4rvdreudim3lxsthprfjeclnnaz0 `http localhost 2368 ghost reset mtm4njawmjk4oti3nxxnywjvckbqyxzvcnn6a3kuy28udwt8oezqdfjstgkvuys1t2plehnjunirvfh6meoyognmmctkeu1gthlkwjfyyz0 you get the idea one solution is not to set trailing slash in `config js` another is to remove that >>>bug
improve unicode character support in markdown showdown does not generate ids for non english characters this can result in empty ids or ids which contain just the english characters if there is mix as part of our work to improve support for foreign languages we should ensure that sensible ids are generated for non english characters probably using unidecode >>>data editor i18n
weird behavior when pressing delete in the preview pressing delete while some text is marked deletes both the title and the preview content it seems to only occur after saving draft for the first time was not able to reproduce it in firefox and epiphany webkit only chrome seems to be affected to reproduce taken from here https ghost org forum bugs suggestions 2957 saved drafts disappearing create new post and save draft click in right pane imagine you thought you were going to edit there so grab some text and hit delete everything in right pane disappears title is gone markdown remains in left pane refresh browser now all markdown is gone if you exit and log back in your post will be empty halfdan also made gif http imgur com oea784e gif >>>bug
theme switching is broken probably as result of some of the refactoring work but live switching themes no longer works >>>bug themes
theme api feature post has tags niedbalski has raised the need for us to add theme helper for checking if posts have particular tag or set of tags associated with it so far we have the following use cases where set of tags could be one or more tags check if the post has any one of given set of tags check if the post does not have any one of given set of tags check if the post has all of given set of tags check if the post does not have all of given set of tags the first question is are there any use cases we have missed with relation to whether or not post has tag associated with it the next question is what should this helper look like in particular is it one or many what should it they be called how would you expect to pass in the set of tags and how would you differentiate between having and not having and checking for any tag or all tags in the set here an example of what it might look like where the name of the tag is `has tags` and this works for one or many the set of tags are my tag my other tag setting the option `any` to true means that the tag will return true or rather execute the first block if the post has any of the given tags rather than testing for all of them when making suggestions please keep in mind what is and is not possible with handlebars helpers >>>themes
enhancement invalidate cache header only for published posts with the current implementation `x cache invalidate` headers are sent with every `post` `put` `delete` response from ghost api posts` only posts with status published should invalidate the cache tricky part is that change from published to draft and from draft to published needs to be detected to implement working solution >>>api
update the default fixture to make it clearer after having few users mis read mis understand the default fixture think it might need some tweaking the following line is what confuses most people as they are reading from the blog and not the editor they find themselves looking for left hand panel which doesn exist in the left hand panel of ghost you simply write as you normally would here are my suggestions feel free to add your own to this list alter the perspective of the post to the user reading from the blog not the content page instruct users on how to access the admin dashboard ghost if the perspective isn changed from here explain how to get to the new post page or how to edit the post these are only suggestions think it would be beneficial to discuss some alterations to get wider view >>>docs
notifications really long error messages cannot be dismissed when importing data it is possible to get really really really long error message can provide file which will cause this to happen so that it can be reproduced large error http cl ly items 0w0i013z2q3v0g0b3u0x image 202013 11 25 2008 3a49 3a01 png this is an edge case and we want to do further work to handle those error messages in this case but nonetheless think the toaster style notifications should be tweaked to ensure the close button can never be outside of the viewport update this can be reproduced by using the following old wordpress ghost export file https dl dropboxusercontent com 531857 ghost wp2ghost export 1381230960 json the bug that caused this to happen has been fixed in the later versions of the ghost wordpress plugin but people may still try to use the old one and get error messages that are undismissable like this >>>bug importer
create theme unit test guide just like what wordpress has http codex wordpress org theme unit test it be useful to have db dump of all types of content that theme developers can test against >>>tests themes
show better error message if server side validation fails right now this is the error message if you enter value in the settings that is valid on the client but isn valid on the server screenshot from 2013 11 23 16 53 46 https cloud github com assets 347965 1606768 73f56f50 5457 11e3 8c62 234fb4791c1c png there are various reasons why this can happen the user modified or disabled the client side js the user is developer and plays around with the code it is bug in ghost we should display an error message that at least gives clue why it occured >>>bug server
bug tag input became white input field when add new post and add tag the tag input is white input field now running latest source from master ghost admin https cloud github com assets 539213 1592106 c91b5c04 52b5 11e3 862b 9e93f27b8228 png system osx 10 chrome 31 1650 48 >>>bug
markdown hint for emphasis is wrong reported by user https d33v4339jhl8k0 cloudfront net inline 7792 09565bd7b4c683e3d2c5eaa12964896f7f0ebc8d 4796456110891e51f49018dc252f65530c75425a bild 18 11 13 um 16 59 png would like this to actually be text for italic and text for bold which think will actually be little bit clearer in indicating that it the quantity that matters also change the order so emphasize is first and bold 2nd>>>bug
docs cannot be built on windows even with chcp this might not seem like big problem to some but going to hazard guess lot of our translations will be offered by folks on windows first of all because of some weird thing with jekyll and file encodingon windows you must run `chcp 65001` before running `jekyll serve` this only works in the command prompt not in git bash which is very annoying but recently when trying to compile got further error messages this was also recently reported in irc but unfortunately don have copy of what the actual error message is right now will update this issue as soon as do >>>docs
hyperlinks containing underscores are processed as italics hyperlinks that contain matched pairs of underscores are converted to italics which breaks the hyperlink this affects both the live preview editor and published content ghost version example enter the following url in the ghost editor http en wikipedia org wiki tourism in germany expected html output http en wikipedia org wiki tourism in germany actual html output http en wikipedia org wiki tourism in germany 2013 11 17 12h36 19 https cloud github com assets 972799 1558954 400cc0ca 4fb7 11e3 9b86 758094f316c8 png >>>bug editor in_progress
email should not be considered case sensitive when logging in users are struggling to log back into ghost reported in 1469 think this is sometimes because the email is being treated as case sensitive >>>bug
enhancement repair broken database on startup erisds comment from 1449 noticed that if try to start ghost with some of the tables already present it throws an error has an unhandled rejection error and hangs checked and this is true on master too so you haven added this it would just be good to iron it out if you can if ghost starts with database that is missing tables it is going to crash existence of all tables has to be checked on startup and missing tables should be added >>>data
ghost developer tools proxy object for apps at the moment we pass the weird and wonderful `ghost` object to apps this needs to change we need to create new object for passing to apps which provides access to the data api and to all of the registerxxx functions from ghost and will eventually provide access to all the apis in the ghost developer tools then we need to swap in this new object in place of the ghost object when intialising apps >>>apps
tag submission shortcut causing problems on non english languages have received report that on some languages cyrillic the tag submission short cut of is causing problems this is due to certain characters being placed on the key for example the word has the letter `` which is placed on the same key as perhaps we should remove the comma shortcut or make it more accurate to rather than keycode >>>bug editor i18n
ghost apps the ghost developer kit please note apps is the new name for plugins the work towards making ghost apps possible is spread across several issues in several different repositories we now have the ghost app http github com tryghost ghost app repository where the app boilerplate is beginning to take shape the boilerplate base structure first we want to get to the point where we can create an app with the simplest access to ghost goal create an example app that can register handlebars helper and filter jquery out from `ghost foot` app boilerplate do we need app and other extendable base apps ghost app https github com tryghost ghost app issues ghost filters are broken 2157 app boilerplate filters ghost app https github com tryghost ghost app issues ghost developer tools proxy object for apps 1478 publish next version of boilerplate to npm now app boilerplate proxy object naming and structure https github com tryghost ghost app issues 10 app boilerplate helpers https github com tryghost ghost app issues 14 docs on apps getting started for ghost devs https github com tryghost ghost wiki apps getting started for ghost devs needs updating when the other work is completed app installation we want to make it possible to easily install and manage an app goal users can easily activate and manage apps without touching the database even if the app disappears or is broken app management install app dependencies 2099 add package json support for themes 2081 apps initial lifecycle and setting screen ui 2083 draft code up the new app uis html sass 2065 app installation permissions modal 2130 apps additional lifecycle and settings ui 2140 draft apps wire up the correct install activate manage delete ui 2141 app error handling non existent apps cause an unhandled rejection dies 1829 handle errors from apps appropriately 2118 app safety and security users should be able to depend on an app to do what it says apps should be able to do things they ask for permission for we should make it clear what it is and is not acceptable for an app to do goal to be able to define an app with set of permissions the app should get those permissions and be held to them permission and ability to edit post but not delete one tbd improve goal to be more easily measurable tbd provide examples for acl discussion app safety security 2007 load apps sandboxed 2091 app permissions 2095 app permissions ui 2101 acl the api current user everywhere 2058 acl for apps 2059 acl add to model based api methods posts tags users 2060 acl and strict rules for settings api 2061 data api v1 our json api which will be exposed internally to apps as the data api needs work to improve goal consistent v1 json api which is documented improvement refactor models 1655 improvement remove res redirect from api calls 1654 add validation to models using schema attributes 1401 database schema additions for apps 2102 model extension for apps 2138 draft json data api cleanup for consistency 2124 enhancement add http caching for api calls 2016 provide proper status codes for api operations 2187 json data api docs 2125 application settings goal to be able to create an application with single setting and appropriate ui app settings ability to define default settings 2139 app settings generated ui single text input 2142 discussion app settings dynamic ui 2143 draft app settings advanced generated ui 2159 other apis in order to build realistic app we re going to need access to more than just data api goal to be able to rebuild the kudos example plugin https gist github com jgable 6734267 by jgable using the tools provided by the gdk discussion filters api 2113 routes api tbd errors logging api tbd if you re interested in our intentions for ghost apps recommend reading the very much wip imagining the ghost developer kit https github com tryghost ghost wiki imagining the ghost developer kit >>>apps epic later
api data restrictions for apps internal on settings model ghost data api is accessible internally via api over http and will also be made available to apps the api provides crud functionality for all of our data models however there are some restrictions which should be in place essentially it should never be possible for an app to add setting delete setting or to modify setting marked `core` apps should get their own app settings table which they can modify to their heart content but the settings table shouldn really be interfered with think the most sensible way to do this is to only permit these operations if using the api internally so the features are not available if you are using http or you are an app >>>apps data
improved password reset tool we need to improve the robustness of the password reset tool when someone hits the password reset button ghost should generate url with token which will take the user to password reset form that url should then be emailed to the user if the email fails in anyway we should show useful message pointing the user to the mail configuration documentation the token should only be valid for 24 hours the password reset form should allow user to choose their own new password it should be entered twice the password should be reset to the new password on successful completion of this form the reset password form should look much the same as the current forgotten password form the reset password form should live at ghost reset ghost reset should redirect to ghost forgotten if someone tries to access it without valid token if the token has expired this should be clearly messaged >>>qa
provide an ability to perform bulk actions on posts it is currently impossible to perform bulk actions on post on ghost admin panel had to unpublish 30 posts and had to enter each click times to unpublish and so on it ok if one has few posts but it very hard to maintain blogs with large amount of posts with current ghost admin panel >>>apps
if no user exists go to first run process if ghost has just been set up and no user exists we should send users to first run process which guides them through setting up the first user account and logging into ghost for the first time everything should redirect to this page until the process has been completed needs designs sidenote cache control headers need to be set on this entire process to make sure that the redirects to this page are not cached >>>installation
500 when should be 404 error message don know if you already know but commit `bb17e1c0e9a4bf93df059d4c40a9088f5e71c47d` broke the default error handeling for every 404 page it is showing 500 message with object object message have tested it with commit `dee054e2c3931135f1c63b3becd01333af99800b` and that is still showing proper 404 messages commit `bb17e1c0e9a4bf93df059d4c40a9088f5e71c47d` shows 500 messages looks like the changes in `core server api index js` are the problem here >>>bug
automatic update available notifications very related but separate to 1260 regardless of any other functionality related to updates the following should exist as standalone thing ghost should automatically check what the latest version of ghost is and compare it to the version which is currently being used if an update is available we should fire green notification that reads new version of ghost is available hot damn upgrade now upgrade now should go to http ghost org download for now if when 1362 is merged then it should go to ugly debug tools update the endpoint to check for updates also records some anonymous usage statistics the endpoint requires post request to https updates ghost org with json encoded body containing the following keys blog id must be provided in order for saving to occur blog id string hash of the blog url ghost version string node version string npm version string env string production development database type string sqlite mysql pg email transport string mail options service or otherwise mail transport blog created at unix epoch timestamp created at timestamp from settings dbhash post count integer total number of posts user count integer total number of users always for now theme string value of settings activetheme apps text comma separated list of activeplugins empty for now opting out of update notifications should be possible with setting in config js of `updatecheck false` the end point returns the time which the next check may be performed ghost should check to see if the current time is greater than the next update allowed time and if it is fire another update the update time returned by the endpoint should be 24 hours after the request was made but this may change our sessions currently last 12 hours so we should only check once per session >>>installation
docs bug collection the `troubleshooting tips` link in the mac installation http docs ghost org installation mac section links to http docs ghost org installation mac export path guess this is something that hasn been written yet just wanted to put small reminder here fixed with pr 1513>>>bug docs
form elements messy in preview ghostium oswaldoacauan com ghost editor 12 https cloud github com assets 1268518 1523946 5d2b02a4 4bbe 11e3 95c2 f68f0175f867 png ghostium oswaldoacauan com ghost editor 12 https cloud github com assets 1268518 1523945 5d10e554 4bbe 11e3 9560 35ec4b641628 png the issue is caused by the `position absolute` on line 2215 on `screen css` suggest don use element selectors or reset them on preview context >>>editor
refactor notifications ghost has few different types of notifications most commonly these are referred to as passive and persistent notifications there is also some confusion with regard to how notifications do or should work as some are private cannot be shown when logged in some get created on the server side some on the client side most can be dismissed some cannot and some are stored in memory via the api and some are not most of them appear in the same place and are indistinguishable with the exception of the upgrade notification the following is the specification for how notifications should work once the api and ember js projects are completed passive notifications examples success http puu sh 8il8l png failure http puu sh 8il8t png description passive notifications are created by the client side single page app as result of user interactions they are used to show short term notifications such as your post being saved successfully and to indicate errors creation passive notifications are only ever stored in the dom they do not persist past the next user interaction such as request or screen change for example any notifications to do with saving post disappear the next time you save post or if you navigate away removal the error and warning versions of passive notifications stay until dismissed or the user performs an action that will cause it to disappear success notifications fade out after seconds unless user hovers over the notification which will reset the second timeout visibility passive notifications are always public as they can only ever appear on the screen which they are created on location passive notifications always appear bottom left persistent notifications examples first run http puu sh 8ikdy png email http puu sh 8ikj2 png upgrade notification http puu sh 8ir1j png description persistent notifications are long term notifications usually created by situation in the server side app such as this being the first time the app has been run or their being an update available or something being mis configured creation persistent notifications can be created by either the client or server side app they are made available via an api which stores them in memory and creates endpoints for adding removing and fetching all notifications as notifications are stored in memory server restart would cause some notifications to disappear or reappear removal not all persistent notifications can be dismissed some nag notifications such as the update notification will only go away once the situation is resolved the upgrade is done so there is no longer notification needed at present this would be removed simply by not being re created in memory on startup non dismissable persistent notifications don have close button the only example of this at present is the upgrade notification which also appears in different place visibility persistent notifications are private they can only be seen added or removed by logged in user effectively the notifications api requires authentication most persistent notifications will be for `owner` or `admin` role users only with multi user it may be that persistent notification exists for specific user informing user their password should be changed after being created by an admin therefore persistent notifications will need concept of permissions who they are for but this can probably be added as part of the multi user project location persistent notifications can appear either bottom left or across the top of the application the api to be done further expanded in issue 2637 the notifications api will be for persistent notifications only the internal api should have methods for `browse` `add` `destroy` and `destroyall` `destroyall` is for internal use for testing only `browse` `add` and `destroy` should have equivalent routes post ghost api v0 notifications get ghost api v0 notifications del ghost api v0 notifications as mentioned by sebgie in https github com tryghost ghost issues 1454 issuecomment 31344888 below the `add` method should not require an id but should return one which can be used for destroying the notification the object stored in memory for notification should have concept of an id message whether it can be dismissed or not which location it should appear in etc the response for fetch should conform with the new json api standard it should also only return items you have permission to see >>>api ember epic
data imported notification shows after ve logged in steps to reproduce go to ghost debug and import data which includes importing users this should kick you back to the login screen after logging back in saw this notification screenshot 2013 11 12 08 58 23 https cloud github com assets 322576 1522186 fa192d04 4ba3 11e3 8d91 25051bb3a5a7 png small ux bug that notification is not displaying in the right order >>>bug
hot reload of themes ghost should hot reload themes to eliminate the necessity of restarting it in order to see new theme am not aware of the technical restraints of the templating engine used so won pr on this comments on hot reloading >>>themes
bio character counter measuring wrong when you fill bio field in user profile it shows you have one more character but if you use this last char and save blog engine says you have too long profile 11 10 2013 39 13 am https cloud github com assets 1454560 1508381 6f1d2ca6 49f4 11e3 8a82 f00200181295 png >>>beginner bug i18n
feature post auto save requires 1351 to be completed first we should auto save user content every time they stop typing for seconds lets play with this and see what feels right posts with no title if post does not have title then it cannot be saved yet auto save should automatically replace empty titles with untitled and give the post slug which is just number the title untitled should appear on the content screen but the title placeholder in the editor should remain once title is added everything can go back to normal as per 1351 published posts published content may not be auto saved saving and syncing future requirement auto save should save the content to localstorage as often as possible then attempt to sync to the server >>>ember feature
static asset management it time to upgrade ghost static asset system to something little more heavy duty so that we can handle more use cases and also add proper cache control headers as discussed at length in issue 932 closed in favour of this issue we need to be able to serve static assets for ghost admin themes apps images this should entirely replace or wrap our current usage of connect static we still need to be able to hot swap themes this needs to be abstracted so that it uses local file storage by default but so that we can provide way for apps to override this they may wish to use cdn or store files elsewhere static assets need to be versioned so that the cache can be invalidated this should be done using hash of the file which is appended to the filename something like ghost js ghost aba23928 js we ll need helper for outputting script and style tags for managed assets both in themes and in the ghost admin something like asset css screen css for themes and if you re on ghost it will look like asset css screen css ghost true or it could be asset css screen css ghost it would be nice if this looked for specific assets css assets js structure by default encouraging theme developers to structure their theme in consistent way but could be overridden >>>server
tag replacement not working from the forum how to reproduce this bug create new post with tag of example publish this post edit this post by removing our example tag and adding example in its place reload the blog page to see that neither the example nor example tags exist on your post edit the post once again to add back in our example tag which shouldn have been removed reload the blog page to see that now both example and example exist on the page remove the example tag to fix the issue initially published it with lowercase css after noticing that this didn look good edited my post to remove the css tag and add in new css tag upon clicking save neither of the tags had been added when editing the post for second time to once again add the css tag both the css and css tags ended up being added to the post afterwards was able to remove the css tag but keep the css tag >>>bug
add validation to models using schema attributes depends on 1398 create schema js related to 970 more validation models should use the constraints provided by schema js to validate values >>>data server
refactor migration database is out of date depends on 1398 create schema js refactor migration from one database version to another the changes should be determined by comparing the actual database with the schema js file any changes found should be applied to the database to reflect the new version supported operations create table drop table alter table add column drop column modify column table and column renaming needs some investigation on how to do this the same mechanism could be used to generate tables for apps an app has to provide its own schema js file and whenever new app is activated the database is updated with the new instructions from schema js >>>data
refactor migration database not yet created depends on 1398 create schema js refactor the initial setup of the database to use the json object from schema js if the database was not yet created the migration tool should use the object from schema js to create the version 000 of the database >>>data
create schema js the schema js file should contain representation of the database for the current required database version as json object starting point for this was made with the constraints object found in core server data migration 000 js` >>>data
customisable permalinks ghost should be able to support the common year month day title format as well as the current flat title other formats may be added but making ghost support is big enough task for one issue for now the ui to switch over should be checkbox on the general settings screen >>>qa
performance tests in my travels around github recently saw repository with some performance tests benchmarking damned if can remember what it was but thought open this up for discussion ve seen https github com bestiejs benchmark js and https github com broofa jslitmus has anyone got any experience working with performance testing framework and can anyone come up with good examples of node modules or other repositories on github which have thorough test suite also while we re at it anyone got any experience or examples of monitoring performance testing memory usage not to detect leaks but rather determining what impacts on the overall footprint ideas thoughts examples on postcard please >>>tests
test api createrequest doesn use port specified in config `core test unit utils api js` has port fixed to 2369 even though it should be using the port specified in the config https github com tryghost ghost blob master core test unit utils api js l17>>>tests
upgrade validator to first we need to do 1378 and implement whatever the intended solution is then we need to upgrade validator from to the latest version >>>beginner
wrong notification on updating post when you update published post the notification is post was published it should be updated >>>bug
responsive videos inside the ghost editor in https github com tryghost casper commit 4616c5bd1dd0899741021d451108afa39130b611 we introduced responsive video embeds in the default theme it would be nice if this worked inside the editor too task introduce fitvids js into the ghost editor it should only be loaded in the editor screen not every page in admin apply the script to rendered markdown` write test to ensure the script is loaded successfully on the editor screen >>>editor media
add support for rel next and rel previous in ghost head we should output these tags on all archive pages according to the specification here http googlewebmastercentral blogspot co at 2011 09 pagination with relnext and relprev html>>>themes
regression body class outputting wrong data on single post on single post template view the body class is outputting `home template` it should be outputting `post template` need to fix the issue as well as whatever test is failing to check this properly >>>bug themes
improve image uploader ui image https cloud github com assets 120485 1437303 190256fc 416b 11e3 806f c463f83bfde0 png image https cloud github com assets 120485 1437307 225ec000 416b 11e3 8e24 4963059aab4d png >>>media
don open browser on grunt dev `grunt dev` fires up fresh browser window it makes me crazy>>>bug
store absolute image urls instead of relative should we store absolute image urls instead of relative makes the data more portable when uploading images via the drag drop uploader image https cloud github com assets 120485 1436866 42022d06 4162 11e3 9ad0 3803ceb6a23b png >>>editor media
import file from wordpress causing error trying to import the contents of my wordpress blog ve installed the latest version and have version of ghost running with mysql rather than sqlite the exporter seems to work fine in that can download the json file and when upload it to ghost debug get the following error message error importing data er no such table table ghost posts tags doesn exist sql select `tags` `posts tags` `post id` as pivot post id` `posts tags` `tag id` as pivot tag id` from `tags` inner join `posts tags` on `posts tags` `tag id` `tags` `id` where `posts tags` `post id` in bindings 293 update thought this was just an issue when tried to run the import turns out it broken ghost now image https cloud github com assets 109047 1436672 3c64f8ec 415d 11e3 953a da8df86d0f54 png love the 500 page by the way >>>bug
post settings ux initial draft of the intended ux for post settings menu write new post post settings menu looks like url the post title post date now these two should be placeholders for the url the placeholder the title with dashes instead of spaces etc if the title changes the placeholder changes if the title is empty the placeholder is empty save post as draft the above placeholders stay exactly as they are publish post without changing post settings post settings should now convert their placeholder values to actual values url the post title post date 30 oct 13 these are now values edit post settings and save as draft in this instance change my post date to yesterday url the post title post date 29 oct 13 and save as draft as have now entered content into the text input this is converted from placeholder to value and stored publish post with edited post settings when publishing post with edited post settings placeholders convert to values any existing values are maintained remove value from draft let say change my mind about setting my post date to yesterday delete the date from the field my browser automatically puts the html5 placeholder back into the field when the value is empty so once again it looks like url the post title post date now when save the post an empty value is detected and converted back to placeholder >>>qa
static page issues can set static page until post has been saved as draft weird unexpected ux notifications fire when check uncheck the static page box these should fire on save not on click we don need to hot swap post on the fly between post page this is only relevant on save publish page https cloud github com assets 120485 1436344 0186afca 4155 11e3 9278 2ce4ed79a016 gif >>>bug
1337 just cos >>>apps bug data docs editor epic i18n media mobile qa themes
support for postgresql out of the box it would be great if ghost would support postgresql database out of the box adding the pg module an an optional dependency so just configuring the config js would be enough currently changing package json file is tedious and error prone between releases for us postgres users also adding the pg module is not trivial in chef puppet saltstack setup is adding pg default something you would consider sqlite3 and mysql is already there thanks martin >>>server
editing publish date of unpublished post yields javascript error when creating new post that is not yet published you can edit the publish date since it yields javascript error `uncaught typeerror cannot call method indexof of undefined preparing pr >>>bug
settings page breakpoints are broken the save button on the settings page is not vissible although tapping the top right corner saves the settings chrome android samsung s4 screenshot 2013 10 29 17 45 19 https cloud github com assets 2915671 1429897 cfcae38e 40b9 11e3 9a29 b8a72e1a08fc png also when scaling down window chrome windows and then back up the breakpoints dont reset properly steps to recreate on desktop windows chrome scale down window with settings page seletc general or user tab scale up window >>>bug
static pages should use page hbs if it is available as originally implemented in 1139 by egdelwonk along with https github com tryghost casper pull 39 if there is `page hbs` template available in the currently active theme then that should be used to render page instead of `post hbs` egdelwonk you get first refusal on this if you want it >>>themes
editor title removing spaces xss protection interfering with titles ghost version nodejs version 10 20 from the forum https ghost org forum bugs suggestions 2195 in post title write becomes write where is any punctuation write hello world becomes write hello world also happens if change the quote mark to another punctuation symbol note have duplicated this on too >>>bug editor
docs domain name setup in the docs we currently have placeholder called setting up ghost with domain name on the installation deploy http docs ghost org installation deploy docs right down the bottom it would be really good if someone could populate this section with different setups nginx apache etc it starting to become quite frequently asked question >>>docs
ghost signup redirect is not working correctly expected behaviour if the user is logged in ghost should not redirect if the user is not logged in but there is user registered ghost should redirect to ghost signin if the user is not logged in and there is no user registered both ghost and ghost signin should redirect to ghost signup observed behaviour the first request to ghost redirects correctly to ghost signup subsequent requests to ghost redirect to ghost signin after restart of the application the first request is redirected correctly this only occurs when running in production mode the choice database engine doesn affect the behaviour reproduced on >>>bug
`open` class incorrectly toggled on publish menu not sure if the `open` class is used for anything but it is incorrectly toggled on the publish menu it only toggles when the menu is opened not when the menu is closed therefore on first open the `open` class is applied correctly it then is not removed when the menu is closed next when the menu is opened again the class is removed meaning the menu is open but has no `open` class on next open it is correctly added again >>>bug
ghost wrongly highlights tags in the preview area last week setup ghost and started blogging also configured google prettyprint syntax highlighting following these instructions http blog peterschmalfeldt com adding syntax highlighting to ghost however noticed that if choose the `html` syntax like then ghost identifies the rendered output as ghost tags at least the css style applies to it image https cloud github com assets 542458 1419694 69fbef1e 3fd1 11e3 881d ae0f33d29879 png this is because google prettify renders it as lt div know adding prettyprint syntax highlighting is nothing officially supported yet but what could be done is to limit the recognition of ghost tags to the tag bar in the footer section of the editor area >>>bug
no spaces when typing ve heard this one get raised few times on the forum see below and interestingly it happens when trying to type text through casperjs for functional tests https ghost org forum bugs suggestions 2071 no spaces while typing https ghost org forum bugs suggestions 505 no spaces during writing>>>bug editor
experiment with ace editor love to see someone have go at swapping codemirror with ace editor the questions to answer are does ace editor suffer from the same functionality issues as listed in 1294 specifically how well does it work on various mobiles is the cursor positioning more robust does it suffer from data loss how good is the spellcheck extension how hard will it be to reimplement our upload feature at the moment this uses an awful lot of codemirror api stuff and is not very robust implementation does ace have api features that would make this more straightforward if the answer to both of these questions is positive then think that switching might make sense in the short term otherwise we should focus on how to build something that does meet our needs one good way to test out the ace editor would be to try out different things via casperjs functional tests as this barely works for codemirror >>>editor
codemirror very hard to edit via mobile not just ios7 when using ios not specifically ios7 there are number of difficulties navigating it can be very difficult to get the focus to work to bring up the virtual keyboard moving around manipulating text copying and pasting are all pretty much impossible https ghost org forum bugs suggestions 637 bug hard time editing post from ipad https ghost org forum bugs suggestions 429 chrome for android issue deleting text experience this on my iphone not ios7 can just about edit if put lot of effort into figuring out the right place to tap etc these are fundamentally issues with codemirror https github com marijnh codemirror issues 60 https github com marijnh codemirror issues 331 https github com marijnh codemirror issues 1697 https github com marijnh codemirror issues 1702 however it important to track this issue here as it fundamentally detrimental to our mobile offering and if we can find new approach such as using ace which does resolve it it worthwhile knowing >>>bug editor mobile
codemirror cursor does not always appear in the right place reported multiple times on the forum https ghost org forum using ghost 361 bug problem with cursor in chrome https ghost org forum using ghost 1615 mouse cursor is about 20 spaces ahead in ie11 in post editor https ghost org forum bugs suggestions 483 issues with markdown editor in internet explorer have also experienced this issue although cannot remember when or where effectively the cursor blinks in completely the wrong place when it happens it gets worse and worse the more text there is it may be to do with zoom >>>bug editor
epic ghost split screen editor the following issue is here as way to collect together and organise the issues raised against the existing ghost split screen editor the issues fall into broad categories markdown conversion bugs mostly the result of issues in showdown which converts the markdown in the left screen into html in the right screen editor functionality issues largely caused by the complexity of codemirror include problems with editing on small devices etc syncing issues problems with scrolling flickering and other problems with maintaining the two panels below is collection of known issues markdown conversion 644 markdown output jumps around like monkey on crack when writing in italics closed wontfix requires new editor plugin 974 markdown bug no new line inserted when quotes are used closed fixed 985 set title attribute for images from markdown closed wontfix 1045 code gets escaped closed fixed 1113 allow multiple underscores like closed fixed 1909 markdown editor bold editor text closed wontfix 2664 syntax highlighting bug within the editor closed wontfix 2293 support for markdown reference link syntax as well as inline syntax closed wontfix 1318 markdown footnotes enhancement closed wontfix 1670 allow markdown tables closed wontfix 3203 multiple parentheses in link breaks markdown 1501 hyperlinks containing underscores are processed as italics 2304 bug apostrophe in image alt tag causes word count to be incorrect 2093 markdown issues with new lines editor functionality 553 restoring form data on editor panel closed fixed 960 mobile editing is buggered in ios closed fixed 1007 unexpected behaviour in editor with home end keys closed fixed 1240 browser spellcheck doesn work with codemirror closed wontfix requires new editor plugin 1295 codemirror cursor does not always appear in the right place closed browser bug 1296 codemirror very hard to edit via mobile not just ios7 closed fixed mobile version of editor in place 2245 wrong cursor position in markdown editor for unicode closed wontfix 1007 unexpected behaviour in editor with home end keys closed wontfix 2570 bugs with the touchscreen editor closed mostly fixed 2703 about the content closed fixed 3577 images not detected in lists closed wontfix 1299 no spaces when typing closed fixed 2371 character doesn show on markdown editor closed fixed syncing issues many of these appear to be duplicates different incarnations of the same general problem 22 advanced scroll features closed wontfix 535 editor scrolling gets stuck when typing lots of text closed fixed 958 fucked up scrolling behaviour when typing closed fixed 959 weird markdown syntax highlighting closed wontfix 1031 images in preview pane flicker as you type closed wontfix 481 editor ui scroll events are not smooth closed wontfix 1030 point in preview pane corresponding to the cursor can be offscreen when typing 3524 bug mobile editor left side not always scrollable many of these are closed as won fix because they cannot be resolved without fundamental changes short term some of the category markdown bugs are fixable by tweaking our extension of showdown it may be possible to vastly improve behaviour by maintaining our own fork of showdown for the short mid term long term we will be replacing the editor with an entirely new component which will look and function very differently to the existing editor the following wontfix issues will be fixed by dropping codemirror 4373 1240 browser spellcheck doesn work with codemirror 959 weird markdown syntax highlighting 1909 markdown editor bold editor text 2664 syntax highlighting bug within the editor 2245 wrong cursor position in markdown editor for unicode 1007 unexpected behaviour in editor with home end keys >>>editor epic
select word keyboard shortcut doesn work version `master` branch operating system mac os 10 browser firefox chrome know this used to work but now it only seems to highlight letter bug https cloud github com assets 367517 1407182 638d2c10 3d65 11e3 9794 da926a126747 gif update updated my bucket load of typos >>>bug editor
markdown help popup is truncated on small screens the markdown help popup truncates at bottom at lower vertical screen resolutions the screenshot below is from desktop resolution of 1360x768 the best resolution for my laptop 2013 10 24 22 01 26 https cloud github com assets 486200 1405587 1c03b034 3d34 11e3 8456 b787ae78e47d png workaround is to zoom out `ctrl few steps steps to view all the help text steps to see the whole dialog however this isn helpful if person needs the larger text in order to read the help scrollbar appears at right when the help is showing but when attempting to grab it order to scroll down the help screen disappears firefox 24 win7x64 >>>bug
configurable timezone ghost should allow the user to set the timezone of their blog setting the system time in node js is not viable option https github com joyent node issues 3286 solution moment timezone http momentjs com timezone provides nice extension to the moment js functionality already in use timezone https npmjs org package timezone configuration the configuration could happen in the config js but that might not be flexible enough admin settings could be extended to show simple dropdown with all available timezones and store the setting in the database related issues 907 814 this ticket should serve as place for discussion on how timezones should be implemented in ghost as for implementing it raise my hand >>>later
don prevent access to all txt files in theme folder robots txt in the previous versions of ghost had no problem in adding robots txt to the theme folder and get it with myghostdomain robots txt with the new security update this doesn work anymore think at least the robots txt file should be made reachable again >>>themes
usability add support for keyboard based navigation of content screen we should be able to pretty easily add support for some keyboard shortcuts on the content screen the basics would be bindings for `up` and `down` so that you can navigate larger lists with your keyboard >>>ember
copy and paste images from clipboard one of the things want to use ghost for is writing software documentation and step by step instructions which often involve lot of screenshots would love to be able to paste images from the clipboard straight into ghost without having to save them to disk first it sounds bit lazy but it has been my biggest point of friction when writing documentation with other web based tools it looks like it is at least possible to do in javascript now with chrome http strd6 com 2011 09 html5 javascript pasting image data in chrome though not sure if it is possible to do this with the image uploader or code editor ghost uses know this is going to be pretty specific to both the os and browser and may not be possible in all of them if can get it working in ghost for specific os and browser is it something that might be accepted as pull request or would it have to be working in all supported platforms >>>editor
forgive me for this but ghost editor need spelling checker please hi guys hi awesome job just love ghost its best thing ever happened to blogging its gorgeous its elegant its simple and its beautiful just started ghosting and after writing half of the article was surprised to see not red underlines was about to pat my back then suddenly realized ghost editor doesn checks for spellings please guys can you please fix this thing sorry for being dramatic its just that am very excited about ghost >>>bug editor
connect multipart deprecation warning update multipart to busboy firing up ghost from github currently yields the following deprecation warnings the wiki page https github com senchalabs connect wiki connect suggests few alternatives that could be used instead of the multipart middleware >>>qa
presence of custom error hbs page throws 500 error for missing non admin pages if custom `error hbs` is found and you navigate to non admin page that doesn exist ghost will respond with 500 error and dump the stack trace to the page if it in development mode or `internal server error` in production mode expected 404 response and render custom `error hbs` page steps to replicate error create file at `core content themes error hbs` currently where ghost checks for custom error page run `npm start` or `npm start production` visit http local tryghost org 400 or some other non admin page that doesn exist page results development error failed to lookup view error at function app render home vagrant code ghost node modules express lib application js 494 17 at serverresponse res render home vagrant code ghost node modules express lib response js 756 at rendererrorint home vagrant code ghost core server errorhandling js 144 17 at object errors rendererrorpage home vagrant code ghost core server errorhandling js 157 20 at object errors error500 home vagrant code ghost core server errorhandling js 192 20 at incomingmessage next home vagrant code ghost node modules express node modules connect lib proto js 185 17 at fn home vagrant code ghost node modules express lib response js 751 25 at function app render home vagrant code ghost node modules express lib application js 496 14 at serverresponse res render home vagrant code ghost node modules express lib response js 756 at rendererrorint home vagrant code ghost core server errorhandling js 144 17 production internal server error>>>bug
custom error hbs page should be located in the individual theme folders ghost checks for custom error page at `core content themes error hbs` believe this is just typo on `errorhandling js 10` https github com tryghost ghost blob master core server errorhandling js l10 approot path resolve dirname themepath path resolve approot content themes usererrortemplatepath path resolve themepath error hbs however ideally ghost should override the default `error hbs` with the one that located in the active theme folder if it exists this would allow theme developers to create custom error page that match their theme example `content themes custom theme error hbs`>>>bug
settings user page buggy in firefox the settings page is very buggy when opened in firefox 25 on linux and windows it hides the cover image and the user profile picture using ghost selection 005 https cloud github com assets 5144843 1371239 8b9d802a 3a35 11e3 8eaa 21530f66571e png >>>bug
partials not cleared on theme switch while working with theme that has custom pagination partial then swapping to one that does not the new theme displays the prior theme pagination partial for example set ghost to use my custom theme that used custom partials pagination hbs restarted the server then switched to casper the casper theme pagination controls were rendering the code from my theme custom partial this is on ghost on node 10 20 and mac 10 >>>bug
convert docs from html to markdown our docs on the gh pages branch are using jekyll which supports both html and markdown inputs currently we use html it would be awesome make lot of sense make translations much easier if we used markdown this task is to convert our current gh pages implementation to be markdown based rather than html based keeping all the same styles and functionality this is an open issue to anyone who wants to pick up submit pr >>>docs
gear icon popups are different between content and edit modes as user of ghost expect similar ui constructs to be the same even in different contexts currently the popup tooltip in content mode and the popup tooltip in edit mode are different attaching screenshots as an illustration content mode content mode gear popup png https cloud github com assets 563460 1366306 da7c0626 38c8 11e3 8a53 c248509ddb66 png edit mode edit mode gear popup png https cloud github com assets 563460 1366307 e0e31fc2 38c8 11e3 902f 074b61459416 png if the differences were significant say don worry about it but functionally they re identical in behaviour and appearance not counting font size the only difference is the delete button >>>bug
remove special characters from css files the errors css file contains the following line utf encoded character https github com tryghost ghost blob master core client assets sass layouts errors scss l98 content this gives me grunt compile error based on the sass documentation here http sass lang com documentation file sass reference html the implied character encoding of the file is based on the os settings which for many most people is utf however apparently that is not the case for my os running ubuntu 10 04 lts with ruby 0p247 the fix would be an charset utf declaration at the very top of the file >>>bug
unpublished posts are accessible saved drafts can be viewed by navigating directly to the url even if the user is not logged in any design decisions around this such as to allow proof reading before publishing or is it something to be fixed >>>bug
shortcut js assumes qwerty keyboard some shortcuts don work with not qwerty keyboard for example on french keyboard to do the combo is ctrl alt as seen here img http www ndc co uk images keyboard french jpg if do it in the markdown editor the shortcut for h5 will override the character localization problem maybe >>>bug i18n
after scrolling down the list of posts can not see any content using ghost and imported couple dozen of posts from my previous blog noticed weird behavior when scroll down the list of posts in the admin panel after the delayed load of new posts took place adding more posts to the bottom of the list can not access any of the post contents not the first couple posts and not the added posts in my firefox console can see this kind of requests 20 44 29 219 get http mydomain 2368 api v0 posts status all page orderby 5b 5d updated at orderby 5b 5d desc http 304 not modified 62ms 20 44 31 143 get http mydomain 2368 api v0 posts status all page orderby 5b 5d updated at orderby 5b 5d desc http 200 ok 206ms think whenever 304 is returned the list of posts is not updated correctly can access the posts from the last requests which returned 200 >>>bug
allow multiple underscores like in sentence like ghost is the best software the markdown script has fit and depending on how many underscores will allow several of them to be characters turn some text bold and turn some text italics more than two underscores in row should be safely excluded from markdown >>>bug editor
select boxes look weird on firefox select boxes have screwy padding line height on firefox more importantly this particular box is appearing as text input with increment buttons on chrome and dropdown menu on ff why is that select box ff update https cloud github com assets 263119 1335638 e7e3a34c 35bb 11e3 83ee 770efec1b33f png originally reported by hansondr in 1086>>>bug
add grunt prod to documentation currently `grunt prod` is not mentioned in the contributor docs >>>docs
markdown code block syntax highlighting will there be code block syntax highlighting supported it would be nice to have some code snippet coloring for programmers and hackers to use out of the box github is using linguist https github com github linguist >>>apps
post title must be url encoded on file post hbs the title variable passed to http twitter com share must be url encoded otherwise character will truncate the string for example try to create post with title foo bar reported by zaerl in tryghost casper issues 36>>>bug themes
fix unhandled promise error on signup screen see https github com tryghost ghost issues 1071 issuecomment 26320401 there is promise without an onrejected handler somewhere in the signup process that needs errorhandling attached >>>bug
server responds with 200 status code for error pages actual 404 responses are served up with 200 http status code expected error responses should be served with the matching http status code screen shot 2013 10 14 at 16 02 pm https cloud github com assets 742913 1329786 442ee36c 351e 11e3 8630 bd09641d1498 png >>>bug
code gets escaped don think code should be escaped this way http imgur com 3xou2se png >>>bug editor
inline code markdown escaping portions of code example git files wanted files expl local files files appears like >>>bug editor
images in preview pane flicker as you type seen in chrome version 30 1599 69 ghost it distracting it would be awesome if it could be mitigated >>>bug editor
point in preview pane corresponding to the cursor can be offscreen when typing that the point in the preview pane corresponding to where you are currently writing can be offscreen seems like bug to me unlikely to be related to 958 because it can occur without images present image https cloud github com assets 509838 1327510 7e37f2ca 34f0 11e3 9739 c87f69bd5f02 png chrome version 30 1599 69 ghost >>>bug editor
travisci badge should point to public travis page right now the travis badge points to private travis pro page now that the repository is open source the badge should link to public page and build statuses should be public >>>bug
on user setting page form is reset if you upload image on user setting page if you fill up the form and then upload an image cover or user photo it resets the form minor annoying ux bug >>>bug
openid login it be helpful if could register login via openid so that there is not again another password have to save >>>apps
unexpected behaviour markdown from the forums https en ghost org forum everything else 65 bug collection text is emphasized text single lines is bold opposite is true for bold text is bold text is emphasized>>>bug editor
unexpected behaviour in editor with home end keys from the forums https en ghost org forum everything else 65 bug collection home end buttons in editor go to start end of paragraph rather than line>>>bug editor
hosting docs update don push this til monday add details of bitnami installers rackspace install do install anyone else that comes through >>>docs
usage docs markdown guide esp images >>>docs
do writeup write up tutorial for how to get started with do>>>docs
bug if forgotten password email fails the user is locked out problem when requesting new password the user is locked out if the email is not delivered steps to reproduce set up wrong credentials for email provider go to ghost forgotten insert email and press send new password error message is shown 535 authentication failed bad username password password is reset email won arrive this bug would be solved by sending token as discussed in 288 >>>bug
handling image upload fails with nginx as proxy the default max upload size is 1m http wiki nginx org httpcoremodule client max body size when an image is uploaded but fails from the file size the preview pane does nothing no upload failed message and the url entered into the editor is `http if you try multiple times you may get an image upload failed with try again button but in my testing got this maybe 10 times >>>bug editor media
usability reset fade out timer for notifications on hover something noticed recently that good ole facebook does is that when you hover over popup notification it ll reset the fade out timer and cancel any active fade out this way if you catch notification right as it is fading out you can save it with your mouse and read it before it disappears would be cool if we could apply this to our notifications but understand it be super low priority >>>beginner
bug image upload url method re 956 whilst working on this issue can see that the image url still has some bugs if multiple images are present the id gets confused quirky results such as saving to wrong image placeholder or removing wrong image on trash can etc>>>bug
post classes from tags aren correctly processed from the forum https en ghost org forum themes 567 casper theme classes for tags not correct tags are appearing like this when it should be like >>>bug
set title attribute for images from markdown it be nice if we could set the `title` attribute for images as well as the `alt` attribute with the caption being entered in the markdown >>>editor
if the theme is missing admin crashes on the latest nightly if you remove or rename theme directory and then restart ghost everything is blank template issues like this should probably not crash the backend letting the user go in and pick new theme http pmgr mn agwf terminal output >>>bug
image url is not persisted as demonstrated in my lxjs talk if you go back to the url view of the uploader when you have already inputted url the url is not actually there >>>bug editor media
markdown bug no new line inserted when quotes are used see below for demonstration linebreak https cloud github com assets 1196299 1279063 bef25922 2f2d 11e3 8c25 bffde1e3786b gif >>>bug editor
ses email configuration can someone please take look at how to configure email to work with amazon ses it been reported on the forum https en ghost org forum using ghost 493 does anyone use amazon ses for ghost mailer that the following error occurs `email error missing aws credentials` ve tried to reply but not sure ve done good job it would be good if someone can verify how to do it and please add it as an example to our documentation >>>docs
option to include extra character sets in admin currently if you use the markdown editor and type characters which are not in the standard latin charset then they are rendered bold and ugly users who type in languages which use other charsets for example polish should be able to select additional charsets to include in the admin interface we do not want to include all the charsets by default as each set provides additional significant filesize therefore allowing language apps to declare which additional sets they require is the intended solution>>>apps i18n
consider switching to bluebird for promises bluebird https github com petkaantonov bluebird looks pretty neat the main advantages over when js appear to be better performance https github com petkaantonov bluebird blob master benchmark stats latest md better debuggability https github com petkaantonov bluebird error handling >>>server
add tags to bodyclass bodyclass should include the current tags assigned to post when on post hbs view also requested via forum here https en ghost org forum themes 537 tags as part of body classes>>>themes
add multi lang support for docs we ve got ton of translation offers docs is probably the best possible place we can start to make use of them let have look at making out gh pages jekyll branch support multiple languages http developmentseed org blog multilingual jekyll sites >>>docs i18n
cache invalidation headers are missing trailing slashes currently it is just invalidating the redirect at blog post rather than the page at blog post >>>bug
mobile editing is buggered in ios problems markdown field is impossible to focus which means no writing tag text input is now not sliding up like it used to post settings tooltip goes off screen probably ton of other shit too screen shot 2013 10 02 at 10 57 59 https cloud github com assets 367517 1252399 41755a90 2b49 11e3 8f19 dead2405c16b png screen shot 2013 10 02 at 10 58 08 https cloud github com assets 367517 1252400 4258ebf2 2b49 11e3 8b32 5f4bcfd56f73 png ll get working on fixing these asap update the tag focus problem seems to be clicking issue the click listener no longer seems to be registering on the tag toggle element changing to `focus` listener on the input fixes this but causes other problems update fastclick seems to be causing all the issues relating clicking this includes the tags not sliding up and the editor not focusing >>>bug editor
weird markdown syntax highlighting accidentally discovered this bug while reporting 958 when typing the same char lots of times eg dddddddddddddd markdown thinks it is link and gives it class of cm link this should not happen scrollbug https cloud github com assets 120485 1251762 f5ffd0ba 2b37 11e3 861f cb8fd7a81811 gif >>>bug editor
fucked up scrolling behaviour when typing no idea what going on here or quite how to debug it both panes are scrolled to the bottom type in the markdown pane the preview pane scrolls up by few hundred pixels reset the preview pane to be at the bottom type in the markdown pane again the same thing happens would be nice to get this into but punt to if it looks like it going to be pain scrollbug https cloud github com assets 120485 1251762 f5ffd0ba 2b37 11e3 861f cb8fd7a81811 gif >>>bug editor
bug image link is not removed from markdown the link to an uploaded image is not removed in markdown when pressing the trashcan icon in the preview steps to reproduce insert image using upload an image press the trashcan icon link is not removed from markdown start typing the removed image shows up again >>>bug media
ghost importer ui love think it high time the importer got bit of ui and design love and attention following on from 952 really want to make the importer much more user friendly with validation or check step and save step also think we need to make the importer and exporter accessible through the ui or at least put them on nice page which isn called ugly debug tools although this does seem to have done the job of making people aware this is unfinished stuff quite well so far updated with more detail there are at least different types of importer the first being file upload as per the current ghost import and the second being api based where we authenticate with 3rd party and pull data in directly there will be the ability to run pre check to test the imported data is valid to insert into ghost in the cases where it isn things which break our uniqueness constraints or strings which are longer than ghost permits we need to message this to the user and preferably provide simple ui to fix the issues successful import should probably also message the user with some details about what has been imported successfully imported 321 posts with 56 tags >>>importer
ghost import validate first really like to see the ghost import function given some love the import tool grabs the data does some manipulation and then uses our bookshelf models to add it all to the db at the moment because we re using sqlite our validation rules are largely ignored because sqlite does not enforce column lengths so if someone imports tag from the wordpress exporter plugin and that tag happens to have description 200 chars they end up with tag with description 200 chars however if you do the same with ghost running mysql you ll get an error message and the import won work you can then manually fix the data but that pretty uggers what think we need to do is grab the data run full suite of validation on it and then feed back to the user about their data is it ok are we going to truncate some fields etc if we need to truncate fields to get them into our db structure we can then give the user choice to let us do it or to manually fix it themselves this is much more user friendly imo also think that splitting the import process into validate and save will give us much more flexibility for building plugins which hook into those steps take look at my first stabs at plugin https github com erisds ghost commit 5a14d35c3b0a4d93dc1f6e46ed5efc811b7db8e4 to see how modified the current import function to allow plugins to hook in >>>apps
ghost importer further from 854 we want to write ghost app which import from the wordpress wxr format this should work for wordpress and tumblr on account of tumblr2wordpress benapps net imports from blogger both of these are xml formats which we should be able to process using xml2js just need to finish investigating completing the plugin api stuff in 854 the repo is here https github com tryghost ghost importer>>>apps
crazy notification stacking have feeling this may be related to an existing issue but this should not be thing errors http cl ly items 2e3v3x303s3d0w06443f screen 20shot 202013 09 30 20at 2014 21 15 png >>>bug
admin notifications should only appear when logged in `ghost is attempting to use your server sendmail to send mail it is recommended that you explicitly configure an mail service see http docs ghost org mail for instructions` should not appear unless logged in >>>bug
able to download anything from the active theme directory from the forum https en ghost org forum bugs suggestions 467 bug able to view download anything in the current theme directory found this bug few minutes ago where anyone is able to download view the contents of any file in your current theme directory this includes being able to download the handlebars templates which isnt really desired ability as an example http post hbs will download the post handlebars template the same thing happens with readme md we should probably lock down theme static assets to not serve hbs files or to only serve things from the subdirectories >>>bug
docs keep ghost running we need to update the install documentation to cover the steps of keeping ghost running there are loads of ways to do this so our guide should cover one simple way think we ought to also cover how to get ghost running on domain name so the most straight forward configuration to setup ghost to respond to my ghost blog com and run after ssh exit whatever that may be >>>docs
security prevent xss attacks in text fields all text only fields such as post title blog title blog description user name user bio etc need to be sanitized so that people cannot store html in them recommend completely stripping html but it is enough to encode the fields before storage decode after this should probably be done in the server side models reproducible case in the admin panel give the blog title of alert blogtitle visit the blog the script will execute >>>bug
wp export plugin path issue from the forum https en ghost org forum using ghost 165 importing posts unfortunately it looks like theres couple of problems with both the ghost plugin and the importer the plugin seems to assume path and fails without error unless explicitly set it to that of the plugin it then downloads file which has no content ive modified the ghost class php so it works for me as follows https gist github com iwootten 6700474 javorszky hope you don mind me punting this at you >>>bug
regression user is no longer redirected to admin after signup on new install after signing up the user is no longer redirected to ghost after signing up >>>bug
consider switching to javascript void for hrefs know this can be kind of contentious personal taste issue but the in our urls can potentially cause us problems down the road with backbones routing on browsers like ie9 that don support pushstate we should consider switching to javascript void to avoid changing the url when clicking about or we could start using button where semantically they would be more correct >>>ember
usage docs settings update the settings docs on the usage to be little nicer including screencasts from licecap where possible include more information about what each setting is does and what sorts of values it can have >>>docs
usage docs how to edit config js usage docs need to cover editing config js why you need to edit it what to edit and possibly some details on how to edit it using ssh only one of the most common questions we re getting is ghost is working but surely the ip being 127 is wrong and need to set it to so this should be covered should cover editing url including setting it to localhost 2368 for development should point to mail docs for editing mail setup >>>docs
usage docs explanation of environments we need to explain nicely about environments this should be aimed at all the php developers who ve never experienced this before what development is what production is when to use each one why and how worth mentioning ease of deployments timelessly tricky task with wp also worth cursory explanation that most folk don need to worry about testing travis they re for devs >>>docs
moment js language support moment supports i18n we should make this available when we do i18n work>>>i18n
postgres frontend bug from the forum https en ghost org forum installation 393 bug problem with postgresql as database postgres appears to work on the admin but the user gets the following error error invalid value check page pages limit and total are numbers which comes from the pagination helper but ultimately means the api is returning wonky response with regard to pages >>>bug
ghost won install with node 10 19 yesterday release of 10 19 seems to have caused an error think this is with chris lea ppa version of node but it needs checking it has been reported here https github com joyent node issues 6263 and on the installation forum it is probably problem with single dependency possibly uglify if anyone has mins please upgrade to 19 and try this out see you can narrow it down to dependency and whether it is the ppa version or all node>>>bug
codemirror cursor can span multiple lines from the forum https en ghost org forum using ghost 361 bug problem with cursor in chrome it seems the cursor can span multiple lines which becomes impossible to tell where it is inputting >>>bug editor
mysql sqlite importer explodes if tags are duplicates the importer explodes on duplicate tags in mysql error importing data error er dup entry duplicate entry getting started for key tags slug unique insert into `tags` `created at` `created by` `description` `meta description` `meta title` `name` `parent id` `slug` `updated at` `updated by` `uuid` values and on sqlite error importing data sqlite constraint column slug is not unique >>>bug
posts api extension for reverse post order this has been requested before https en ghost org forum everything else 327 idea reverse pagination and likely to be requested again once the json api becomes public and prevelant but is not particularly high priority it would be nice to expose an option in the api that allows for the chronological order of posts to be reversed so that the oldest post is displayed first this can be useful if extending ghost to publish content that is in more of book or slideshow format the main problem with implementing this would be the complexity of the current `findpage` code which does need extracting out and making dry we also need to determine what the option should look like suggest order reverse` by providing this via the api it would be possible to turn it on via an app >>>api
mysql exporter doesn work if using mysql exporter only outputs meta no data >>>bug
template overriding is not working via the forum https en ghost org forum themes 173 default partials if add pagination hbs file to partials inside my theme and restart ghost don get the content of my file still get the standard one >>>bug themes
imported published dates shouldn get overridden this was on the forum not sure where but is to do with us setting the publish time to midday >>>bug
keep meta generator tag version number to decimal places currently should be per https en ghost org forum everything else 207 security issue>>>bug
loading partials fails in azure production mode `express hbs` uses `glob` which is incorrectly parsing unc paths and thus causing partials to not be loaded when ghost is run in azure >>>bug
sendmail bug this one has been reported fixed at least twice on the forum here one https en ghost org forum using ghost 263 bug stray character when auto detecting sendmail>>>bug
service aws ghost ec2 config needs updating posting this here just incase there did something wrong when deploying as don want to potentially break something which is already working when running on aws was getting found that this was because we were running the following in upstart my guess this is breaking the `config js` find file code the fix for me was to change the upstart section in https gist github com erisds 3d7b5e2731f56f8617f8 to if this is problem for everyone and not just me ll update the script >>>docs
if someone creates placeholder but doesn upload an image don output it if someone leaves something in markdown and never uploads an image it should output nothing at all in post html to prevent image https cloud github com assets 120485 1190790 7a86c5ba 243e 11e3 971f b494bb335707 png really like to get this into if possible>>>bug media
markdown don autolink urls inside of pre blocks from the forum https en ghost org forum using ghost 75 bug urls inside fenced blocks should not be parsed>>>bug
heroku cleardb no permission to add posts your post could not be saved as draft you do not have permission to add posts from the forum https en ghost org forum using ghost 253 bug mysql your post could not be saved as draft you do not have permission to add posts update it seems that something goes wrong in the creation of permissions on heroku cleardb >>>bug
mysql post tag deletion bugs posts tags relationship is setup with foreign key and therefore have constraints around deletion several issues have been reported on the forum need to get this fixed asap here some of the bug reports https en ghost org forum using ghost 175 delete my first post in ghost on mysql https en ghost org forum using ghost 131 bug mysql er parse error https en ghost org forum using ghost 215 bug er row is referenced mysql>>>bug
cuts off post crashes editor after save from the forum https en ghost org forum using ghost 191 bug script cuts off post crashes editor after save tried publishing following article that previously was served through poet careful german http pastebin com daj48cbp at the part ghost seems to fail after the post is saved when open it again the last visible character of the post is the and cant edit the post the markdown preview is not generated im on using firefox 24 arch linux am doing it wrong or should this be escaped somehow >>>bug editor
ghost sorts by date but ignores time copied some posts out of jekyll test blog by hand and it appears that there is no way to order posts by time only date you could potentially end up with posts being out of order if posted on the same day if im wrong id appreciate some direction if not then consider this feature request https en ghost org forum using ghost 101 publish order only uses date not time>>>bug themes
remove ghost version number from user menu am crazy how did we miss this image https cloud github com assets 120485 1186034 2887b9c6 22dc 11e3 9aff 732919193371 png >>>bug
import framework we need to come up with framework for building apps which import data from other blogs the first one we should support is wordpress wxr format as other blogs such as tumblr already have way to export to that format wxr is an xml format so this definitely needs to be plugin as parsing xml will add bloat to ghost we really don want >>>apps
support links point to wrong place help support leads to http forum tryghost org think it would be most suitable if that lead to http ghost org forum and maybe even opened in new tab https en ghost org forum using ghost 55 bug ghost help support option>>>bug
admin redirect issue just set up ghost on an ec2 instance running behind nginx when log in to admin get redirected to ghost admin which 404s if amend the urn to be ghost it works fine looks like nice simple one to solve https en ghost org forum using ghost 85 redirect issue on logging in to admin>>>bug
kb shortcut for date insertion is borked when in edit mode if you attempt to insert current date ctrl shift if the lettercount of the date string is and odd number the entire interface freezes this is related to line 127 of the markdown actions js file which divides the lettercount by to place the cursor in the middle of the text string believe the solution is to change line 127 from this elem setcursor line cursor line ch cursor ch lettercount to this elem setcursor line cursor line ch cursor ch math floor lettercount this will account for odd length inputs but from user perspective adding the cursor to the center of an inserted date is odd behavior so after line 115 md moment new date format mmmm yyyy adding text true will cause the cursor to be placed at the end of the inserted date https en ghost org forum using ghost 37 insert current date shortcut bug>>>bug
database migration export backup first during the migration initialisation process if migration is needed to be run think it would be good idea to automatically backup first we have an export tool which is capable of generating and storing backup file currently the act of writing the file to disk is part of the `api db js exportcontent` function this will require some refactoring either so that we can call the api function without resulting in also downloading the file or moving the file writing part elsewhere however it is achieved think it would be very sensible to generate backup file before running the migration just in case >>>data
custom theme error template not found should be warning not an error outputting an error is not good idea in this case>>>bug
clicking sign up button does not always redirect to ghost summary of issue clicking sign up button does not always redirect to ghost steps to reproduce follow the steps in the screencast exactly clicking signup does not redirect to ghost https cloud github com assets 4643742 1170420 d1817a12 20d9 11e3 81ae f99390db32a7 gif observed result filling out the signup form and then pressing return will result in the page refreshing and the field emptying and this message post ghost signup 200 2736ms 27b but it does not redirect to ghost additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ea9c50f49eeb511af4a7278b225699e39b6ab2e6 browser chrome 29 1547 65>>>bug
pressing return after filling out old password new password doesnt select change password button summary of issue pressing return after filling out old password new password doesnt select change password button steps to reproduce ghost settings user fill out old password and new passwords with the cursor still in verify password press return observed result change image windows is opened desired result change password button should be selected additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ea9c50f49eeb511af4a7278b225699e39b6ab2e6 browser chrome 29 1547 65>>>bug
hard to see trashcan icon when there is no image summary of issue hard to see trash can icon when there is no image steps to reproduce add blog cover image click incon in the lower left to add by address fill in address of www google com click save click on broken image icon observed result broken image icon to small to display whole trashcan icon screen shot 2013 09 18 at 30 49 pm https cloud github com assets 4643742 1170147 26a65ce2 20cb 11e3 871e 61f29afe9d8f png additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ea9c50f49eeb511af4a7278b225699e39b6ab2e6 browser chrome 29 1547 65 >>>bug
closing few alert messages is ugly summary of issue closing few alert messages is ugly steps to reproduce imported bad database few times each one created separate alert message click on to close one alert observed result when clicking to close alert they all animate and slide down and it looks really bad additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ea9c50f49eeb511af4a7278b225699e39b6ab2e6 browser chrome 29 1547 65>>>bug
importing bad database multiple times stacks failure message summary of issue importing bad database multiple times stacks failure message steps to reproduce export database change email address to not be email address import database it will fail try and import the database again observed result screen shot 2013 09 18 at 06 46 pm https cloud github com assets 4643742 1170098 f51969c4 20c7 11e3 8839 23d09ee0dcb6 png additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ea9c50f49eeb511af4a7278b225699e39b6ab2e6 browser chrome 29 1547 65>>>bug
creating account with password of 123 returns message of please enter password summary of issue creating account with password of 123 returns message of please enter password steps to reproduce with new db go to signup enter name and email addpress enter password as 123 click signup observed result red alert message appears saying please enter password desired result when entering password of 12345 message appears saying your password is not long enough it must be at least chars long additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ea9c50f49eeb511af4a7278b225699e39b6ab2e6 browser chrome 29 1547 65>>>bug
test deploying to windows azure we don imagine it going to work but it would be good to know what the blockers are and whether they can be mitigated in some way >>>docs
proposal expose ghost as reusable express middleware it would be cool if ghost could be installed as an npm module and then used as middleware in any express app so you could do something like notably both the content directory and the url it is served from are configurable here it could also be interesting to experiment with allowing the front end admin interface and public api to all be served from separate custom locations this would allow all sorts of possibilities such as having multiple ghost blogs in the same server and embedding ghost as part of larger cms product obviously this would need to be in addition to it working standalone but don think that would be too difficult to manage the standalone version could just be thin wrapper around the middleware version thoughts >>>server
of the image tests fail on windows admin controller uploader valid file can upload two different images with he same name without overwriting the first actual expected content images 2013 sep image jpg at object assertion equal ghost ghost node modules should lib should 303 10 at object ghost ghost core test unit admin spec js 121 33 admin controller uploader valid file can upload five different images with the same name without overwriting the first actual expected content images 2013 sep image jpg at object assertion equal ghost ghost node modules should lib should 303 10 at object ghost ghost core test unit admin spec js 138 33 >>>bug
lots of content will mess up the editor sometimes the content will not be loaded into the preview pane on the content list see the gigantic gif file below fast scrolling https cloud github com assets 1196299 1163101 aba4b454 2033 11e3 87b8 759c1771f1ca gif there no console error and the data comes back on navigation env server client mac osx 10 node 10 18 latest commit https github com tryghost ghost commit 65e00f8418e9d09e28ae714f2b6dbd184bad05d1 borwser chrome 29 1547 65 >>>bug
usability clicking on post settings labes does not shift focus to appropriate field summary of issue the labels for the pub date and slug post settings fields do not actually tie to their input fields so tapping clicking on them does not shift the focus to the corresponding input field steps to reproduce navigate to the content editor via new post click the settings widget in the bottom right hand corner tap click on the pub date label observed result focus is not shifted to the pub date input field additional information client os windows professional x64 server os vagrant box node version v0 10 latest commit f661ad9a63ab3752fb56fefa49544cd472f788b0>>>bug
published date appears to be updated every time the field loses focus summary of issue just focusing on the published date field in the post settings widget and tabbing off of it triggers successful update of publish date notification even though the value has not changed note believe this is because we are doing string comparison of the formatted date to the actual iso date string returned from the db steps to reproduce navigate to an existing post click the settings icon in the bottom right click on the pub date field click outside of the pub date field observed result success notification is triggered for the pre existing value additional information client os windows professional x64 server os vagrant box node version v0 10 latest commit f661ad9a63ab3752fb56fefa49544cd472f788b0>>>bug
false success notifications on changing password summary of issue it is possible to receive success notification when attempting to change your account password when in fact the password has not been changed steps to reproduce navigate to settings user enter an incorrect value for old password enter and confirm new password save note you receive success notification signout attempt to log in with the new password note that you cannot but that you can signin with your old password observed result you receive success notification when in fact your old password is incorrect additional information client os windows professional x64 server os vagrant box node version v0 10 latest commit f661ad9a63ab3752fb56fefa49544cd472f788b0>>>bug
de duplicate posts tags and user in importer when importing data make sure that we de duplicate any duplicate tags or posts as determined by their title name if two posts share the same slug and the same title we should consider them duplicate if two tags share the same slug and the same name we should consider them duplicate if tag or post is duplicate we should not import it we should however inform the user that we have done this then with posts if they want to import new one they can manually delete the existing one etc this won be fool proof but chances are if am running an import on my own blog and post has the same slug and title it is probably the same post in the rare case that it is not handling that manually is ok for now in the case of the user there is only one and they should always be merged such that any email address or credentials in the import file are thrown away any bio or other information should overwrite the existing user data this takes away the need to log the user out at the end of an import >>>importer
settings anything should 404 settings pages which don have routes need to 404>>>bug
images don respect max width 100 in firefox weird bug not sure why this is happening image https cloud github com assets 120485 1156913 626b562e 1f95 11e3 9d79 a5da7974f735 png >>>bug
settings menu bugs two issues with this when the settings menu is open the settings icon should be active aka maintain its hover state opening any settings menu inside publish bar should first close all other settings menu inside publish bar eg the screenshot below should not be possible gotdibbs think you re probably most familiar with this stuff at the moment would you mind image https cloud github com assets 120485 1156634 0819cb54 1f8d 11e3 9506 ef6c1f248ce5 png >>>bug
delete post button should be disabled if post is not saved yet on the editor the delete button doesn do anything if you haven saved yet >>>bug
user profile picture fails to be appropriately round setup upload portrait orientation or non square image as the user avatar profile picture the more exaggerated the image dimensions the more obvious the bug expected behaviour the image should be cropped square either on the client side or on the server or it should at least be squashed to shape without care for the aspect ratio actual image failure mode https files app net p1r8swfd png as shown the image fails to fit the bounds of the box overflowing into the content area browsers exhibiting the bug not exclusive list safari chrome 24 firefox 23>>>bug
share links in casper do nothing need to decide what to do with the little share links at the bottom of the single casper post view >>>bug themes
admin email should be populated by first user signup first user signup email inserts itself into user profile it should also insert itself into settings general admin email address image https cloud github com assets 120485 1153618 15dea04a 1f27 11e3 9a56 a8c7386b37f8 png >>>bug
date from post settings outputs wrong on front end published post changed my date to apr 29 image https cloud github com assets 120485 1153608 b09809b0 1f26 11e3 9859 cdd63fc72e40 png viewed front end image https cloud github com assets 120485 1153609 ba47add0 1f26 11e3 8d56 7c983d9a0085 png cc ericterpstra >>>bug themes
post settings menu is not populated on publish published post opened the settings menu no slug no pub date image https cloud github com assets 120485 1153597 56769d20 1f26 11e3 995b 018da9a7ebc9 png >>>bug
links are the wrong colour in notifications image https cloud github com assets 120485 1153581 f5ff8b3c 1f25 11e3 9691 79845b8a0db7 png should be same colour as text text decoration underline>>>bug
proposal plugin architecture refactor while trying to put together non trivial plugin that required adding routes assets and filters ran into some road blocks here are my notes aggregated up and made into an epic of sorts asynchronous filter changes `ghost dofilter` should allow filters to return promises and be refactored to return promise itself to match the rest of our code `ghost registerasyncthemehelper` should allow registering async theme helpers along with the existing sync ones so that helpers who use `ghost dofilter` will still work refactor core theme helpers to be isolated from handlebars so we can test them in isolation basically just move the functions passed to `ghost registerthemehelper` onto something like `corehelpers author` and reference it that way then update the tests to not rely on handlebars rendering synchronously pass the server to initplugins so plugins can register routes and file assets misc nice to haves provide filter for when post is created saved updated use case is that wanted to add the default kudos value for each post in my new posts kudos table but instead had to check on each prepostsrender filter whether the row existed already provide some way to get the current post id from the client side code for plugin creating tables and data access through knex is kind of wonky is there better way make it easier to check if script is already added like jquery or underscore in `ghost foot` filter feel free to add to this modify have mostly done but will need to rebase on latest ll start moving my code from previous pr into new branch for this >>>apps
404 on jquery min map >>>bug
ghost middleware is registered again and again and again the way that the theme middleware is being registered in `server js` through `ghost inittheme server is actually causing the `app use` and `app set` calls to happen every time request is made to the server this is causing express stack to get massively bloated as each one of these handlers is registered over and over again app stack https cloud github com assets 1540648 1146648 c1718f74 1e75 11e3 9951 b34e7f4785d0 gif >>>bug
usability link to mail setup instructions is not clickable the warning notification about ghost being unable to send email has url in it but it is not clickable >>>bug
refactor to use api for data access one step towards 360 big fat refactor refactor ghost js so that the following data is available with functions in api js only config settings dataprovider settingscache ghost config and ghost dataprovider should be moved to api while keeping initialization and migrations working >>>data
ghost does not quit correctly on sigint ctrl this was reported and reproduced on windows not sure if it happening on other platforms >>>bug
flash of unstyled content on editor page running chrome 30 1599 37 beta and am seeing fouc problem with the new post settings menu introduced in 370 in that it shown by default and hidden on load it pretty noticeable on my computer and should be quick fix >>>bug
regression mobile login styles are broken on latest master when viewed on mobile viewport the login input fields are smaller than the submit button >>>bug
regression signup notifcation bug if you try to create new user without name blank notification appears>>>bug
settings creation from 567 when specific setting is requested via get if it isn found we check to make sure it isn specified in the default settings json if it is we return the default value and load that into the db when trying to create settings via put post if setting is not yet in the db we should again check if it is specified in the default settings json if it is we should create it but with the supplied value if it isn we probably should not create it for now we can add advanced permissions later for creating new settings although it really shouldn be necessary as apps will have their own place to create settings >>>data
migrations update importer for new data model after 632 will need to update the importer remove the old ones >>>data
migrations export one exporter to rule them all use raw sql queries to list the tables dump them all think we can flatten export down into single simple tool by querying the database and asking what there we will have data version stamp which we can put in the meta data and recommend also adding the ghost version number just in case >>>data
migrations fresh install first run is different to an upgrade from 482 migrations should deal with fresh install differently to an upgrade including managing fixtures and settings being loaded 731 they should also throw sensible error messages if the currentversion is too high or not readable currentversion should be kept track of by the migration controller currentversion should probably be renamed to databaseversion>>>data
migrations fixtures load on fresh install only from 482 fixtures should be one file which is loaded on fresh install of ghost now that settings are separated it is much clearer that this makes more sense fixtures should be loaded via `bookshelf` rather than using `knex insert` we should eat our own dog food and ensure our models are correct >>>data
html in notifications is not rendered looks like notifications with html in them are not displaying correctly notification with html https www evernote com shard s8 sh 315689db 868b 4dca 9ee5 d67393350921 5378772b3eb3be23982ed58d2b46dc06 res 7a990f36 15cd 4e30 bbd1 1090039b52f8 skitch png >>>bug
fucked up icons on firefox image https cloud github com assets 120485 1140430 fccbc1ee 1c9e 11e3 930f 605aaa284681 png >>>bug
set default user and post language to the language from settings users and posts both have concept of language currently populated with the database default which is en us we want to override this default with the default from settings >>>i18n
minor bug rss uses database version rss uses database version as generator version number `generator ghost ghost settings currentversion value` software version is not available atm >>>bug
tests use the wrong db and delete everything think this is what javorszky witnessed basically the admin spec js tests don include testutils js which is what sets the environment to test this matters loads cos it the first test run but this just shows that the tests were poorly setup >>>bug
few long tags do no display nicely summary of issue few long tags do no display nicely steps to reproduce create new post several long tags observed result eventually the tags fall down to the next line and are unreadable screen shot 2013 09 13 at 12 45 28 am https cloud github com assets 4643742 1136620 899b30de 1c48 11e3 9bdd e9042c203d97 png additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit c82ebb15d8f85c42a9261600b42b8d76e5d19f41 browser chrome 29 1547 62 >>>bug
post title of breaks rss feed create post with the title open rss feed>>>bug
user profile bug scroll bar is now present on right side of window that controls user picture and and full name fields userprofile https cloud github com assets 4405395 1125910 67f2d7b8 1b1a 11e3 8f04 1bfc1ee53c8f jpg >>>bug
wip be smarter about how we line up markdown code with the live preview unfinished there case where the ends of the scroll panes don line up submitted for review comments fixes 481 fixes 535 currently we sync these two panes by working out how many the user is down the left pane and extending that ratio to the right side this is good enough for text but in long posts or those with elements like images it can go askew these changes split both the markdown and the preview into sections divided by headings it determines that the user is percent through section and then applies that same scroll to the other pane complications rather than interfacing with codemirror itself it scans the html that codemirror creates for optimisation reasons codemirror pages content in and out as you scroll see the viewportmargin option meaning that all the content isn output as html at the same time to combat this there is now shadow codemirror on the page which is direct copy of the main one except that it full size invisible and used only for measurements regenerating the entire html of codemirror can slow down on long documents so this can be regenerated with every scroll event in order to make scrolling silky smooth the shadow is therefore only regenerated when the user makes change that affects the height of either pane it is now bi directional you can scroll either side this feels awesome to use but means that you can scroll them independently if for some reason our calculations screwed up you wouldn be able to manually scroll the preview to where it should be suggest that we include little lock icon that fades in when you scroll the preview clicking the lock would unlock the preview so that you can move it independently obviously this is design detail and is up to johnonolan it not throttled debounced at the moment need to test across browsers and devices and see whether this is needed expect it is even if it with tiny duration otherwise it could be good move to use requestanimationframe >>>editor
bug profile picture with clean database if user starts ghost with clean database the profile picture defaults to johns pic after saving user settings for the first time the profile picture is changed to the heart pic steps to reproduce stop ghost server delete the database `core server data ghost dev db` start ghost server open admin local tryghost org ghost settings user https cloud github com assets 539213 1121111 fc54a650 1ab8 11e3 83d1 e51d2545ed12 png >>>bug
editor markdown parser is very eager to make things italic look at the section between the windows bulletpoint and 10 happy to blame markdown for this but in that case we need to fix our introductory post screen shot 2013 09 11 at 01 36 02 https cloud github com assets 91115 1119515 6d5cb520 1a7a 11e3 9f09 e18cffe45832 png only noticed this because it broke my scrolling logic which atm expects headers to be direct child of the markdown preview>>>bug
can spawn multiple passive notifications at once setup calling `ghost notifications additem item multiple times with different items expected behaviour multiple notifications pop up at the top neatly stacked actual only the last one pops up reason `core client views base js 180` uses html` instead of append` or some such append` would then clash with existing styling and animation needs deeper look >>>bug
loading cat gets confused on slow connections using charles proxy http www charlesproxy com latest release download do to simulate slow connection on localhost loading cat appears after the image has loaded cat bug http cl ly items 0o0j1f0w0s1m0o1e1e3u uploadbug gif >>>bug
modals are not centered again why are we constantly having this issue thought we were already using bootstrap modals which reliably solve this problem is that not the case this is such basic thing we literally do not have time at the moment to be screwing around with it for this long modalbug https cloud github com assets 120485 1105358 3a99bc5c 1924 11e3 8379 fb9b97db5209 gif on load not centered after opening closing dev tools centered >>>bug
cannot save post first time if it has tag thought already raised this as bug if post has not yet been saved for the first time and you add tag straight away it cannot be saved but throws the error cannot call method related of null this is because the updatetag code in the server side post model assumes that post has already been created >>>bug
theme switcher doesn work unless server is restarted changing theme save expected behaviour refreshing front end shows new theme actual behaviour front end maintains current theme until server is restarted>>>bug themes
login form is not present in the source in the source of ghost signup image https cloud github com assets 120485 1103192 92306812 188e 11e3 9251 eb973f2f78f1 png this is completely inaccessible to screen readers any other accessibility devices which is reasonably serious concern >>>bug
random flashbar div in source of login and presumably rest of admin what is flashbar why is it here why does it need to exist at all why is it empty image https cloud github com assets 120485 1103182 186acec8 188e 11e3 8bd0 0c842e747124 png >>>bug
mental number of http requests to js files on login and presumably the rest of admin image https cloud github com assets 120485 1103176 8c4c6636 188d 11e3 9919 bde19d1755f4 png >>>bug
markdown output jumps around like monkey on crack when writing in italics expected behaviour preview remains in italics even when typing space between italics tags actual behaviour italicbug https cloud github com assets 120485 1101169 752f507e 17ae 11e3 83b9 90fbdb4d3180 gif >>>bug editor
keyboard shortcut for italic inserts instead of realise that both italic and italic are supported in markdown but prefer to keep us to the simpler defaults of italic and bold at least for keyboard shortcuts currently on the editor when you press `cmd i` it generates underscores this should be changed to asterisks >>>bug
tags automatically get converted to lowercase reproduce enter new tag about ghost press enter expected result tag is created as `about ghost` actual result tag is created as `about ghost` tags should maintain the capitalisation which they were originally given eg if tag is entered for the first time as ghost and later in another post the user enters ghost it should autocorrect to ghost obviously we don want duplicate tags so we want to check if tag already exists regardless of capitalisation and match it if it does cc skattyadz know this issue has been around since before you were working on tags but you re probably most familiar with this area and might have some ideas >>>bug
server side image upload refactor at the moment ghost image uploads are thrown straight at the local file system this is great and exactly what we want for standard ghost no config of an external system required however it does pose problem for hosting most node hosting platforms do not persist the local file system and this will be true for our own platform the server side part of accepting and handling uploads along with the retrieval of images needs to be refactored such that the local file system handler is module and is the default image upload handler the handler should support upload post requests retrieve get requests and delete requests but not modify the handler should store the files in an immutable fashion using unique filename closing 619 ghost should then be wired up in such way that if another handler is configured it will use that but otherwise it will use the local file system handler by default for all requests to store or retrieve an image there no concept of delete in the ui yet we will also need to implement different file upload handler but the details of what it should do and whether or not it should be core or plugin are not yet confirmed >>>apps
regression delete post modal has mis aligned buttons screen shot 2013 09 05 at 10 33 35 https cloud github com assets 367517 1087100 46ac4e92 160e 11e3 9982 ee9a3020a5ef png this is caused by https github com tryghost ghost commit e61f3684d55097fcaf772b3f211aea2fe5a94d9d l2l1024 ll fix this as soon as can >>>bug
blog title not outputting in footer blog title is being used in number of places in casper and outputting in most of them the one place where it does not seem to be working at all is in the footer located in default hbs where it refuses to output anything can work out why>>>bug themes
registering new user bug super vague bug report when registering new user and pressing enter nothing happened expected behaviour should be immediately logged in per skattyadz pr while back or at least something should happen actual behaviour nothing happened upon clicking the register button again received you can only register one user error possible cause the log me in immediately after registering function is bound to the register button instead of the form submission >>>bug
remove the nav helper remove the helper filter tests and config for nav >>>themes
feature generate sitemap xml updated 26 jul 2014 john to support seo ghost should generate sitemap xml the best format for this is likely to follow the work of yoast and his seo plugin for wordpress which creates separated xml sitemaps for different content formats brought together in main xml file and served through an xsl template this has been widely tested and updated over the years demo http marketplace ghost org sitemap xml for us the sitemap structure would be index posts pages contains home tags authors these should be generated once and saved in the filesystem when post is published or updated it should update the posts sitemap when page is published or updated it should update the pages sitemap when user is created or updated and so on >>>feature
weather widget research http simpleweatherjs com >>>apps
bug enhancement image upload overwrites existing images the filename of uploaded images is not unique as result it is possible to overwrite images with newly uploaded images that have the same name this applies if multiple images with the same filename are uploaded within month steps to reproduce create new post and insert image `test png` image is uploaded and stored in the folder content images 2013 sep test png` create another post and insert different image with the same filename image is uploaded and overwrites the previous image >>>bug media
regression something has gone horribly wrong with the styles on the user settings page this really shouldn look like this user settings http cl ly items 3h3r2g230l3j1k0w2c1h image 202013 09 02 2023 3a26 3a37 png >>>bug
post with image markdown displays broken html summary of issue post with image markdown http displays nothing in preview but shows broken html on the frontend steps to reproduce create new post add image markdown publish the post view the post not in ghost content but on the homepage observed result broken html is displayed screen shot 2013 09 02 at 05 26 pm https cloud github com assets 4643742 1069478 5ee1b324 141c 11e3 85fa 1a6e63f738c0 png additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 13646f9ef6a5ac6100f3b4286e2efabd6a4bf436 browser chrome 29 1547 62>>>bug
epic casper casper is nearly done this issue is final list of the things remaining remove concept of blog icon for now settings image uploads 432 281 in progress 571 add concept of blog cover photo 389 theme helpers epic bugs 591 592 593 599 >>>epic themes
create default of publish date if no date is passed to date helper currently date requires date to be passed to it for formatting it would be nice if by default we could simply enter date and assume the following options as defaults date published at format dd mmm yyyy `>>>themes
create prefix and suffix attribute for tags helper tags need concept of prefix so that they can work in themes even if no tag is assigned to post eg image https cloud github com assets 120485 1065980 be7b8f42 13a6 11e3 83cf ac8efc604caa png to my mind this should look like tags prefix in and if no tags are present of course nothing is output at all so in the context of the screenshot above you would just see the date >>>themes
migrations column modification long term we are probably going to want to be able to change the name and constraints on columns ideally the resolution for this issue would be to close the issue raised on knex js https github com tgriesser knex issues 46 >>>data
after logout username and password fields move when notification dissapears summary of issue after logout username and password fields move when notification disappears steps to reproduce log out of ghost observed result login fields move https cloud github com assets 4643742 1064564 13b9e41a 133c 11e3 9657 72d43514c5f1 gif desired result don think the notification should affect the placement of the login fields only reason even noticed it moving was when attempted to click into the field as it moved and missed additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit d2cafe87b642ca78ac99bd28af1a049673118612 browser chrome 29 1547 57>>>bug
signing in and then pressing the back button takes you to ghost signin instead of ghost summary of issue signing in and then pressing the back button takes you to ghost signin instead of ghost steps to reproduce sign in ghost is loaded press the browsers back button you are taken to ghost signin message displays that says you were successfully logged out now enter the address ghost observed result when logged in entering the address ghost signin redirects to ghost pressing the back button right after logging in successfully takes you to ghost signin and says you were successfully logged out even though you were not actually logged out additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit d2cafe87b642ca78ac99bd28af1a049673118612 browser chrome 29 1547 57>>>bug
rss feed provides incorrect link to posts summary of issue rss feed provides incorrect link to posts steps to reproduce look at rss mine contains http localhost 2368 my config js has url host www ghostqa com port 80 >>>bug
image shortcut should input new line before ctrl shift should insert http `>>>bug
allow control of posts per page currently posts per page is set to 15 ideally this should be user configurable via settings input if this is too much to do for let at least set the default to and then punt to 4>>>data themes
there should be no concept of page from the homepage of ghost install click onto older posts you are taken to page now click on newer posts you are taken to page which exists and is working thing problem page should always redirect to it duplicate content across multiple urls otherwise which is bad for seo problem pagination when on page should link to not page `>>>bug themes
body class outputting wrong data on paginated view on site com page body class outputs `post template` it should output `archive template` if possible >>>bug themes
broken notification positioning on login image https cloud github com assets 120485 1064165 6d2db53e 1315 11e3 997a 4589d7b3a3c2 png have feeling this may have something to do with matthojo removing some styles on in an old issue for centering the login form vertically it should be 15px offset from the top of the viewport like normal >>>bug
modularise the client side code node has lovely module system unfortunately browsers don yet however in my experience large single page apps really need one there are number of different ways of doing this option amd modules advantages modular code no compile step needed during development the requirejs optimiser can combine module into one file for production really needed for performance especially on mobile amd loaders support commonjs module syntax with two line wrapper useful for reusing code between client and server disadvantages learning curve we could possibly discourage contributions with the added complexity boilerplate code although it really not that much ll keep adding more options as they are suggested what do people think >>>ember
mobile editor ui tag ui is borked summary of issue trying to add tags on the mobile ui is fun things disappear off of the screen and break in interesting ways steps to reproduce load the markdown editor on mobile hit the tag icon and start trying to add tag observed result the cursor drops down line mobile broken http imgur com lcwpj7k png sometimes it ends up looking really broken haven figured out how to reproduce this reliably mobile broken http imgur com z30pxk2 png if it gets into the state above when you click done you see this mobile broken http imgur com g77ubpp png desired result tag editor should stay in line and nothing should ever appear below it perhaps there should be some fancy mobile specific ui johnonolan additional information phone info iphone 4s ios using the built in safari browser>>>bug mobile
mobile editor ui notifications aren on screen when saving draft etc summary of issue when saving post on my mobile phone can see the notification steps to reproduce load the markdown editor on mobile write few lines of text so that the title is no longer on the screen it should look something like writing post http imgur com liwbwe4 png press the save draft button observed result the screen moves down little and the title becomes visible because of the notification but the notification is not visible it looks like saving post http imgur com 1pzvus8 png desired result on mobile the notification should probably always get overlaid at the top of the visible screen additional information phone info iphone 4s ios using the built in safari browser >>>bug mobile
create introductory features for new users look into options to introduce new users to the admin interface something like http linkedin github io hopscotch via gotdibbs >>>installation
urls aren being parsed properly in the markdown text it looks like our markdown parser is getting stuck when it sees url see this screenshot of the introductory post http skatty me r6c2 >>>bug qa
delete post button on content admin view displays text all jacked up when you click on the actions widget on the far right and the delete actions shows up it sometimes on some machines shows up with weird line breaking in the word such that almost every letter is on its own line personally experienced this in chrome will update the issue with my exact version when get home and screenshot as cannot reproduce this on my other computer >>>bug
move url from settings to env config there is currently url setting in the fixtures but no way to edit this we want to remove the url from there and instead have it defined as part of the environment config this allows people to specify the correct url for their blog in various environments it should be set to the same as the host and port number for each environment by default >>>data
add new blog cover photo setting we need new setting of blog cover photo on the settings page along with icon and logo need to think about how to do this without requiring database migration and in lieu of 567>>>data
settings api separate default settings from fixtures this is related to 482 migrations being pita and 360 big fat refactor settings are kind of special thing they are not at all like the other models in the database they have clear set of pre propulated rows key value pairs and their presence is something the app needs to be able to rely upon rather than using iterations of fixtures to update and add settings we should have clear place way of defining what the required default settings are what their default values are what their validation rules are and whether or not they can be overwritten during an import currentversion should not be for example whenever setting is requested if it doesn exist in the cache database lets check the settings definition add it if it is present the validation rules can be used in the validate method on the settings model to check that given value is permitted for specific keys perhaps if this was shared it would also be possible to use the validation rules to validate in the client once this is done settings can safely be removed from the fixtures >>>data
settings pane pressing back goes to settings pretty sure this is new bug probably due to my if statement in the router for settings but when you go to settings the first time it takes you to settings general and then the back button takes you to settings the back button should take you to where you were before settings >>>bug
restoring form data on editor panel did you ever type out big long post in the ghost editor accidentally hit link back button or close the tab and then get it back to find you ve lost everything did you ever type out big long comment issue on github accidentally hit link back button or close the tab and then get it back to find your comment issue still waiting to be submitted believe that this is browser behaviour which depends on certain things something about the way that codemirror works doesn work with the behaviour that or there is some fancy thing on github that we should emulate at the very least like someone to investigate why ghost editor doesn exhibit this behaviour and github does and what the requirements are for fixing it >>>editor
regression ctrl keyboard shortcut is broken the ctrl keyboard shortcut is throwing the following error in the browser console >>>bug
excerpt gets confused when html tag is at the beginning of content `strong the relationship between words and their meaning is fascinating one and linguists have spent countless years deconstructing it taking it apart letter by letter and trying to figure out why there are so many feelings and ideas that we cannot even put words to and that our languages` steps to reproduce write new post that starts with some stuff in bold expected outcome normal text is displayed in excerpt actual outcome excerpt begins with `strong `>>>bug themes
notifications are too long currently notifications do some fancy shit with the post title `your post some very long post title that wrote that is long has been published there are problems with this the notification doesn appear for long enough for me to actually read it on mobile devices this thing unnecessarily spans multiple lines let keep is simple just `your post has been published think this is more useful to users easier to understand and more flexible in terms of layout >>>bug
editor scrolling gets stuck when typing lots of text image https cloud github com assets 120485 1023186 57780370 0dd4 11e3 978a 29eb0e3f0abb png when writing lots of text you get to point where you reach the bottom of the text box and you keep typing when the preview is longer than the markdown you can no longer see what you re typing you have to keep manually scrolling the panes down this could do with some love >>>bug editor
fancy quotes are borked in ghost admin editor markdown panel image https cloud github com assets 120485 1023156 683a42b6 0dd1 11e3 837d fc2e82a963a5 png >>>bug
ghost native jquery should be 10 rather than quite an important one the version of jquery that we ship with ghost to be used by themes and plugins should be downgraded to 10 which supports ie7 and we may not support those browsers in ghost admin but we can guarantee that people won want to build blogs for an audience that does still use those browsers >>>bug themes
in excerpt convert new lines to spaces if you view the source the excerpt looks like image https cloud github com assets 120485 1022914 19d18f28 0dbb 11e3 8622 fd847f7c4278 png would be nice if it looked like image https cloud github com assets 120485 1022920 3f178a76 0dbb 11e3 87ee e69c1b4df4d0 png >>>themes
theme api make nextpost prevpost available to themes we need to have some way to get hold of all the details of the next and previous post on the post page this means providing access to all properties of those two models through something like nextpost title nextpost >>>feature themes
theme api url handlebars helper when in the context of post this helper should output slug users will soon also have slugs and so will tags but none of this is available yet therefore the helper should check that it is definitely in post context and only output if it is once we get tag pages and user pages we can add those urls in >>>themes
ghost install in sub directory support we want to support sub directories so that someone can feasibly install their ghost at myurl com blog parse the subdirectory out of the config url fix up ghost to then honor that sub directory where necessary this includes in the url theme helper 528 and probably most of the internal paths it would be awesome to do temporary public demo install of this feature so it can be thoroughly tested >>>qa
invalid helper usage crashes ghost completely steps to reproduce in the currently active theme call helper that doesn exist eg fuck what follows is error missing helper fuck some shit npm err weird error npm err not ok code and ghost craps out completely this error should definitely log to console but it shouldn crash all of ghost if someone happens to make typo in theme helper >>>bug
explore fastclick http labs ft com articles ft fastclick >>>mobile
verify license of all ghost dependencies we ve been adding libraries here and there on pretty ad hoc basis both js as well as sass and css it important to note that as an mit project we can use any other mit bsd or apache licensed code but not gpl this issue is to verify and document every ghost dependency and their respective license which we will then put into wiki page >>>docs
regression the publish button is fucked 438 introduced very nice interactions but also completely destroyed the publish functionality editing an existing post causes the publish button to read publish now should read update post clicking on it fires an error of object object it is also not possible to unpublish or do anything else with the post one minor addition missed in 492 that was part of 385 is that the chevron pop up arrow spins on hover but does not un spin when hover is removed wrote all the code for this so it should already exist and work not sure what going on there >>>bug
creating new posts at speed will return 404s summary of issue creating new posts at speed will return 404s steps to reproduce used selenium ide in firefox with this https gist github com aboutte 6329351 change to your base url run that at speed observed result ghost can keep up for while but will start returning this message the server returned an error 404 additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 590ba48988b51b9c5e8d99afbb84c997436d7f21 browser chrome 29 1547 57>>>bug
post delete button displays vertically summary of issue post delete button displays vertically steps to reproduce go to ghost content in chrome select post click the gear in the upper right observed result the delete option displays vertically see screenshot screen shot 2013 08 24 at 10 46 27 am https cloud github com assets 4643742 1021170 0b4f88ea 0ce6 11e3 9467 ef1275b8e263 png additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 590ba48988b51b9c5e8d99afbb84c997436d7f21 browser chrome 29 1547 57>>>bug
after new db creation non logged in use can delete posts summary of issue after new db creation non logged in use can delete posts steps to reproduce login to ghost stop ghost mv core server data ghost dev db core server data ghost dev tmp start ghost go to content tab select post click gear in upper right delete the post observed result with being logged in can successfully delete post additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 590ba48988b51b9c5e8d99afbb84c997436d7f21 browser chrome 29 1547 57>>>bug
clicking publish now with no post title reset button to save draft summary of issue clicking publish now with no post title reset button to save draft steps to reproduce click new post change action button to publish now click publish now observed result message displays that says you must specify title for the post action button resets to dave draft desired result action button should remain on publish now additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 3209a960290c3a5373be52507bb7dd3ad4af526e browser chrome 29 1547 57>>>bug
weird files in root level of ghost still have not been able to track down when these files are created or what triggers it but they have appeared number of times over the last week here are several of the files that found today https gist github com aboutte 6311396>>>bug
there shouldn be validation on login currently login email address and more importantly the length of password is validated which is causing issues >>>bug
theme switcher requires 107 for we will have no fancy theme selection ui we re just going to keep it simple to start with we will just allow theme selection via dropdown menu under `settings general` this dropdown menu should be populated with list of the directories which currently exist under `ghost content themes` selecting one option should update the activetheme setting in the database >>>themes
problems with editor layout breaking on ios device ipad iphone os browse safari ghost version when viewing ghost on an ios device and rotating the screen from landscape to portrait the screen is taken to the right for some reason on an ios device the screen has an overflow on the axis which only occurs on orientation change iphone https cloud github com assets 367517 1001692 08529790 0a70 11e3 8232 0882a6defa28 gif updated to match the actual issue >>>bug mobile
login screen should not be available if logged in if user is already logged in login should probably just redirect to dashboard though actually shouldn the login form just appear on ghost if the user is not logged in and the admin appear on ghost if the user is logged in >>>bug
migrations are right royal pain in the arse the migration system is convoluted undocumented little corner of hell please help me out by discussing how we can improve it don get me wrong it works and it works really quite well however it seems that it is tricky to understand what is going on and on top of that getting migration fixtures file import export setup just to change tiny property on the db is ridiculous think we need to break this whole problem down into smaller chunks which are solved separately and independently then we need to document how this works put into place tools to make it as easy to do as possible the following is brain dump of all the things know to be true about the current system along with some ideas on how to improve it it pretty big topic so discussing various areas suggestions for improvements may need to be done by creating new issue for that idea migrations migrations are what we call changes to the database schema however the schema itself is defined through the magical method of series of migrations there is nowhere that the entire schema can be seen and understood apart from my magical gist https gist github com erisds cd0f3d33072410309f37 think migrations are really two problems the database schema as it must exist to run the current version of the code how to get there from older versions of the database at the very least think that at this stage we are and need to be moving much faster than we can with this system in terms of db changes so think it would be good idea at some point before the so called release to stabilise the schema create version of ghost which upgrades to the stable schema and then in the next version flatten everything down again remove the upgrade path this might mean for example that is in fact the stable schema version and that anyone just us our vips atm on must upgrade to before they can upgrade to any version would then become the version we release to ks backers ks backers would get nice clean migration system vips would have to jump through the hoop or start fresh install fixtures fixtures are the default data which should exist in fresh db at the current version of the code the data relies on the structure so they can only be inserted once we have reached the correct structure upgrading fixtures is strange problem that think has been misunderstood fixtures should only be for the initial state of the db it is expected that the user will overwrite them and therefore we cannot change them later if we decide we want the fresh install state to be different then we simply change the fixtures however at the moment we are using fixture upgrades to add new settings which are required to be present and this is the only thing we are using them for think this is indicative of completely different problem settings as they stand cannot really be added through the api additionally apart from the fixtures we have no way of describing the settings which are required what sort of data they should contain and how to validate them think lot of problems could be solved by improving the api for settings having definition of required settings their default value their validation rules if they are not overridable see import and then having way to request setting which if it is not present adds it with it default setting update we do also want to move away from using these fixtures as test fixtures and only use them in tests if we are testing the fresh install state export export is json dump of everything in the db so that the db can be recreated later if something goes wrong at the moment the only thing that is different between different versions of export is the list of tables which are present this information should be accessible by doing some raw sql queries to list the tables believe think we can flatten export down into single simple tool by querying the database and asking what there we will have data version stamp which we can put in the meta data and recommend also adding the ghost version number just in case import import is slightly different ball game to export bringing data in is bit harder as we need to know what version of data we have and what version of database schema we have and how to get from one to the other we also have to know bit more about the structure type of the data we are importing at the moment there are set of rules which are something like if it is post strip the primary key and insert effectively appending posts to the current ones if it is user overwrite the current user this ensures that there is only ever user of id it will break if there is no current user but then as import is run through the interface you have to have logged in to do it if it is setting update the setting value if the key is present otherwise insert it unless it is the currentversion setting in which case do nothing as this setting must not be overridden for anything else strip the primary key and insert it these rules are reasonably sane and the way the import is written there is very little reason to have any more than importer in the case that this changes we could expand the import system but for now believe it can be flattened for example if we finally update the users to work for multi user we can change the importer at the same time and any user importing to that version will get the correct functionality summary the user can only ever be on single version of the codebase which has single version of the database schema thus all each version needs is to be able to handle getting to that version from any earlier version the code we have achieves this but think it little bit complex and have the feeling it bit backwards it seems to be focused around pushing from nothing towards new version when in fact we should be pulling users into the right version from wherever they are it subtle difference that not articulating very well thoughts >>>data
editor ui scroll events are not smooth from 22 john this has become massively laggy horrible for me think due to 297 matt the debounce stops the advanced scrolling from happening on every scroll event fired this is probably the reason why it feels laggy it should improve performance so it is case of finding the right amount of timing between each update so it stays visually smooth think we possibly need to switch to throttle or take the debounce throttling off entirely if performance is better that way >>>bug editor
redirect loop when ghost has no content there mad redirect loop that goes on between page and page ultimately fails when ghost has no public content believe this is to do with the redirection to in bounds pages when an out of bounds page is requested it not handling the no content actually exists case >>>bug
content management preview pane should display post title image https cloud github com assets 120485 999275 78aea572 0a27 11e3 93fa 2aee62deb81e png on the content management screen the preview pane should include the title of the post as an h1 above the post content >>>bug
when rotating ipad from horizontal to vertical on login log in button gets moved summary of issue when rotating ipad from horizontal to vertical on login log in button gets moved steps to reproduce hold ipad on login horizontally rotate ipad vertically observed result when the ipad becomes vertical the log in gets stuck under the email address field ipad horizontal to vertical rotation https cloud github com assets 4643742 998458 f9e330f8 0a00 11e3 872b 8312d2f9a9f5 gif desired result the log in button should be to the right of the password field additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 637679851b30d8f125ba2a40712237fe277d0c5e browser chrome 28 1500 95>>>bug
ghost should not acceptable username summary of issue ghost should not acceptable username steps to reproduce register for user with email address of ghost observed result ghost excepts ghost as valid email address desired result probably difficult to limit to just tlds but definitely want numbers to be invalid additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 637679851b30d8f125ba2a40712237fe277d0c5e browser chrome 28 1500 95>>>bug
theme api bodyclass postclass helpers requires 367 `bodyclass` and `postclass` are two helpers which output useful classes for specific containers they have set of defaults by default `postclass` should output post and also the names of any tags applied to the post by default `bodyclass` should output the current page type one of home or post in future this may also have tag or user plugins should be able to register filter for these lists of classes so that they can change them or add their own >>>themes
theme api option to sanitise content excerpt when want to output list of posts on my blog homepage with 50 word excerpts with content words 50 run into bit of problem image https cloud github com assets 120485 993921 b365be5a 09a3 11e3 8616 cac26ef68078 png it taking the full html content of the post limited to the word count and spitting it out this obviously doesn work quite how want it to in this context which is effectively post excerpt in wordpress you have `the excerpt which strips all html tags and images and returns sanitised content inside single do we want to introduce excerpt words 50 which returns content words 50 without any html tags or do we want to add an option to sanitise like content striphtml true words 50 personally in favour of excerpt >>>themes
email address and password fields on ipad are not centered summary of issue email address and password fields on ipad are not centered steps to reproduce go to login on ipad observed result the email address and password fields are favoring the right hand side see attachment login screen on ipad login screen on ipad https cloud github com assets 4643742 990753 9282e494 093d 11e3 9138 efea6f2df1e1 png the email address and password field become centered as soon as you put character in the email address field desired result centered fields no shifting of fields additional information client os ios in simulator and ios beta server os centos node version 10 16 ghost build number latest commit ae3b1ac6353ec1023b76dbd95e32c24ad5fad7b2 browser chrome 28 1500 95>>>bug
email address field on login defaults to capitalization for first character on ios summary of issue email address field on login defaults to capitalization for first character on ios steps to reproduce navigate to login on any ios device tap in the email address field observed result ios defaults to capitalizing the first character which will confuse lot of users into thinking their username or password is incorrect desired result something like this should fix it additional information client os ios server os centos node version 10 16 ghost build number latest commit ae3b1ac6353ec1023b76dbd95e32c24ad5fad7b2 browser chrome 28 1500 95>>>bug
post title that starts with space has at beginning of url summary of issue post title that starts with space has at beginning of url steps to reproduce create post with the title post title observed result the address for this post is post title desired result strip out space at beginning of post title when generating url additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 892adf68d7ac41b8f9aee6a6d0c9dab69378d69f browser chrome 28 1500 95>>>bug
negative value pages are allowed summary of issue negative value pages are allowed steps to reproduce go to http ghostqa com page click on new posts button observed result the address changes to http ghostqa com page at the bottom of the page it displays page of additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit ae3b1ac6353ec1023b76dbd95e32c24ad5fad7b2 browser chrome 28 1500 95>>>bug
drop image initially came up with image as way of differentiating between different media types explicitly however following recent discussion think it makes more sense to stick to the markdown native and do the format detection behind the scenes >>>media
modals breaking editor footer opening the modal on the editor screen in latest chrome modal opens footer of editor disappears resizing the viewport causes footer to magically re appear bugtastic can you reproduce >>>bug
image uploader height is borked setting opacity does not remove an object from the flow of the document as such it still takes up space within it image https cloud github com assets 120485 984729 4bfec006 08a7 11e3 91d8 4005c3454b59 png >>>bug media
flashes hbs notifications hbs thought this was done in 37 but could we rename flashes hbs to notifications hbs pls >>>bug
kill stupid text indent rules text indent rules on tags are causing way more problems than they re solving >>>bug
settings subpages break with trailing slash in url ghost settings general` works ghost settings general breaks and doesn load any data related 379>>>bug
logout signout the current signout url is logout because we already use the naming conventions of sign up and sign in it should be signout `>>>bug
large image gets cut off summary of issue large image gets cut off steps to reproduce new post with following in body first line of text observed result in the markdown preview it scales the image and looks correct viewing the post on the live site results in the right hand side being cut off see skreenshot screen shot 2013 08 18 at 59 52 pm https cloud github com assets 4643742 983561 0c2701a0 086b 11e3 97ea 70b34aaaf2bd png screen shot 2013 08 18 at 59 57 pm https cloud github com assets 4643742 983562 0c292f48 086b 11e3 8c5b cef26817d220 png desired result to be able to see the whole image additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 892adf68d7ac41b8f9aee6a6d0c9dab69378d69f browser chrome 28 1500 95>>>bug media
inconsistent punctuation on notifications summary of issue inconsistent punctuation on notifications steps to reproduce publish post with not title publish post with title observed result publishing post without title results in sentence has period at end your post untitled has not been published you must specify title for the post publishing post with title results in no period at the end your post te has been published desired result consistency with punctuation also check the same case with the draft button additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 892adf68d7ac41b8f9aee6a6d0c9dab69378d69f browser chrome 28 1500 95>>>bug
saving draft does not display nice message summary of issue saving draft does not display nice message steps to reproduce create post save it as draft observed result following message is displayed your post has been draft desired result following message should be displayed your post has been saved as draft additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit 892adf68d7ac41b8f9aee6a6d0c9dab69378d69f browser chrome 28 1500 95>>>bug
fancyfirstchar plugin can bork html fancyfirstchar naively handles html such that it will only work if the post starts with no html or single html tag this should be fixed to parse html properly get the first text based character and wrap that character >>>bug
post with as title can not be navigated to summary of issue post with as title can not be navigated to steps to reproduce create new post fill in publish post observed result when generating the address from the title the question mark gets stripped out leaving the address for the post the home page desired result when all characters from the title are stripped out use the post id additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit e765af4633e55c46a3dc62482f76333c00dff929 browser chrome 28 1500 95>>>bug
casper js tests fail on vagrant quick issue to remind myself to fix this the random guestimate waits in the casper js tests are stupid and fail on slow environments like vagrant turn these into `waitfor` calls and all will be resolved >>>bug
error failed to lookup view settings keep seeing this error in my server console it always happens when run the casper js tests but the tests pass cannot remember if ve seen it at any other time have never seen any problems as result just wanna put this here to remind myself to investigate >>>bug
really long body does not display correctly summary of issue really long body does not display correctly steps to reproduce crate new post title it small title looonnnngggg body in the body add lonnnnnngggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg body observed result see attached screenshot the markdown side looks good the preview side has nasty horizontal scroll bar desired result smaller font size additional information client os mac os 10 server os centos node version 10 16 ghost build number latest commit e765af4633e55c46a3dc62482f76333c00dff929 browser chrome 28 1500 95 screen shot 2013 08 18 at 11 26 49 am https cloud github com assets 4643742 982974 fe175678 0833 11e3 8025 672f753d5678 png screen shot 2013 08 18 at 11 27 00 am https cloud github com assets 4643742 982975 fe294e82 0833 11e3 845b a9a9d6e62d3e png >>>bug
markdown keyboard shortcuts do not put insertion point in correct spot summary of issue markdown keyboard shortcuts do not put insertion point in correct spot bold emphasize inline code strike through steps to reproduce use keyboard shortcut for bold ctrl cmd observed result insertion point is after desired result insertion point between and additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
login session does not invalidate with new db summary of issue session does not invalidate with new db steps to reproduce sign into ghost click new post stop the server mv core server data ghost dev db core server data ghost dev db old start the server click publish now on open post observed result when starting server new db created with no user click publish now successfully saves post desired result not really sure here first with new db should not be allowed to access to ghost at all second definitely should not be allowed to publish new content additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
click publish now with no post title changes button to update post summary of issue click publish now with no post title changes button to update post steps to reproduce click new post click on publish now observed result message appears saying your post has not been published button in lower right changes to update post desired result button should remain on publish now additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
list markdown keyboard shortcut will not allow indented child items summary of issue list markdown keyboard shortcut will not allow indented child items steps to reproduce edit content press ctrl and type parent item press ctrl and then tab in to create child item and type child item also tried edit content press ctrl and type parent item tab in and then press ctrl to create child item and type child item observed result both items are parent level desired result using he keyboard shortcut child items should be possible currently the only way is to type the manually additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
attempting to publish post with out title does not give reason why the post could not be published summary of issue attempting to publish post with out title does not give reason why the post could not be published steps to reproduce click on new post click publish now observed result following message is displayed your post has not been published desired result user friendly message explaining why the post could not be published additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
creating content with same name results in ugly address summary of issue creating content with same name results in ugly address steps to reproduce click on new post title post my first post publish the post click on new post title post my first post publish the post click on new post title post my first post publish the post go to content tab and review the address of each post observed result second post gets the address of my first post third posts gets the address of my first post desired result third post should get the address of my first post additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
navigating to page that does not exists results in an empty page summary of issue navigating to page that does not exists results in an empty page steps to reproduce go to page 10000 observed result empty page that displays page 10000 of desired result load the last existing page additional information client os mac os 10 server os centos node version 10 16 ghost build number browser chrome 28 1500 95>>>bug
markdown toolbar on mobile from the forums http vip tryghost org feedback topic markdown toolbar post 419 think one really awesome feature of ghost is that you can write from your mobile devices and also like the idea of writing with markdown instead of wysiwyg editor but writing markdown from mobile device is painful task thats why think markdown toolbar is good idea >>>editor
casperjs tests for mobile interactions and views think we should add some casperjs tests to make sure mobile versions of ghost are working correctly ll update this issue with possible tests to include designs https github com tryghost ghost issues 149 header sidebar sidebar is hidden and not visible header button slides in sidebar on tap links in sidebar are correctly titled dashboard widgets are correct sizes and do not break layout currently broken content preview is hidden default view is post links tapping on post links slide in previews new post default panel is markdown preview panel is hidden there is preview panel header preview panel header when tapped displays the preview settings settings options are hidden default view is settings sections links tapping on settings section slides in right settings options page>>>tests
make ghostdown image regex is bit too greedy currently the ghostdown image regex captures any image which has url and therefore shows the upload form the expected behaviour is that if the user provides url inside the parens that the form dropzone would not be shown and the image markdown would behave as normal >>>bug
ghost is completely broken when not using `node index js` due to path errors in plugin loader js discovered this morning that the latest ghost errors and dies when you attempt to start it through manager such as upstart this is due to the path generation in `plugins loader js` generating invalid paths when not running ghost from its root directory believe the error is due to using process cwd and dirname and attempting to calculate relative path between them however what not sure of is what is the correct approach using process cwd as the root or dirname and knowing the path from the local file any input on this would be appreciated in the meantime am going to attempt to resolve the issue at least short term >>>bug
weird behaviour on dragging an image onto the editor see this screencast http www youtube com watch yksgltzqk7i feature youtu be dragging an image onto the editor shouldn do anything at all unless it does the browser default behaviour of opening the image in new tab >>>bug
image upload ui issue from the vip forum been playing around with the latest nightly awesome btw and noticed that when drag and drop an image into the preview window it adds fine and crops to the width of the preview however when then open up the help modal clicking on the icon the image un crops and flows over the edge of the browser window os mac os 10 node 10 ghost browser chrome 28 1500 95>>>bug
epic theme helpers this is an epic issue for all the theme helper issues in milestone it is assigned to me because it purely here for keeping track of the individual issues will probably keep adding to it and doubt it will be closed until is complete remove helpers nav not ready for this yet 626 name change requests 381 dateformat date would also like an option to return date in format 12 aug 2013 paginate pagination new helper requests globals 172 blog title blog description blog url the base url of the blog blog logo blog cover blog cover image blog themedir url of the active theme directory post data 528 url the permalink next post punted to nextpost queries ghost for the next newest post after the current one if no newer post exists it returns the next oldest post after the current one previous post previouspost queries ghost for the next oldest post after the current one if no older post exists it returns the next newest post after the current one author data 358 author name returns user firstname lastname this is full name` for now author email author url url field from user settings author image profile picture author cover cover image author bio author profile url to user public profile list of posts tags 369 tags should put both tags as well as link to tag archives header footer for scripts styles 382 ghost header ghost footer class lists 472 body class handy classes on the body tag post class handy classes on the post container tag excerpt 471 sanitise content excerpt >>>apps epic themes
publish button does not behave as expected what the publish button does right now says save draft you click on the dropdown arrow menu opens you click on publish the post immediately publishes and the menu stays open what it should do says save draft you click on the dropdown arrow menu opens you click publish publish becomes checked menu closes button reads publish post you click on the button the post is published to see this in action go to tumblr com and write new text post they have this exact same button and it works in the correct way also related 352 >>>bug
theme api header footer for script style output don know if there is an issue relating to this so apologies if so where are we with theme hooks we quite urgently need an equivalent of `wp head through which to output or enqueue scripts and stylesheets as well as meta content like likewise we ll need something equivalent to wp footer to inject analytics codes and so forth >>>apps themes
helper name changes paginate pagination dateformat date `>>>themes
theme helper names could be clearer know there was another issue about this ages ago when it was named something even more convoluted but can find that issue settings title settings description this feels very weird in the context of editing theme files what are these settings where are they coming from is what being output the title description for settings page are these things outputting settings that control the title description think it would be much clearer to go with blog title blog description >>>themes
error thrown on invalid login if attempt to login with incorrect credentials the following error appears on the server console this error should be handled and should never end up on the console >>>bug
theme api post tags new helper requires 367 once we have tags in place on posts we ll want to expose this through the theme api with tags helper most basic form of the helper should output the list of tags as comma separated string more info here soon >>>themes
post tags add to post we now have both the ui and the database tables for creating post tags so it time to go in and make it possible to add tag to post there is user story for this here https github com tryghost ghost wiki write post adding tag the functionality for this issue should be what is written in the user story with the exception of the parts to do with the autocompletion menu which have separated into 368 the focus of this issue should be on making it possible to add tag to post retrieve the tags associated with post and populating the tag ui when editing post adding the api calls necessary ensuring the data model works in sensible way possibly refactoring all the tag ui js into small jquery widget >>>data
mysql support this one is super high priority we need to test switching ghost over to mysql by way of config setting and making sure that it still runs as we would expect provided it all works it would be great to write some documentation on the wiki on how to get started with ghost and mysql so that we have it ready to share >>>data
big fat ghost js index js refactor please note this is in dire need of doing but it is also incredibly sensitive whoever takes this on needs to take care not to introduce bunch of regressions this probably means writing quite few additional unit tests before tackling it there is some discussion of this in 52 my original intention was that ghost js would provide the api used by themes and plugins to interact with ghost registering helpers and filters and such like however it quickly spiraled into dumping ground my fault and now it the place where several things live it also bloody ugly singleton the main things that ghost js now seems to be made up of are app initialisation split between here line 142 of index js and various other modules helpers filters an api for themes plugins an internal api for state properties these things should be much more clearly separated perhaps in separate files modules the app initialisation needs to be more organised perhaps some of it should be middleware the rest of it should be come much more managed such that we have single init function on which we wait in index js if we need to additionally there is the ghost loaded promise in index js that don think we need at all the api for themes plugins should be disentangled such that it can be offered up to themes plugins without them getting all the other crud access to things they really shouldn have the internal api state should be cleanly managed immutable properties should be frozen or managed with closures and providing only getter the singleton pattern should be ditched discussion thoughts and ideas are very much welcome on this one >>>epic
users roll out the acl permissions system probably requires or overlaps with some of 340 would be nice to get our shiny acl system rolled out across ghost in particular focusing on ensuring users have permission when making updates to posts users and settings for now the main user should be granted the administrator role when they are created the administrator role should have all perms we probably have to do some sort of migration on existing users to grant them the admin role because hadn realised that wasn in the fixtures already >>>data users
regression popup dropdown button menus should animate indicate currently active state image https cloud github com assets 120485 924073 efa74168 ff5d 11e2 85a2 1e1ee3771e56 png there should be checkmark against whatever the currently active state of the button is this was previously coded and working should look like image https cloud github com assets 120485 924078 0beaacac ff5e 11e2 9024 02d53ad5ce7f png also the dropdown arrows should animate spin this is another regressions and was fully working previously all the code exists css transforms transitions for this to work >>>bug
dashboard display bugs global things some font sizes out of whack see new psd added to dropbox shared folder in particular footer bar labels widget settings labels widgets should only be draggable by the footer bar clicking dragging any other part of the widget should do nothing the widget footer bar hover state should include `cursor move clicking on widget settings icon should slide in the settings panel from the bottom of the widget overlaying the widget itself dismissing or saving the widget settings should slide out the settings panel to the bottom widget sizing when changing the size of widget the widget size changer menu should remember its new active state steps click on the settings icon of 1x1 widget change size to 2x1 close widget settings open widget settings again expected behaviour 2x1 is highlighted as the active size actual behaviour 1x1 is still highlighted as the active size code cleanup whatever sass rule is generating this is utterly insane and needs to be fixed very urgently image https cloud github com assets 120485 923981 8703671a ff5b 11e2 9011 3405fcfe1d76 png image widget image https cloud github com assets 120485 923963 078ee180 ff5b 11e2 952e de0480393bf9 png the footer that appears on hover should be black semi opaque and have no border >>>bug
regression scroll shadows have disappeared when various content panels are scrolled the floating header should receive sexy box shadow this was working and is now not most obvious place to test on content overview screen scroll the content in the preview pane you can see how the floating header has semi opaque background it should also have shadow when scrolled wrote both css and js to do this in basic way task locate code and get it working again task improve that code>>>bug
word count grammar words word words currently the word count on the preview pane always says words` it should be words word words>>>bug
heading keyboard shortcut issues when adding heading in markdown via keyboard shortcut new line is inserted where it shoudln be steps new doc write something highlight it `ctrl alt 1` expected behaviour word is turned into word cursor moves to end of the line actual behaviour word is turned into word newline is inserted before heading newline is inserted after heading cursor moves to next line >>>bug
markdown help shows wrong keyboard shortcuts markdown help modal is listing all headings as `alt the correct shortcut is `ctrl alt `>>>bug
passive notifications should dismiss between tabs on settings page passive notification should disappear when new page is loaded at the moment notifications do not dismiss between various settings pages as it is not technically pageload steps to reproduce go to user profile settings update password to somthing with character or whatever an error notification appears click on general or content settings in the left menu expected behaviour notification goes away actual behaviour notification persists>>>bug
content security policy know this probably isn huge priority for but we should think about incorporating content security policy https developer mozilla org en docs security csp headers at least for the admin panel and possibly for the user theme too although we ll probably need to give them the ability to turn it off for the theme can protect users from themselves rationale csp is widely supported by modern browsers and is totally ignored by those which don meaning it can damage the experience for substandard uas while csp won stop us from falling victim to xss vulnerabilities it will dramatically limit their scope and severity implementation once we ve agreed on what policy we want to establish is trivial only requiring the creation of an express middleware function which simply sets the relevant headers headers possibly read out of config while is probably out the window for csp we should think about incorporating it before too much development on ghost which might not play so well with csp if not planned for is undertaken >>>later
dashboard widget dragging is broken draggin widgets on the dashboard is broken on master think this is due to the hammer stuff >>>bug
semantic markup fixes for settings page the settings page uses to wrap each editable item inside fieldset this causes issues with performing an image upload as the element has behaviour which is different across the browsers overriding it breaks the upload entirely the structure of the markup should be changed so that label only surrounds the label text and not the inputs >>>bug
theme api themes should be able to override templates used by helpers point from 246 themes should be able to override the template and our core template helper should pick that up and use it instead the idea being that ghost has set of internal templates used by template driven core helpers like nav and pagination but that by providing template with the same name and probably in specific directory theme can override the template >>>themes
get scrollspy working on docs docs under gh pages is using bootstrap see installation page for an example of the default page template this page template should have scrollspy active working to move the little chicklet up down the menu as the page is scrolled just like bootstrap docs http twitter github io bootstrap javascript html do >>>docs
icheck doesn work in safari check boxes do not become checked in safari see http vip tryghost org feedback topic tick boxes in settings not ticking in safari post 204>>>bug
back button breaks settings screen navigate to settings then click content and then click back you ll see both the content and general screens over the top of one another had thought we had fixed this >>>bug
epic advanced post features this is an epic issue for all the advanced post feature issues in milestone it is assigned to me because it purely here for keeping track of the individual issues will probably keep adding to it and doubt it will be closed until is complete data model preparations data model database fixture upgrades 303 tp data model new settings fixtures 314 data model custom post data 171 data model post tags 315 general post improvements paginated queries are too slow 110 models loading defaults for models 116 image upload reusable tool for uploads 280 generate ids in showdown to match with codemirror 295 haunted markdown 39 upload in editor panel 40 save in post haunted markdown 41 markdown breaks with special characters in alt text 146 bug post tags data model post tags 315 custom fields data model custom post data 171>>>epic
epic themes plugins this is an epic issue for all the themes plugins issues in milestone it is assigned to me because it purely here for keeping track of the individual issues will probably keep adding to it and doubt it will be closed until is complete themes helpers naming and api friendliness 246 mini epic content helper part 256 themes should be able to override templates used by helpers 294 move activetheme from config to setting 107 users post author 358 plugins plugin api proper loading activating of plugins 227 >>>epic
epic users this is an epic issue for all the user issues in milestone it is assigned to me because it purely here for keeping track of the individual issues will probably keep adding to it and doubt it will be closed until is complete this epic for users is for setting up proper management of user via the settings screen implementing the acl library throughout the system ensuring that the user feels like the user throughout the admin getting rid of joe bloggs introducing post authors to the themes via helper and any updated and improvements to the user model that are required throughout development of v0 original multi user management screen design http cl ly qfwm individual user profile management screen design http cl ly pdia markup style user profile page 148 editable user profiles with backbone 276 backbonify login and signup screens 278 change password 282 exploring email sending 53 email sending majesty 287 reset forgotten password 288 image upload profile pic and cover photo 281 current user 340 roll out the acl permissions system 357 theme api post author 358 user profile interactions 343 >>>epic
epic interactions styles this is an epic issue for all the interactions issues in milestone it is assigned to me because it purely here for keeping track of the individual issues will probably keep adding to it and doubt it will be closed until is complete semantic markup fixes for settings page 320 bug notifications fix layout across all screens 244 notifications passive success notifications fade out 289 further layout fixes for notifications 300 markup style user profile page 148 markup style plugin management page 284 keyboard shortcuts tp back button breaks settings screen 272 bug on login pageload first field should be selected 217 remove codemirror stylesheet mobile interaction js library 14 modals 129 modal with help content for markdown in editor 247 modal design behaviour tweaks 312 dynamic mobile friendly ui manage posts 149 save publish menu update clean up 194 pagination for content screen in admin ui 258 the content icon is too big 45 bug passive notifications should dismiss between tabs on settings page 342 user profile interactions 343 notification animation 344 heading keyboard shortcut issues 347 word count grammar words word words 349 regression scroll shadows have disappeared 350 regression popup dropdown button menus should animate indicate currently active state 352 casper fixup un scoped ids casper 15 https github com tryghost casper issues 15 >>>epic
using the word ghost triggers output markdown conversion errors reported here http vip tryghost org feedback topic buttons dont have full labels markdown of ghost if you put ghost as title is doesnt show up on the client side its specific to the word ghost host or ghost hosting will work perfectly >>>bug
theme api content helper part point from 246 partially done in 254 we should introduce content helper which will override the content property the html and allow us to give the user options like length or num words or some such we have the first part of this which is returning safe string so that the html can be safely output now we want to add some options truncate length number of characters to display num words same but limit by words not chars more text what to output at the end of the truncated content default would be ellipsis more link where the more text should link to default would be post permalink names of options tbc truncating html strings by chars or words is non trivial googling turns up few algorithms mostly for truncating by chars http jsperf com html text truncate we need to either find util for this or write one either way it would be nice if it was an independent node module >>>themes
theme api content helper point from 246 we should introduce content helper which will override the content property the html and allow us to give the user options like length or num words or some such the important aspect of this is returning handlebars safestring so we don require taches offering length numwords option would be useful>>>themes
theme api rename content fields point from 246 content html is horrible `content` should be come `content raw` and `content html` should become `content` big breaking change alert >>>themes
theme api helpers naming and api friendliness as it stands there are few inconsistencies and oddities with the set of core helpers that we have on offer some helpers require double taches and some require triple triple taches are used to indicate that the content should not be escaped but for helpers which always render html the non escaping should be managed with handlebars safestring the nav and pagination helpers require that an object be passed to them it is always the same object with the same name as handlebars gets given the context it should always have reference to the object and not require it to be passed however the current implementation obscures the context and prevents this there should be common way to override these defaults way to turn off using safestring and to pass in different object for the helper to use handlebars has support for async helpers but we don use it we ve got the concept of helpers which compile and use template which is awesome but the code is being duplicated like to make this available as core feature where we can simply register name function and template name and everything else is done themes should be able to override the template and our core template helper should pick that up and use it instead in 294 it might be nice to make template helpers also be block helpers or is having ways to override little nuts pagination example for this is below content html is horrible `content` should be come `content raw` and `content html` should become `content` big breaking change alert to be done in 253 we should introduce content helper which will override the content property the html and allow us to give the user options like length or num words or some such 254 10 would be good to start keeping list of and raising issues for other helpers we need such as post link author tags etc 11 helpers need more test coverage they re one thing we re exposing to users so it would be good to ensure we can break them or change their functionality without knowing about it 12 `single hbs` should be `post hbs` ghost casper example for is on it way this is big arse issue using for keeping track of theme api related stuff expect to see sub issues in the near future >>>epic themes
notifications fix layout across all screens 37 breaks layout layout changes needed which is probably bit of scss magick >>>bug
update readme and other docs to make it clear how to get ghost running from git the steps including node version if git submodule update etc if build just running and how to use grunt if wanting to change things >>>docs
date inconsistencies causing blog posts appear in the wrong order the dates on the fixtures are in the wrong format and therefore the fixtures always appear first this should be solved by using the correct date format in issue 13 however it seems that dates are getting saved inconsistently seeing them appearing in both 1372343245807 format and 2013 06 28t15 09 46 684z format the fixtures are the latter think dates are supposed to be the former both created at and published at are suffering from this ruling out the timestamping function in bookshelf as the cause have not seen any example where updated at is wrong but that doesn mean it isn possibility >>>bug
slugs should never have multiple hyphens in the slugging function spaces are converted to hyphens this is done lazily when it needs to be done greedily and after the restricted chars are stripped in other words multiple spaces in row should only ever result in single hyphen >>>bug
make docs invisible until generated by grunt groc in 213 we converted docs to be an empty directory until generated by grunt groc this is cool but the empty directory is unnecessary let kill the docs directory entirely and have grunt groc generate it when run move the docs specific css to partial which can be included in ghost core it should be add minimal overhead include ghost core css file in generated docs>>>docs
remove unused settings menu items kill unused settings menu items in the settings menu >>>bug
theme api pagination helper when we fetch list of posts we are now able to do this with full pagination support however the pagination information isn used at the moment we need to introduce new core helper to take pagination information and output basic version of pagination navigation for now the markup and functionality of this should match john onolan org on the first page an older posts button points to the next page on subsequent pages there is both older posts and newer posts buttons and page of info on the final page there is only newer posts button this story will also require 197 and https github com tryghost casper issues 13 in order to be fully working>>>themes
nginx default caching options have weird effect having now played quite extensively with ghost deployed on ec2 it has become apparent that nginx slaps on some default caching rules which aren very useful not sure if what we need to do is update improve the nginx config or specify different headers to return with express connect venture that if we can do the latter it would be better solution as it would apply to everyone all static content css js fonts images should be cached by the browser api requests should not be cached general routes probably shouldn be either >>>bug
theme api foreach column parameter for grid layouts as of 164 we have our own helper for listing posts and other content to build layouts in themes in order to support magazine style or grid layouts we want to add group by or number of columns parameter to foreach `` foreach posts columns `` which will then give us additional properties to check whether an item is at the beginning or end of particular row the purpose of this is so that classes can be added to these items to handle margin and other aspects of layout when creating grids `` title ``>>>themes
settings save gets called multiple times after clicking around in the admin and settings screen few times you find that settings save gets called multiple times there are multiple requests and multiple saved confirmation alerts it seems that for some reason whenever you change between the general and content tab the click event for save gets bound again the two buttons have the same classes but live in different contexts so don think this should happen thought backbone bound events in context to the el of the view >>>bug
api caching layer it widely agreed that ghost should be very heavily cached on the frontend to that end we need to implement caching layer across the api to limit calls to the database to an absolute minimum all browse and read calls should return data from cache if it available all add edit delete calls should update the cache once complete the temporary settings cache added in 166 should be replaced with the shiny new cache but should still be primed on init as it was previously the new cache layer should probably live at the api level not in custom api handlers as the old settings cache does>>>api
regression form input elements have lost rounded corners was removed in 323f7c0fc8917e9b1700abd9182ff8bcb0e6aad4 when converting codebase from compass to bourbon in 44 related files forms scss line 69 >>>bug
ghost init promises need to have strict ordering error handling ghost init has parallel calls for the dataprovider and settings which means if the fixtures are being loaded all hell breaks loose ghost init needs to be very careful about the ordering of things and needs to have error handling so that when all hell does break loose we know about it rather than just timing out >>>bug
editor tab index bug tabbing from post title goes to help icon then editor pane tabbing from post title should go straight to editor pane>>>bug
user logins break with passwords containing special characters steps to reproduce create new user with password containing try to login expected behaviour you get logged in actual behaviour error message saying password is incorrect>>>bug
dynamic mobile friendly ui manage posts user story https github com tryghost ghost wiki manage posts 28mobile 29 if you go to the posts overview screen and resize your browser to about 600px wide media queries will kick in and give you mobile tablet view of the page at the moment this is just done with css and it doesn actually work if you subsequently click on anything what should happen is an ios style animation you tap one of the posts in the list and the whole list panel slides off to the left and the post slides in from the right should we use backbone for this or something like ratchet http maker github io ratchet we need to create basic model here that can be re used in various places ve included some designs below for reference cc tgriesser ricardobeat image https cloud github com assets 120485 647293 3242116e d3fe 11e2 8b7e 639a7592013a png image https cloud github com assets 120485 647295 4ab51c32 d3fe 11e2 8967 679c3b83bdac png image https cloud github com assets 120485 647296 5ee2a5b2 d3fe 11e2 8c19 4b426615ee3b png >>>mobile
image upload markdown breaks with special characters in alt text putting any special characters in the alt text of an image for example comma hyphen or apostrophe image my face no but really it my face causes the image uploader not to appear >>>bug
add functionality to dismiss notifications all notification bubbles have an link on the right hand side to dismiss them currently this link does nothing test log in to ghost log out again you will get logout confirmation notification try to dismiss this with the nothing happens what should happen the notification bubble fades out and is removed from the dom >>>bug
rough upgrade plan need to put together rough plan of what upgrading ghost is going to look like in the future how will database migrations work how can we know what version particular database is how can we make ghost aware of what version it is how do we protect the database from being overridden how do we protect files in the custom content folder for now this is probably just discussion that will result in some documentation issues for implementing proper database migration etc >>>docs
remove login redirect notification fixed the notification styling in 133 but actually there should be no notification in this context when user is logged out and tries to navigate to ghost it is expected behaviour to be redirected to ghost login we don need to say this explicitly with notification todo remove the notification from the redirect from ghost to ghost login image https cloud github com assets 120485 636982 56a3b930 d297 11e2 8e9f eea20b2ffbdb png >>>bug
login screen display bugs there should be no register link on the login screen for now the login button should fit in the space to the right of the form inputs one of the widths or margins is likely off by pixel or two screen shot 2013 06 11 at 12 55 14 https cloud github com assets 120485 636686 c385666c d28c 11e2 92e6 3daddf428eb8 png the whole login form should be centered vertically in the viewport probably with js this depends on 133 being fixed first screen shot 2013 06 11 at 12 55 01 https cloud github com assets 120485 636690 fbb518c0 d28c 11e2 91db dc6d3c07758b png >>>bug
login screen markup pulls notifications into wrong place screen shot 2013 06 11 at 12 55 14 https cloud github com assets 120485 636683 9d8b45b2 d28c 11e2 820f 9245ef9a4521 png >>>bug
ghost image output hypothetical scenario for clarity one particular post looks something like this image dimensions are of original uploaded media this is the content which the user has defined text image 500x200 text text image 600x400 text image 1024x800 separately the theme defines the following criteria about how it would like to display the images on the front end the default size for all images in the blog content of this theme is 600x400 the theme can display featured image on the homepage or in search results this image is 100x100 the theme has secondary size for its featured image on different template which is 200x100 installation image sizes when theme is activated installed it runs process preferably in the background in order of newest to oldest to resize images to the sizes it needs if any images are too small the original media size they are left alone consideration how does this work with 3rd party image services do they simply mirror the local ghost image directory featured images what if the concept of featured image is simply the first image that appears completely optionally in any post turning the concept of the wordpress featured image on its head rather than the user being forced to create an entity defined as thumbnail the theme checks for something which it can use as featured image ghost scans post to see if an image is available to use as featured image when it finds one it uses it if no image exists in the post which meets the required dimensions featured image is not assigned markdown we are extending markdown to produce some new functionality with the ghost editor by typing the following syntax image alt text source an image uploader is generated in the content preview pane once an image is uploaded via this upload form the markdown is then populated with the appropriate data eg image bananas http localhost ghost content images bananas jpg consideration is changing the official markdown tag of alt src to image alt src worth it the initial thinking was to differentiate between image video something but it might make sense to keep the alt src syntax for any type of `media` which is then detected automatically multiple image sizes ghost does not support dynamic image sizes within content it also does not support images being floated around differently within text an image is block of media equivalent to paragraph the theme can style that image to fit within its design it would be good if themes could define different sizes of image so that users could still display content differently for example an image that fits the width of the screen full image https cloud github com assets 120485 631752 388e0c5e d1d2 11e2 84d1 48960f59618a png or an image that fits the width of the content standard image https cloud github com assets 120485 631753 40366460 d1d2 11e2 9522 9ab83cb40689 png considerations how could this control be achieved within the post preview ui potentially overlaid toggle on the image preview that can switch the image between output sizes how could this control be achieved and translated in markdown this would have to extend markdown in non standard way potentially something like alt size src how would we handle sizes being input incorrectly not working being changed fall back to standard image size if the image is too small to be displayed at the standard image size display the original media>>>editor media
settings page gets borked on refresh the layout of the settings page gets little unhappy if you refresh the page when on any other pane than the general first one ideally refeshing the page would leave you happily on the pane you were on also if you navigate to any pane other than the general one then navigate to another admin page and come back you are back on the general pane it would be nice but is not required if the settings page could stay on the page you were last on localstorage >>>bug
paginated queries are too slow the `can fetch paginated set with various options` test is timing out on mocha see 108 takes seconds on my machine the reason is the way `offset limit` works in sqlite loading everything into memory the manual warns do not try to implement scrolling window using limit and offset and recommends using comparison instead http www sqlite org cvstrac wiki scrollingcursor>>>bug fix_wanted
ensure that mocha tests always run successfully at the moment travis sometimes fails to run the mocha tests it seems because the tests run in parallel and interfere with one another this needs to be fixed so that we can rely on travis to validate pull requests>>>bug
remap blog settings back to the fronted using app locals the old json dataprovider and ghost globals stuff has been refactored out and replaced with proper settings api woooo only these settings never make it to the frontend anymore which means we lose things like the meta title and blog name etc >>>bug
docs todo theme plugin api description we have various content about how themes plugins will should may work which we should probably put on the wiki >>>docs
the content icon is too big content icon takes up an extra pixels of margin right for some reason in the settings menu why >>>bug
handlebars helpers are bombing out yesterday deleted the npm shrinkwrap file which stabilised all of the versions of various packages because it was out of date and figured it wasn really necessary however today ve realised that the handlebars helpers are dying with errors like on the homepage and similar one on the editor page ve tried fixing the version of express hbs back to pre and that seems to fix the issue for now but that doesn seem to be good solution to me out of time for debugging this today but hopefully someone else may have time perhaps jgable may be able to figure it out as he has contributed to the express hbs package >>>bug
npm install misses node polyglot this one is baffling me so thought put it out to the team to see if anyone else has an idea what going on when running npm install on fresh clone of the repo node polyglot is not installed it isn listed in the get requests and it doesn seem to error either have seen this happen on my machine which can easily fix by running npm install node polyglot however this is also affecting the travis ci build that ve been trying to setup any ideas or suggestions are welcome >>>bug
write post mobile when viewport is tablet resolution or smaller the write preview panels are combined and can be alternated between via tabs see http cl ly nxwo when viewport is mobile resolution or smaller the design gets smaller again see http cl ly nynw functionality remains the same the only other change is that menus tags post settings now become full screen ios style menus something like http jqtjs com but saw newer thing like this the other day that was way smoother >>>mobile
editor screen advanced scroll features on the editor screen the two panels should scroll in sync currently scrolling the edit panel causes the preview panel to scroll at the same speed however scrolling the preview panel does not scroll the edit panel also the preview panel scrolls the same amount or to the same position as the edit panel this appears to work well at first but the content in the preview panel takes up different amounts of space and in longer posts with lots of titles and code blocks the two panels quickly become out of sync visually simple ish fix for this problem would be to scroll the two panels by the same percentage rather than by the same distance this should keep them more in sync and at the very least they would both reach the end together more complex fix would be to try to keep headings and other blocks aligned without investigating further the apis provided by codemirror and showdown not sure if or how this would be possible therefore for now this story consists of refactor the existing scroll syncing code to be module jquery plugin debounce events to improve performance ensure that scrolling classes are added at the correct time make the edit panel scroll when the preview panel is scrolled change the syncing between panels to work on of total height scrolled >>>editor ember
load i18n files using promises not callbacks all i18n files for admin themes and plugins should be loaded using promises not callbacks interesting questions should the admin i18n be in json file or should it be in the database how can we make it easy for developers to create these files for their themes plugins >>>i18n
use req acceptedlanguages to set the language on first load of the dashboard after install this is configuration optimisation once user installs ghost and loads the dashboard we should be able to capture their preferred language and either set this to be default or offer the user the choice to switch to this language >>>i18n
i18n for the frontend themes apps should be able to provide their own language json files in their own lang folder ghost should be able to detect and load these >>>i18n
optimise translation i18n for default language strings marked for translation include the default string which means there should be no requirement to load set of translations and do lookup ensure that this optimisation is made in smart way >>>i18n
move i18n code somewhere sensible this needs to live with other custom middleware>>>i18n
i18n for admin views there are already several views templates for the admin system which need to have all strings marked up for translation clean up the existing lang json files to remove unused strings as the admin has changed since this was done go through the existing admin views and replace all strings with i18n tags as per the documentation on the wiki https github com tryghost ghost wiki polyglot i18n >>>i18n
adding tags to post commas are now getting included in tags suggestion typeahead menu should close when tag is deleted this currently works when deleting tags by pressing backspace but breaks when deleting tags by clicking on them suggestion menu should always be limited to items when populating tag by selecting suggestion and pressing enter suggestion menu should close >>>bug
mobile interaction js library putting this out there early before we come to implementing this but we need very solid javascript jquery guess library to handle ios style mobile interactions the one that ve seen used most often is http jqtjs com formerly known as jqtouch however it definitely not the smoothest mentioned in another ticket that ve seen another one similar to this recently which performed lot better but unfortunately can remember what it was called it might have been http maker github com ratchet other ones discussed include http jquerymobile com http www sencha com products touch http lungo tapquo com http eightmedia github com hammer js http www mobify com mobifyjs >>>mobile
change fixtures to be early developer info remove existing fixtures and all references to john blog content add in basic getting started with ghost info from vip tryghost org>>>docs
manage posts mobile see manage posts mobile https github com tryghost ghost wiki manage posts 28mobile 29 on mobile tablet the list should be the only thing on the screen http cl ly nzal when the user clicks on post the entire content area flies off to the left ios style simultaneously to the above the post preview flies in from the right http cl ly nzfp clicking the back button takes the user back to the post list ui elements should move to take full advantage of the space available http cl ly nzal http cl ly nzxx>>>mobile
word count does not update when text is deleted small bug with the wordcount on the post editor steps to reproduce write some words ctrl backspace expected behaviour word count resets to zero actual behaviour word count does not update at all until new word is typed in addition create exception for words word words see also http radlikewhoa github io countable >>>bug
adding tags to post commas are now getting included in tags suggestion typeahead menu should close when tag is deleted this currently works when deleting tags by pressing backspace but breaks when deleting tags by clicking on them suggestion menu should always be limited to items when populating tag by selecting suggestion and pressing enter suggestion menu should close >>>bug
font face in firefox fucking itself ve been over this for hours can find anything wrong with my implementation that making firefox not display my icon font any chance it could be node headers preventing or not explicitly allowing firefox to access the appropriate file types see ref http stackoverflow com questions 15636949 fontello glyph font odd behaviour on firefox shows unicode codes instead of ico >>>bug
