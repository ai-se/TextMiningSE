selection append seems case sensitive non svg see https jsfiddle net 16n6uxqg appending some th th elements noticed they seem to get added ok whatever the case but then don get picked up by either selectall th or selectall th if originally appended using uppercase th the styling different too even though the inspector says they re th elements they do get picked up using selectall elements add directly as th using document appendchild are picked up ok by d3 selectall so are hard coded upper case th elements in html seeing this in chrome 48 firefox 43 opera 34 these aren inside svg elements so it not the webkit camelcase issue that been reported in the past am missing something obvious wouldn be surprised >>>bug
issue in inverting conic projections when parallels are negative hi at first though was doing something wrong so submitted question on so but after more investigation it really looks like bug when you set projection with negative parallels example 20 and 50 the invert function does not work as expected var d3 geo conicequalarea parallels 35 50 invert 480 250 result array 268 7327478371507 whereas expected value would be 268 7327478371507 result array 715 2876827794818 388 95968864688876 so projection and invert are not coherent after checking d3 code found quick and dirty fix in the invert functions ex hereafter with conicequalarea forward invert function var var hack return math atan2 math abs hack d3 asin this way the invert function works as expected this problem is that math atan2 so the invert works as expected in the north lattitudes but math atan2 pi so in this case it breaks everything have not submitted pull request yet as am not really sure this is real fix and will not bring many more issues >>>bug
duplicate code in build these are private functions that were duplicated so as to avoid additional dependencies maybe they should be made an external dependency so that the default build is slightly smaller >>>perf
proposal selection map function think d3 selection is usable to read properties of dom the library supports `each function where you can inject whatever logic however it would be good to have `map` that transfer selection to array domain possible implementation >>>req
interpolateobject doesnt coerce the starting value to an object in case there is nan and is object d3 interpolators will anyway evaluate it as d3 interpolateobject and will subsequently fail there in if in invalid operand to in object expected proposed fix that works for me was to add test for as object too on this line https github com mbostock d3 blob master src interpolate interpolate js l23 d3 12 >>>bug
improve performance of d3 selectionprototype attr current engines tested on firefox and chrome aren that smart about `arguments` yet it is slow to assign to one while using the others because they are bound changing `name` also changes `arguments which hinders the engines ability to optimize the code the second issue is using non local value and `arguments` one at that as the topic of `for` `in` which is suboptimal in chrome profil it warns with not optimized forinstatement with non local each variable >>>code perf
sunburst chart zooming incorrectly in linux based chrome chrome version 46 2490 86 64 bit on centos fiddle https jsfiddle net wholevinski twxv8g2d steps click first level purple arc near the top 1st arc http imgur com cdwnzni png expected firefox http imgur com aowwajp png actual notice the pink arc at the top centos chrome http imgur com ohpvbce png clicking into the next level in chrome arc with name type 12 takes me down completely unrelated zooming path as well bad next level zoom http imgur com oftzbrm png was unsure where to go with this at first but these threads gave me clues https groups google com forum topic d3 js naylh4pmy8e has no responses but he correct the example is broken in linux chrome http stackoverflow com questions 33648644 nvd3 sunburst zooming into wrong section using nvd3 but is d3 backed so it looks like the same problem only in linux chrome comments mention it broken in ubuntu and mint as well also verified that it works in windows chrome >>>bug linux
missing ticks with log scale some times ticks are missing with log scale as you can see on the following picture capture https cloud githubusercontent com assets 6142727 11779390 15f882e4 a25b 11e5 8b09 837346503778 png on d3 sources if add 1e 16 tolerance putting `return pow log 1e 16 format instead of `return pow log format on `scale tickformat` function it works well is it the good approach >>>bug
remove trailing error from chord group value x0 sometimes provides value with trailing due to division this means groups that have an integer value appear to be decimal number example of problem below image https cloud githubusercontent com assets 6097953 11739551 33079cd8 9fa1 11e5 8d98 117c850d9de2 png with changes image https cloud githubusercontent com assets 6097953 11739563 4f6ea2ae 9fa1 11e5 9530 20e0d41414d5 png >>>bug
force directed layout slow initial chart stabilization after v3 hello it appears that d3 js version introduced change which is causing force directed layouts to initially stabilize much slower than before is this perhaps due to the release note on v3 improve initial random positioning of nodes for force layouts took the existing mobile patent suits demo page http bl ocks org mbostock 1153292 and modified it by adding 500 nodes to highlight the initial stabilization difference see images below in both examples below stopped the layout prematurely at alpha to show how far the layout has stabilized d3js stopped https cloud githubusercontent com assets 4081683 11698910 2ba270f0 9eb9 11e5 8a3f be02ee93c7ce png v3 is already very stable even at alpha d3js stopped https cloud githubusercontent com assets 4081683 11698908 29beeca0 9eb9 11e5 961e 1fe583f6f064 png in v3 many nodes are still far out of range from center gravity from what ve tested in my own application the chart is not only wildly bouncing around more than in v3 but it overall takes little longer to fully stabilize this problem is essentially blocker for us to upgrade past v3 due to the performance hit the delay in getting to enough stabilization resembling useful network is especially problematic for my application because we attempt to pause the animation at certain alpha states which now seem to be on different scale especially between to relative to v3 will add that another force directed layout sample page does not appear to have this problem when similarly add 500 nodes to the graph http mbostock github io d3 talk 20111116 force collapsible html know that the mobile suits demo uses paths instead of lines to connect the nodes and also has arrow head markers but ve taken these out and they don appear to fix the issue >>>perf
tree with only one branch overlays the objects the coordinate gets set to zero for all children grandchildren etc >>>bug
add d3 geo contains ppint feature this is feature request d3 can compute centroid or area of feature but there is no function to check if point lie within given feature such function working correctly for all features across 180th meridian containing pole etc would be immensly helpful to me probably it can be implemented relatively easily using the same logic that used for clipping if so at least some pointers how to implement this would be very helpful thank you >>>req
d3 xml doesn return an error on illegal xml will watts at last night d3js london http www meetup com london d3js events 226138191 reported that `d3 xml` silently fails instead of returning an error when passed xml which uses an invalid namespace checked and can confirm the follow example will pass the callback null null instead of an error as the first param >>>bug
error occurs when tree root node has only one child hi using d3 to generate radial tree found it can be shown when the root node children has only one item the error message is like error invalid value for attribute mnan nancnan nan nan nan nan nan d3 v3 min js d3 v3 min js error invalid value for attribute transform rotate nan translate d3 v3 min js d3 v3 min js error invalid value for attribute transform rotate nan translate 360 see here for detail http plnkr co edit 0fhh6b preview>>>bug
how to use the d3 selectall each method with es6 arrow notation had this code with es6 can use the arrow notation to avoid overwriting `this` however this code doesn work anymore because d3 is selecting the wrong element in fact have lost the only reference to the element because `this` was not overridden by d3 how can change `d3 select this so that it works >>>req
adds support for domainsegmented on quantitative scales `domainsegmented splits the domain in segments which walk the range at uniform speed this means that if one replaces segment range mn mx with uniformly split range mn mx of length then replacing the domain mnd mxd with domainsegmented mnd mxd will have no effect this transformation is useful when the range of scale is say highly segmented colorbrewer scale and one wishes to interpolate between the endpoints at the appropriate speed more concretely it allows one to easily change colormap from `d3 scale linear domainsegmented mnd mxd range colorbrewer blues to `d3 scale log domainsegmented mnd mxd range colorbrewer blues or `d3 scale pow exponent domainsegmented mnd mxd range colorbrewer blues and the domain segments are split correctly >>>req
d3 zoom not working with mousewheel in safari version 10600 25 mac am using d3 behavior zoom scaleextent to achieve the zoom functionality but this doesn work in safari version 10600 25 in mac os even the example provided in the link http bl ocks org mbostock 6123708 doesn work in above mentioned safari version it works with double click and shift double click but zoom with mousewheel doesn work >>>bug webkit
suitably zealous click canceling this reverts 312 since we later implemented more robust check in 1005 using zero delay timeout to expire click suppression >>>bug
use named not anonymous umd see this line https github com mbostock d3 blob master d3 js l9501 `define d3 is not the proper way if use requirejs look at its the code https github com jrburke requirejs bower blob master require js l2019 to summarize define d3 module should look like this `define d3 function return d3 `>>>req
add property for custom zoom factor to the zoom behavior when using the zoom behavior at the moment zooming by mouse wheel or double click causes zoom which is multiple of custom zoom factor would allow more control over zooming speed especially with mouse wheels >>>req
log scale layout for chords am working with large graph datasets that can have many edges in the millions as part of an effort to visualize them we are aggregating some data into on average one hundred datapoints and dumping them into matrix then rendering with chord diagrams unfortunately our aggregations have wide range of values from say 01 to 200 000 this makes the current linear layout for chords not so great huge part of the circle is taken up with one or two aggregated data points and the rest are all jammed into tiny box it struck us that log scale for sizing the arcs would be great but little mystified as to where we do that on review of the chord code it not immediately obvious where we should be changing the chord lengths any thoughts on this or pointers >>>req
use of stack layout accessor am clear about the actual usage of accessor in stack layout though gave accessor stacking was applied based on index here have give accessor see in the second layer orange order of value is not as same as order of values in first layer but stacking of data was only by index not by >>>docs
performance issue in day interval with setfullyear hi have big performance issue with internet explorer 11 narrowed it down and it appears to come from this function https github com mbostock d3 blob master src time day js in my case ie profiler spends more than 45 seconds in the `setfullyear` function at page startup when it only need some hundreds milliseconds to achieve the same in chrome or ff it appears that the combination of `new date 2000 followed by `setfullyear` is really slow set up this interesting test case to show it it compares performances related to the date constructor used followed by call to `setfullyear` using those constructors new date new date 2e3 new date 2e3 the one used in d3 js new date 2e3 new date 2e3 results on ie new date undefined undefined undefined elapsedtime 26ms new date 2000 undefined undefined elapsedtime 16ms new date 2000 undefined elapsedtime 1169ms new date 2000 elapsedtime 41ms new date 2000 elapsedtime 1135ms results on chrome equivalent to ff new date undefined undefined undefined elapsedtime 20ms new date 2000 undefined undefined elapsedtime 15ms new date 2000 undefined elapsedtime 11ms new date 2000 elapsedtime 10ms new date 2000 elapsedtime 9ms changed this line and had my performances back to normal in ie what do you think of it can this modification lead to other issues should propose pull request thanks>>>ms perf
cancel pre empted transitions synchronously when scheduled transition is pre empted by newer transition starting we now cancel the old transitions timers immediately rather than waiting for the old transition to start todo d3 timer should return void at least until or verify whether those errors can be thrown>>>bug
fix for null node in selection data if selection is missing elements then selection data would still attempt to evaluate the optional key function for the missing elements resulting in an uncaught typeerror for example now any missing elements are automatically assigned to the exit selection >>>bug
selection data typeerror with null element and key function this line in selection data doesnt check whether `node` is null before dereferencing data >>>bug
update jsdom node d3 currently relies on jsdom https github com mbostock d3 blob v3 package json l54 which uses contextify which doesn build on node is there any chance to update to jsdom it apparently breaks compatibility with node by relying on new `vm` https github com tmpvar jsdom blob master changelog md 400 >>>req
using format in return 0y using d3 version using formatter in returns 0y https en wikipedia org wiki metric prefix is yocto>>>bug
normalize d3 layout histogram by area instead of sum could an option be added to normalize the output from d3 layout histogram by area if interpret the implementation https github com mbostock d3 blob 4616c1d55c676cd51377bc6e1d12de037b872cdd src layout histogram js l22 correctly when `frequency` is false normalization occurs by using the sum of the histogram dividing by the total count for it to be probability density the integral of the histogram should be see also this helpful post http stackoverflow com 5321546 so it should be normalized by area not the sum as workaround map this function onto my bins but it may be helpful feature to add >>>req
large rounded arcs arent rendered correctly related 2183 2194 screen shot 2015 10 22 at 04 15 pm https cloud githubusercontent com assets 230541 10678227 d615cd12 78c5 11e5 82ca 667eb94c6509 png http bl ocks org mbostock 75a66e62baa350cebaeb >>>bug
mouse wheel implementation broken on windows in chrome 46 windows `d3 event deltay` always returns 0` so mousewheel does not do anything can fix it by replacing with see https github com layar d3 commit 49077acd0c847f9dc9811efb96d963e323d32a54 tested in latest chrome ie firefox on windows and mac os this works but it would be better to use proven mouse wheel library to handle mouse wheel events or draw inspiration from https developer mozilla org en us docs web events wheel listening to this event across browser>>>bug ms
enable d3 selections to iterate es6 maps and sets went all in on es6 in new project and structured my data layer with es6 maps https developer mozilla org en us docs web javascript reference global objects map and sets https developer mozilla org en us docs web javascript reference global objects set then started trying to plug my data into d3 specifically into data calls and found myself having to do lot of data array from mymap values and data array from myset not very familiar with d3 internals so not sure how much of restructuring this would require but if selections could use es6 for of https developer mozilla org en us docs web javascript reference statements for of loops that would probably go long way to solving this one there will still be vagaries though would selections iterate map values by default what if developer needs to iterate keys entries >>>req
add ability to name parameters in the zip function zip function currently creates an array from multiple arrays it would be very useful if it could also take property names as arguments and return array of objects >>>req
precision error in interpolatezoom hello for some input `interpolatezoom` gives `nan`s because of precision problems http jsfiddle net m68axcy3 as far as understand the root of the problem is that the corner case formula is only used when the xy coordinates of the inputs are exactly the same but there occurs rounding problem in `math log math sqrt b0 b0 b0 when they are nearly the same >>>bug
flextree fixes 1992 see the demo http klortho github io d3 flextree see klortho d3 flextree https github com klortho d3 flextree for more info this is rewrite of layout tree js based on this code https github com cwi swat non layered tidy trees from 2013 paper drawing non layered tidy trees in linear time http oai cwi nl oai asset 21856 21856b pdf van der ploeg 2013 also wrote script to turn it into plugin which listed on your plugin wiki page added bunch of tests to test layout tree test js and there are lot more tests include regression tests here http klortho github io d3 flextree test >>>req
how to use the function of timescale tickformat count what the meaning of the input param count in wiki https github com mbostock d3 wiki time scales tickformat this method is scale tickformat count but in the source code of d3 v3 this method is scale tickformat function return format why is different can you give me an example about how to use this method >>>docs
the drag behavior should support pointer events hi dragstart dragend and drag events doesn seem to fire on microsoft edge the new browser in windows 10 on microsoft surface pro touch device code works great on ie9 ie11 does d3 support pointer events if you need more information or help testing be glad to assist thanks >>>ms req
check if nan check if resulting endangle is nan if it is set it to fixes issue 2475 https github com mbostock d3 issues 2475 >>>bug
only prevent default on mousewheel event when trying to zoom within the scaleextent fixes https github com mbostock d3 issues 2549>>>req
zoom behavior should not block window scrolling when zoom is within scaleextent when using zoom and the cursor is over d3 chart user is unable to scroll the window after hitting scaleextent min or max scroll ability should be returned to the window >>>bug
fix drag behavior on for elements drag behavior is broken for elements on certain browsers this includes d3 layout force drag on browsers like internet explorer 11 the eventtarget is represented by svgelementinstance that looks like this no other properties such as event target style are present we must use the>>>bug ms
pointer and mspointer events for the zoom behavior added support of pointer events in addition to touch events>>>ms req
d3 brush drag not working properly on ms surface and ie11 with touch testing with example http bl ocks org mbostock 4349545 recognised that touch drag on handles does not work for the brush with ie11 on ms surface when try to drag handles with mouse or stylus it works as expected the events for brush brushstart brushend are fired but the handles do not change >>>bug ms
seeded random it would be nice to be able to seed the random number generator this would enable us to have consistent results between pages loads for things like the force layout or at least be able to inject prng so we can provide our own >>>req
missing comma on interpolate function the function d3 interpolatetransform does not add comma between all the transform possibile solution is haven tested it in large environment >>>bug
inheritence is nearly impossible right now hi everyone have been trying to create extensions inheritence of certain d3 components but with the current code structure it is really hard to do that lets have look at the axis component to show you an example this is great and it works however when want to create function axis child that inherits everything from axis and extends it with functionality while creating new callable function and holding reference to the old one we have problem the problem is that the reference inside of axis scale is to the axis function object and not to this we can use the scale function from axis child but the return value is set to axis therefor rendering any axis child functions useless thereafter also when we save this instance we are saving an axis function object and not axis child function object we can fix these issues fairly easily by referencing this instead of the function object but it will take significant refactoring of all of the configuration functions for objects such as axis our inheritence scheme could than be as proposed above is it possible to process this request or am missing something crucial which is the reason you chose the direct function object reference over the this reference thanks >>>code
add margin parameter to pack layout this pr adds the `margin` parameter to the pack layout it allows to specify the distance to the parent circle in the same way that the `padding` parameter allows to specify the distance to the sibling circles demo here http bl ocks org larskotthoff 085bb57f710aa417af41 implemented this in response to question on stackoverflow https stackoverflow com questions 32235067 padding and margin on pack layout >>>req
tree node name getting scattered while dragging node in d3 js tree node names getting scattered on microsoft edge browser of windows 10>>>ms
generic getter setter property >>>code
time minute interval does not roll hours correctly if use minute range of 45 minutes the generated range is not valid produces 17 00 17 45 18 00 18 45 19 00 19 45 was expecting that it would be 17 00 17 45 18 30 19 15 it happens with every step value that is not divider of 60 >>>bug
fix bug of monotone curve in local extremum find that the curve generated by d3 svg linemonotone sometimes has bump so try to read the understand the algorithm in >>>bug
quantize scale produces incorrect result on qunatized range thresholds suppose create quantize scale like this then the qunatized bins should be there is problem getting the correct range value when scaling some of the threshold values my expectation is that the low value of each bin shown above should be included in the bin and the high value should be excluded this is the case most of the time but not always because of floating point precision issues like the fact that is not we sometimes get unexpected results for example quantizescale 9999 should be and is quantizescale should be but is quantizescale 001 should be and is the inconsistent behavior causes lots of subtle problems have proposed fix but not sure if it is the best fix or if it works in all cases the fix is in d3 quantize js altered the scale function to be and the invertextent function to be this makes sure that numbers like 999999999999 or 0000000000001 get rounded to something reasonable so that the correct bin is selected when we are on the boundary >>>bug
css transform interpolation edit former title transition with 2d css dom not svg transform does not retrieve correct start value from existing selection illustrated at this fiddle http jsfiddle net j2vq6v3q it likely just missing something but believe the div should transition from its present position to the updated position not pop back to first and then transition what am doing wrong or is this bug >>>req
error when zooming while transitioning hi am currently writing an application where zoom on datamap datamaps github io the issues occur when zooming with transition while scrolling with the mousewheel during this transition the error message is in the method `mousewheeled` on line 155 https github com mbostock d3 blob master src behavior zoom js l155 the actual cause is `center0` being empty in line 332 https github com mbostock d3 blob master src behavior zoom js l332 am not familiar enough with the code base but the solution seems to just be abort the transition when scrolling with the mousewheel this only happens using the mousewheel panning with the mouse panning with touch and pinching zooming using touch all work flawlessly >>>bug
transition with transform translate using integers for values in firefox 38 cause black background to flicker very simple test case in firefox 38 when you click the buttons with integer values when the transition ends the blank space between the two elements inside the node flickers black this does not happen in ie or earlier versions of firefox it also doesn happen if the values are floats also does not happen if there is no transition >>>moz
add d3 time milliseconds to support millisecond resolution ticks this addition makes it very easy to have millisecond resolution ticks on the axis issue 1529 does not provide quite the same functionality since it requires an explicit modification of the data >>>req
mouse wheel implementation broken in javafx webview using d3js in javafx webview which should be backed by webkit this is the zooming code have my app works fine in chrome that is there are 20 steps between 25 when try the same scrolling in javafx it jumps from the default scale to scale 25 or scale and then only able to zoom to those values depending on up or down scroll hacked around `d3 behavior zoomdelta` little and noticed that chrome uses `d3 event deltay 120` and `deltamode 0` for step of the scroll wheel while javafx uses `d3 event wheeldelta 4800` sometimes up to 14400 when scrolling fast this causes `2 zoomdelta 002 to explode and result in toggling between the two extents tried expanding the extent and dividing `d3 event scale` before passing it on to svg but have to mess with translate too which is not that trivial ended up just modifying the d3 js source use local copy this way it works fine in both browsers can distinguish between two environments but don know if it possible to affect how delta is calculated so can add that factor without modifying the source >>>bug
layout pie nan start end angle when all values are zero found problem when using d3 layout pie d3 svg arc to draw simple piechart from collection when all data values are `0` pie layout returns arc objects with `nan` start and end angles but startangle of first object is `0` when at least one value is defined all is fine and `0` arcs have same start end angle as expected actually can check for `nan` values by custom svg arc accessors but hope you can solve by returning objects with both start and end angle at `0` you can find an example and fiddle here https jsfiddle net et7c4hxt moreover maybe this request could be the fix layout pie division by zero when sum values is https github com mbostock d3 pull 2420>>>bug
feat pack layout padding the padding parameter previously was constant across the layout and required second pass of d3 layout packsiblings padding also would not apply to group nodes only to the leaf nodes they contain with this change it is possible to specify padding on any node even group nodes this value is added to the outer radius of the node when packing the nodes this gives complete control over the spacing of any part of the layout since the computed padding is also exposed on the node via `node p` it is also possible to use the padding directly in the diagram padding is also computed on the first packing pass related issues this addresses 2247 and 1686 but differs from the solution proposed in 2379 which adds consideration for the `value` property on group node padding vs value the `value` of node in pack layouts is treated as the relative area of node the `padding` of node is added directly to the resulting radius of node demos demo http bl ocks org hughes aeee6c44713598563393 demo http bl ocks org hughes 9a5a68c0d49e02803e06 tests this change affected all pack layout tests as the computed padding is added to the projection of the test results which is zero in all previously built tests six additional tests have been added to ensure expected behaviour of padding constants and functions >>>req
stopping and starting the force layout causes duplicate timers mentioned in 1790 currently if you stop force layout and restart it before force tick is called you end up with two timers both hitting the same call back and the animation runs at double speed >>>bug
jshint jscs would this repository be open to having jshint jscs added to it and following their tool assisted guidelines love to submit pr but don want to do it if it won be accepted >>>code
attempting to use d3 with uglify strict mode causes problems ve been trying to find version of d3 that could use with grunt contrib uglify without going too far back got to before realized that d3 just doesn work in strict mode is it possible to have d3 compatible with strict mode so it works better with build processes like this >>>code
transition transition documentation may need updating for version hi ve been struggling with something that may actually be working as intended but doesn seem consistent with the current documentation can get transitions to chain properly using transition transition when run am expecting the second next transition to start after the first is completed based on the documentation transition transition creates new transition on the same selected elements that starts when this transition ends the new transition inherits this transitions duration and easing this can be used to define chained transitions without needing to listen for end events however my console is logging out parent transition starts parent transition interrupted next transition starts next transition completed am wondering if the documentation is out of date since version seems to have introduced named transitions get this behavior with or without the transition names when make small change to the code my console logs out parent transition starts next transition starts next transition completed parent transition completed is this the intended behavior can seem to do anything to get transition transition working in what seems to be the old way where the second transition will begin after the first ends the named transition method should work fine but then not sure about how timing synchronization works is it possible to synchronize two named transitions on single element without seeing any clock drift thanks chris>>>docs
the elastic and bounce easing functions are reversed the following easing functions should be swapped elastic out elastic in elastic out in elastic in out bounce out bounce in bounce out in bounce in out see easings net http easings net for reference and these http bl ocks org mbostock 3fad0a71418216b74444 http bl ocks org mbostock 5cf917540c86082abf36>>>bug
mouseleave and mouseenter are broken in ie it appears that some versions of internet explorer currently emulating ie 11 can provide an invalid `e relatedtarget` value when mousemove event is registered on an svg element that runs underneath the vertical scrollbar on the right hand side of the screen this invalid `e relatedtarget` causes this line https github com mbostock d3 blob 3abb00113662463e5c19eb87cd33f6d0ddc23bc0 src selection on js l102 to break the error thrown is object doesn support property or method comparedocumentposition which have learned is the same as comparedocumentposition is not function this is thrown because `e relatedtarget` is completely empty object it doesn even have prototype so it passes the false test and d3 then tries to straight away call comparedocumentposition on it to reproduce this open this example http bl ocks org mbostock raw 5247027 79893d3c60c81eed2cc181a441a1c91f37528d98 in it own window and shrink it down so that the vertical scrollbar appears and overlays the stack of squares then move your mouse over the scrollbar and see the errors pile up in the console windows and 10 running ie 11 failing 2015 05 28 12 29 50 https cloud githubusercontent com assets 1329312 7869077 4281cbcc 0535 11e5 95b3 dcab89179070 gif windows ie 11 uneffected https s3 amazonaws com uploads hipchat com 29251 1022154 lw3gg3lsddpnlnb 2015 05 28 2012 35 53 gif >>>bug ms
add page about json to wiki there is specific page about how to load csv data but there is no such page for json not big deal it just that am returning to work with d3 after while and had to search via google to find the page which briefly demonstrates the usage of `d3 json >>>docs
the brush should support pointer events hi the brush doesn seem to work with ie 11 using the touchscreen on windows tablet device it works fine using the mouse and when tested in firefox it works both with the mouse as wells as the touch screen we ve tested it with the example page http bl ocks org mbostock 1667367 do you have any thoughts on this which might help us ve seen touch is supported since 2012 https github com mbostock d3 pull 511 but probably it never worked with ie or is this just something which broke in the late past in any case would there be plans to fix this thanks>>>ms req
replaced utf8 greek letter with ascii names when using the non minified version of d3 chromium version 41 2272 76 built on ubuntu 14 04 running on linuxmint 17 64 bit threw errrors on any code using non ascii utf8 characters greek letters for my own use in development replaced all greek letters by their spelled out ascii names know that utf8 should be supported but for some reason in my case it wasn all tests except test geo circle test js passed immediately circle test passed with slightly reduced floating point precision 1e instead of 1e circle test didn pass on my machine for the original head commit either cheers daniel ps thanks for this awesome library it make visualizations and more fun >>>code
octree and 3d force directed graph layout an octree and 3d force layout almost entirely copied off of the existing quadtree and 2d force layout implementations with an extra dimension added appropriate tests have been added for the quadtree but not the force layout if it not appropriate for the base library perhaps it could be plugin >>>req
support for ordinal scales in d3 behavior zoom working on project where the and axes are specified by user and can be either linear or ordinal scales d3 zoom works great with the linear scales out of the box http bl ocks org mbostock 3892919 but it requires totally different approach if any of the scales are ordinal it would be convenient if `d3 behavior zoom` played nicely with ordinal scales and linear scales using the same functionality here an example stackoverflow question http stackoverflow com questions 22070367 d3 js ordinal scale and zoom pan that has similar issue to what facing there good workaround solution but it would be nice if the `d3 behavior zoom x` and `d3 behavior zoom y` methods automatically detected the use of ordinal scales be happy to throw together pr for this in the next few weeks but before do thought see if there was design decision behind this functionality hate to dig into this issue only to realize there is an obvious problem with the approach that missing >>>req
selection trigger type details should dispatch customevent>>>req
axis ticks returns arguments object after axis ticks count d3 svg axis ticks constructor function array native code d3 svg axis ticks tostring 10 d3 svg axis ticks 10 ticks constructor function object native code d3 svg axis ticks 10 ticks tostring object arguments this bit me when was feeding an explicit tick spec of an axis to the underlying scale of the axis to get tick values from the scale to manipulate and then feed back to the axis `scale ticks` did not like the `arguments` object giving me the problem is this line in `axis ticks` tickarguments arguments that line should probably look or at least behave like this tickarguments array prototype slice call arguments in any case an invocation `arguments` object shouldn be exposed to its callers >>>bug
add column function to dsv parse this adds an optional function to transform column names to `dsv parse comparable to the row accessor added in https github com mbostock d3 pull 1107 the motivation is that input datafiles may have column names with arbitrary case generated from other packages that are case insensitive like sas or spss requiring conversion to some defined case in javascript with duplicate missing column names that need to be deduped cleaned up or invented see rules for variable names in stat transfer https www stattransfer com support manual tests are added that cover these two examples http stackoverflow com questions 26998476 right way to modify d3 csv to lower case column names>>>req
inconsistent zoom behavior between browsers hello first of all thanks for this awesome library in project we re working on recently we ve encountered problem with how different browsers handle zoom scale as the mousewheel delta is not normalized in d3 as solution we plan on overriding d3 behavior zoomwheel appreciate your output on this matter thanks in advance >>>bug ms
easier syntax for looped transitions this isnt particularly constructive comment but im writing it down anyway find the syntax for chained transitions to be difficult to remember first you have selection then an initial transition but then you call transition each to create selection again before using self executing closure that overwrites itself and `circle` is initially selection but then later transitionblech >>>req
append plain text node certainly haven thought through all the implications of this but keep encountering situations where it be nice to append text node rather than an element consider labeling form element if the label text is on the left you can get away with something like this but if the label text needs to be on the right you need to use superfluous wrapper element for occasions like this it be helpful if d3 let me do something like of course the catch is could you re select such text for later updates the widget example directly above only works for entering selections if `d count` were to change we probably need the second text append to affect selectable span though the first use for the space would still be convenient so unfortunately this might need to be bit of special case idea `sel addtext str returning the original `sel` instead but arguably very handy when situation only needs to set up such labelling filler text once >>>req
add d3 layout hierarchy links for easier custom layouts hi there trying to write my own layout engine similar to tree layout finding that need to copy and paste this into my js or it won run am doing something wrong or is writing custom layouts not supported thanks >>>req
layout pie division by zero when sum values is when d3 sum values should be 0>>>bug
treemap doesn handle the level with all zero value correctly when we try to build treemap with the data which all children have value it will display the treemap with children overlapped is it more reasonable to show an empty treemap or treemap with same sized children the demo is here http jsfiddle net znfxlcn3 thank you for help >>>bug
minimal segment size in chord hi want to use d3 chord to visualize data but when there are no connections segment is displayed with 0px width text is broken as well is it possible to specify minimal segment width for such case thanks >>>req
make transitions and d3 timer more robust this addresses some of the places where an exception from callback can corrupt the internal state of d3 timer and or d3 transitionnode resulting in the issue at 2415 submitting this patch as it does improve the situation but to be honest it not full fix nor particularly elegant one most of d3 can get away with leaving exceptions to blast their way through and think that good design here however seems to be slippery slope of needing to catch and delayed throw any possible error to keep the mechanism on track the timer transition logic can get in really bad state depending on where the exception is thrown if an exception hits `d3 timer` it simply breaks permanently no more timers fire whether existing or registered later fixing that reveals worse situation though the transition logic monkey patches its own internal to `d3 timer` callback and usually only after it has called its own callbacks tweens factories event handlers so the internal transition logic stops advancing properly if it doesn handle exceptions but it keeps getting triggered triggered triggered triggered forever anyway now that d3 timer does part of me still wants to fix this thus this start but like some feedback first on what the best direction is give up and say timer tween callbacks must not ever throw drawback if any one caller breaks that rule all others suffer have d3 timer catch but also automatically cancel any of its callbacks that throw drawback means transition does not complete probably leaving its selection elements corrupted still wrap every single call of d3 transitionnode to any external tween factory event etc handler with its own try catch wart overhaul d3 transitionnode to be more naturally robust somehow thoughts >>>bug
transitions stop working if exception thrown in tween if tween throws an exception for whatever reason transitions stop working until the page is refreshed the actual problem besides the code throwing exceptions of course is in the d3 timer https github com mbostock d3 blob 9c3df31216aa28d8252b216b558cbb5907480b5b src event timer js implementation however it appears that the transition code is overriding some of that internal mechanism and may also need handling for this generally loath to add too much coddling against operator error apart from throwing informative assertions but in case of global handler like this it seems like something that should be fixed otherwise any single buggy careless user of `d3 timer` can break it globally for all the others within the page >>>bug
force layout exceeds call stack size hi new in d3 js and trying to render huge graph by using d3 layout force my graph has more that 5000 nodes and more than 8000 links maybe there is limitation for nodes and links count when render only nodes all looks fine rendered slowly but it not critical in url you can find json and html https drive google com folderview id 0bze3fjc8lpfwqs1nagk5ovlfvvu usp sharing >>>bug
pointer events for the drag behavior this makes the bubble demo http bl ocks org mbostock 9631744 usable via touchscreen on windows machines and should remain future proof as other major browsers adopt pointer events and as ms adds touch events http blogs msdn com ie archive 2014 07 31 the mobile web should just work for everyone aspx for backwards compatibility on some of their platforms miscellaneous notes unfortunately this required an albeit minor and backwards compatible addition to d3 mouse my original go at this https github com mbostock d3 commit 736cc499739373d861d625affbf87991a36736f5 compared the ids itself which seemed better encapsulation but the current drag code now already expects missing falsy position return value as d3 touch gives so ve followed suit here may actually be useful to other pe aware users of d3 mouse suppose ve made the touch action setting bit more careful in this go round again debated whether or not d3 should be setting style property like this but it already doing much crazier dom hacks when needed for other event handling better to have it work by default for the 99 of cases and have anyone who really has some way for touch action to remain auto and still get useful work out of d3 drag they can set back themselves finally as more general comment haven updated d3 zoom to work with pe in my opinion that behavior should be leveraging the work in d3 drag one further trivial modification to also pass along the dragid with its events to track touches in cross platform way but that needs bit further discussion beyond https github com mbostock d3 issues 1793 issuecomment 38082270 have long been using `d3 drag` to track touches on parent element rather than an actually dragged element and it works fine by simply adjusting via origin >>>ms req
request voronoi distances would it be possible to allow for different distance algorithims for the voronoi map for example manhattan chebychev and minovsky >>>req
transition back to css styles can create transition that will correctly get applied from css style to an in line style for example say create circle with some css can change the style of this circle to blue using transition and this works fine what really want to be able to do is then revert this style by simply removing it this will cause sudden switch back to red because ve not defined the colour what really would like to be able to do is transition back to the default style from the css without having to record the colour red so can apply it inline to revert back nicely question sample on stackoverflow http stackoverflow com questions 29701689 transitions styles back to css defaults 29702008>>>req
colorbrewer is not gplv2 compatible like to include d3 in drupal distribution that working on since using the drupal org packaging system cannot include d3 because the apache license used by colorbrewer is not compatible with gplv2 which is what all code on drupal org must be licensed as per the license policy http drupal org licensing faq q4 all of the other libraries included with d3 are gplv2 see the list of compatible licenses http drupal org node 1475972 whitelist licenses except for the css and js file included with colorbrewer was wondering if it would be possible to replace the colorbrewer css js with something else or if should contact the authors of colorbrewer to see if they would agree to dual license it under mit or another permitted license it would be great to be able to use d3 with drupal wordpress etc >>>docs
for people that are using d3 with web components it is simply an import html with the following content when working with web components every component that uses d3 will import it through this will prevent importing d3 more than once >>>docs
zoom events dont initialize pre transition zoom state if you call zoom event it sets `element chart so that zoom transition starts from the correct view but this doesnt happen automatically if zoom event or zoomstart zoomend event is dispatched it probably should >>>bug
exposing line interpolator functions currently working on charting library that would benefit from having direct access to the interpolation functions available for d3 svg line area would it be reasonable to create pull request that does the following break out the interpolators from svg line js and puts them into svg interpolators js refactor the default available interpolator functions from `d3 svg linelinear` to `d3 svg interpolators linear` and so on thoughts >>>req
windows touch event support is there any plans to incorporate windows touch into d3 any time soon this would be along the lines of https github com natevw d3 tree fix drag touchend win8 thanks >>>bug ms
transition remove fix we at kiln recently noticed that calling remove on transition would not always work as expected though explicitly removing the element from an each end handler did work it turns out that it wasnt working in the situation where the running transition had preempted transition that had not yet started due to delay this patch with test seems to resolve the problem though you may have better idea for how to deal with it in any case it seems to me that the `this ns count 2` check is too simplistic since there may be transitions with ids less than the active one that will therefore never run >>>bug
fix `d3 selectall htmlcollection using selection created via `var sel d3 selectall someelement children used to work but in https github com mbostock d3 commit 9c3df31216aa28d8252b216b558cbb5907480b5b diff d93c7c1ccac09d19287c11d2d115758al61 critical conversion to `d3 array` was factored out of that path this resulted in such selections exploding when certain array dependent methods were used such as `sel sort simple fix plus now test for this code path the existing test had only been exercising `sel selectall` but not `d3 selectall` >>>bug
request for time zone support in d3 time scale by default d3 time scale uses the browser local timezone presumably as side effect of using javascript date objects it is common requirement for visualizations to use specified time zone which may differ from the browser local time zone workarounds found online as of the date that this issue is being filed focus on replacing parts of d3 functionality or fudging input data to re imagine it happening in utc or in the browser local time these workarounds are complex d3 time scale should be configurable to use specified time zone so that when ms since unix epoch are rendered and when tick locations are created this would done directly and appropriately this functionality seems to be within the intended scope of the time scale purpose and architectural context and is only limited by the lack of good time zone support in javascript perhaps an optional dependency on moment timezone js would be reasonable perhaps an independent implementation of the time scale thanks mat>>>req
import html file for the people that are using d3 with web components an import html file would be an essencial addition it is simply an import html with the following content when working with web components every component that uses d3 will import it through this will prevent importing d3 more than once can make pull request if you want but it is very simple task >>>req
ignore case when detecting colors for interpolation fixes 2359 >>>bug
color transition chrome version 41 2272 101 64 bit issue noticed that transition for background color attribute does not work with some colors the color appears but does not transition if you replace the color string to say yellow it does work as expected kinda silly but still wanted to know if there was reason this bug is occurring has anyone ever seen this >>>bug
fix combined mousewheel drag gesture during combined zoom pan gesture controlled via simultaneous use of the mousewheel and dragging it is possible for the drag to finish before the use of the mousewheel finishes the mousewheel gesture is deemed to be finished if 50ms passes with no mousewheel event although the zoomend event is only dispatched when both gestures have finished the variable center0 was being reset when either gesture was finished causing an error in the mousewheel handler fixes 2205 >>>bug
how to contribute to example gallery page on wiki the gallery page encourages people to add their own work to it but cannot figure out how that supposed to be done can edit the page directly since the wiki isn public and github doesn support pull requests on wiki repos also don see any open or closed issues requesting things be added how is this supposed to work >>>docs
line interpolation error when using the line generator with the interpolation mode set to monotone have noticed an error where the line on the axis actually extends beyond the next point and curves back towards it you can see an example of this here http jsfiddle net samwhitby enpqsua1 on the line between the second and third data point any suggestions for potential workaround would be greatly appreciated thanks sam >>>bug
d3 layout force frozen nodes jerk when unfrozen in 5390ac3 charge and gravity forces were changed to update px py instead of for improved stability this causes the steady state values of px py to be different from because are set equal to px py on frozen nodes they will jerk when unfrozen when mousing over and then off this is somewhat annoying for interactive visuals would it make sense to accumulate using px py throughout instead of modifying >>>bug
stack layout does not support mix of positive and negative bars this may be my lack of understanding and not an actual limitation but it seems that the stack layout only supports showing stacked bars when the bars are all positive or all negative would like to show stacked bar chart where bar segments with positive height extend above the axis and those with negative segments extend below the axis the reason don think this is possible with the current stack layout is because it involves maintaining baseline for positive and negative bars separately not just y0 if each series had only positive or negative bars then the current layout would work but want to allow for any of the series to have mix of positive and negative values think this limitation could be removed with just small change in the stack layout code if the signature of the out function was function out y0 change instead of function out y0 and out call stack series points points was changed to out call stack series points points then could store positivebase negativebase in y0 instead of just single scalar and maintain separate y0 values for positive stacks and negative stacks is that correct would this be good change realize that there would be backwards compatibility issues >>>req
graticule labels hi that would be great to have an option to add labels on map graticules even if know this could be very tricky for some peculiar geo projections thanks lot arnaud >>>req
incorrect docs for d3 scale quantize https github com mbostock d3 wiki quantitative scales quantize scales the following parts seem inaccurate the mapping is linear in that the output range value can be expressed as linear function of the input domain value mx this is the definition of d3 scale linear the output range is typically dimension of the desired output visualization such as the height of bars measured in pixels in histogram height in pixels doesn seem like good example for quantize scale range >>>docs
the classed operator should allow single function parameter this function would be called for each selection node similarly to the classed string function variant but the function would then return an object containing classname truthy combinations to set remove classes this allows the following code from the clustered dependencies example d3 selectall node classed target function return target classed source function return source to be improved to d3 selectall node classed function return target target source source >>>req
d3 symbols radius accessor for d3 symbols currently the only way to set the size of symbol is through the size accessor however we encountered that we much rather set the size of the symbol through the radius since the size by itself is essentially the area of the constructed path and one cannot know the dimensions of the path with just the area value we were wondering if there can be some form of radius accessor that can allow us to enforce boundary box around the symbol so that we know the dimensions of the symbol >>>req
arc rendering bugs for nearly circlular arc with large corner radius arcbugs https cloud githubusercontent com assets 962036 6499166 58d405d8 c2ab 11e4 9aee 495898509862 png online example of bug http bl ocks org michaelkaplanworkday d181cb1ce1f65983de73 previous related issue https github com mbostock d3 issues 1131 from bm previous related issue has attached example http bl ocks org bm 5124918 through debugging of d3 js file found that svg arc js lines 123 127 and lines 145 149 are causing this issue and the issue does not occur if the else blocks are removed and the if cases lines 117 112 and 139 144 are always used remove the if check unsure if the else cases need to be there if not then they can be removed but if they do need to be there then perhaps the solution proposed by deanmalmgren involving automatically reducing the radius in these corner cases would work best excerpt of lines causing the bug from svg arc js https github com mbostock d3 blob master src svg arc js >>>bug
pass dom element to selection functions currently the context of function passed to `selection attr` and its sibling operations is set to the dom element of the selection things get tricky when you want to both use the outer `this` and do something with the dom element of course `var self this before the function solves this what would be more convenient is if the dom element was available as parameter to the function element this would allow you to use es6 arrow functions which ignore the function context to be clear not proposing that the context be changed to something else only that it be possible to get the relevant dom element without it regarding backwards compatibility adding an additional argument shouldn break anyone code unless they re for some reason relying on `arguments` being particular length though if my assumption is mistaken and such change would indeed be breaking one it should probably be left until version >>>req
d3 format for number abbreviations similar to si prefix wondering if anyone else would find use for feature like this for example si prefix will condense large or small numbers and add the appropriate metric system character var parse d3 format console log parse 5000000000 5g console log parse 5000000 5m console log parse 0005 500 want to create similar function let just call it `d3 format that will condense numbers to human readable abbreviations so long numbers are more easily inserted into charts and axes var parse d3 format console log parse 5000000000 5b console log parse 5000000 5m console log parse 5000 500k possible prefixes could be for trillion for billion for million for thousand plus any others we may need don mind writing the functionality if mbostock thinks it good idea know the argument against it is to just convert the number yourself but then the prefix isn being decided in real time or you have to have lot of separate if else cases >>>req
skip creating half edges when we don have second vertex running into problems with voronoi use from with the nvd3 library and while debugging noticed that cascading conditional starting on line 51 of `cell js` can end up with `null` value which causes `createborderedge` to choke de referencing for an `x` value not really understanding this code it seems that we would not want to create border edge in that case is there any harm it just skipping its creation fwiw the nvd3 code was fixed to remove duplicate points see https github com novus nvd3 pull 584 thanks for any insights you can offer >>>bug
extend svg arc padangle parameters description of the change the `padangle` function accepted single number previously but now accepts an array of two values too in which case the left and right pad angle are set separately as specified in the array this allows for the creation of sunburst charts with straight separation edges of course the `padangle` can still return an accessor function that can return an array reason for the change this was something needed in project but it was not possible to do this without changing d3 code hopefully my changes can after some feedback be of use to others too the fundamental problem is that when one applies gap between arcs in partition using some definition in radians wedge shaped gap is formed the existing `padangle` implementation handles this nicely already by making the inner and outer padding slightly different so that straight edge gap is formed however it is not possible to extend this gap to outer rings because segment always has padding both to the left and right of it this change makes it possible to set the padding for the left and right side of segment separately demo application of the change this bl ocks org demo http bl ocks org caster e5b50054e36a34dbb6b8 demonstrates what needed in my project using some made up data notice how the padding between segments in the inner ring extends to the outer ring while the segments in the outer ring do not have inner padding remarks noticed how there is lot of functionality stuffed in that function already so some things may not work well together with this change like rounded segment corners however all existing tests still pass am just not really sure how to write tests so would really appreciate some pointers if tests are desired and assume they are all feedback is appreciated and am definitely willing to make big changes if necessary >>>req
int keys in nest function become strings not sure if this is bug in the code or in the doc but when run the example here https github com mbostock d3 wiki arrays nest see the keys as strings and not ints the doc says key 1931 values but see key 1931 values >>>docs
selection on document broken this worked all the way up until chrome 40 operation d3 select document error uncaught typeerror cannot read property documentelement of undefined using document documentelement resolves the issue >>>bug
break scale option was wondering whether it would be possible to enhance d3 scales with break scale option in generic way it very useful option when you have to draw axis at zero but all the numbers are very high and the difference between them is visually close to zero is there way to make such concept generic and build it into library without making chart specific hacks when value is inside the break scale range then it just shouldn be plotted as an example of break scale effect you can see http stackoverflow com questions 20249054 nvd3 js d3 js scale break the wavey effect on axis in the chart in the answer >>>req
simpler no global for commonjs we dont need the index js to unset the global if we dont set it >>>code
remove generated d3 js d3 min js from git repository >>>code
fix 1491 d3 transition broken in ie9 due to the lack of support for prototype injection in ie9 we use direct extension as fallback however when d3 selectionroot is declared some methods have not yet been added to d3 selectionprototype hence they are not copied to d3 selectionroot since d3 selectionroot is only used by d3 selection and d3 transition we replace its eager initialisation by lazy initialisation within d3 selection and modify d3 transition to call d3 selection on order to retrieve the singleton selection object >>>bug
use es6 modules and rollup instead of smash know this was considered previously 1978 mbostock smash 12 but ive been using browserify for project and like it quite bit it might be time to rewrite d3 to use browserify along with the other larger changes >>>req
add verbose documentation to the circle pack layout took me while to understand how the circle pack layout algorithm works modified and added documentation to explain what happening internally if this is desirable direction for granular documentation here it could benefit from anotherpass by someone with more familiarity >>>docs
fix multiple drag behaviours on single element hey not sure if there is specific reason this didn work before but if you make these modifications you can have multiple drag behaviour like this d3 behavior drag drag on d3 behavior drag drag on call element call element if this is of any use for you can compile the source files properly >>>req
gantt bar range layout request really like to see gantt charts or bar charts with ranges as part of d3 ve gotten one to work using https github com dk8996 gantt chart but it not generic enough it would be great to see this as layout in the future may do pull request if end up creating more generic version of dk8996 chart but was wondering if new layouts are being developed and if so hope this type could be included >>>req
large timer queue after window focus blocks ui for extended time have an issue where have d3 js charts updating every seconds on my page when the user blurs the window minimizes or switches to another tab the requestanimationframe action is paused and so all transitions during this time start queueing up on the timer queue when the user refocuses on the window it seems that the queue is extremely large and can block the ui anywhere from 5s all the way up to many minutes or the tab crashes from out of memory or non responsive script realise there is the selection interrupt function which should resolve this because really its only transition per chart all queued up over and over however should there be more elegant way of d3 js handling this use case if there are many transitions timers queued up overdue when requestanimationframe runs if queue is extremely long go through all scheduled transitions and remove all but the most recent for that element or perhaps it can yield for want of better word every transitions for an example using the charting library c3 js http jsfiddle net solgar phlqwrmb >>>bug
ie8 fix filter proto from for in loops d3 is currently out of commission in ie8 thanks to some tight for in loops https github com shawnbot d3 blob master src arrays map js l38 in the `d3 map implementation when d3 js is executed ie8 fails while iterating over `d3 svg lineinterpolators` when it hits the proto key image https cloud githubusercontent com assets 113896 5929882 9304fb52 a63d 11e4 9342 4d2a238b0caa png because unfortunately in ie8 which means that we have to use `hasownproperty instead of just the `in` operator this pr suggests one fix for which the tests pass and ve confirmed it works in ie8 but it might have performance implications for instance instead of the locally bound `has key these functions could call `this has key instead which might be faster haven looked too closely to see if there are any other places in d3 where this might apply but the d3 map constructor https github com shawnbot d3 blob master src arrays map js l14 might be candidate >>>ms
var hoisting masking value from outer scope reading through the d3 force implementation and it looks like there might be typo on line 260 of force js https github com mbostock d3 blob master src layout force js l260 `m` is being used as closure from the outer scope for where it is being initialized from the outer scope to `links length` then few lines later on it is being initialized var candidates length while but my thought besides the fact that it is unclear to use `m` with two meanings is that the function scoping combined with var hoisting may be obscuring the `links length` value with `undefined` the two usages were added during different commits so wondering if it is unintended that `m` was reused the side effect is that the loop on line 260 never executes because `j undefined` is always `false` >>>bug
problem with d3 behavior zoom mac os the page loads then you pan to either side and then zoom and it throws javascript error in console this is strange because just today was using zoom behavior in windows chrome and as far as remember it worked the problem only exists if you use finger trackpad gesture for dragging and don change cursor position after panning doesn work if you drag with hard click so pan with fingers and try to zoom right away seems like d3 can determine cursor position after dragging errors safari `typeerror null is not an object evaluating line 1228 chrome tested in both browsers on mac os addition recreated the same in firefox firefox and chrome are pointing to this bit of code lines 1380 1384 here short example >>>bug
use customevent for event dispatching itd be nice if custom events like those used by the zoom behavior were done through the customevent standard this would allow you to register listener based solely on an element plus an event name rather than needing reference to the zoom behavior object however its not clear how to apply this strategy to objects that emit events and are not bound to elements such as force layout >>>req
fixed nan path issue on rounded corners for animated arcs arctween d3 geom polygonintersect ran into division by check for undefined result allows to continue with defined value please check if have not run in misunderstanding of the function related issue https github com mbostock d3 issues 2183>>>bug
selections should not extend array trying to extend the built in array type causes number of issues in es5 see 1805 2174 in es6 well be able to say `class d3 selection extends array` but itll probably be long time before we can support es6 exclusively in retrospect dont see truly compelling reasons that selections must extend array for one selections are arrays of arrays of elements http bost ocks org mike selection not arrays of elements and two in most cases users should be using selection methods such as selection each rather than array methods array foreach the only real thing thats missing if we no longer extend array is way to mutate selections groups to add or remove the set of groups associated with selection but im not sure its necessary to support this since in the vast majority of cases selections are immutable or at least the set of groups is never changed an example of selection mutation is the behavior of enter append adding the enter selection to the update selection but even in this case the set of groups is unchanged >>>req
remove jsdom dependency installing jsdom is pain on windows and theres no good reason for the node version of d3 to dependent on this specific dom implementation instead users should be able to provide their own dom implementation as desired >>>req
script70 access denied or permission denied when animating embed ed svg elements the bug manifests itself as script70 error error message access denied or permission denied if an svg element is on page and is then removed while an animation is still running in it an exception is sometimes thrown from d3 timer tick or d3 timer stop to be more specific d3 timer stores state on dom node in the transition attribute and then tries to delete node transition it in d3 timer stop that will fail if the svg element cannot be accessed attribute access or assignments fail with an error if d3 timer tick calls function that does the animation this could also be custom attrtween and it throws the timer continuation is stopped this is non recoverable by the application and will stop all concurrently runnning animations and will prevent all animations scheduled after that point this is also not reliably preventable by the application as there is no way to synchronously stop an animation selection interrupt transition and d3 timer flush all are asynchronous and thus the race condition between stopping the animation and ie killing of the svg element remains we suspect that the ie js garbage collector is to blame for this as the problem happens after varying intervals and can be triggered more easily if there is more activity in the dom possible solutions workarounds keeping reference to the embed dom element seems to keep it alive keeping d3 selection of the svg element path group etc inside it doesn this could mean that changing the way animations remember the elements they re working on could prevent this error catching and possibly discariding exceptions thrown from the handlers called by d3 timer tick and d3 timer stop so one erroneous svg element doesn kill all other d3 animations listen to dom removal events and internally and synchronously kill timers on the removed elements providing solution to synchronously stop an animation this could allow an app using d3 to work around this problem by stopping the animation before it removes the containing dom element we would prefer solution that doesn require the d3 using app to include ie10 11 workarounds that being said we think it would be very beneficial if we could force d3 to synchronously get rid of timeouts transitions animations on dom nodes this would have helped us tremendously to track down work around this problem and would help d3 using applications to more easily work around similar issues when they are found in the future until real solution fix is implemented in d3 see this blocks gist http bl ocks org rbu 6cda4f71909d0f5e4f11 for demonstration reduction of this problem >>>bug ms
add note about purpose of github issues to contributing md this should help newcomers who occasionally open issues that arent bug reports or feature requests >>>docs
svg arc cornerradius causing invalid paths with attrtween use the partition layout to create sunburst chart where the arcs have rounded corners the animation works pretty well except flickering of the arc which becomes full circle but in the console of safari and chrome 39 lots of errors are thrown not in firefox the animation works but an error occurs in d3 js 8699 this setattribute name the log output of chrome error invalid value for attribute mnan nananan nan nan nanlnan nananan nan nan nanz there is an ongoing discussion on stackoverflow http stackoverflow com questions 27838938 d3 sunburst diagram setting arc cornerradius causes invalid path with arctwee and codepen to test made by user vividd http codepen io vividd pen myrwry>>>bug
update to jsdom significant performance improvements since should help d3 such as nodelist iteration and insertion see https github com tmpvar jsdom issues 694>>>perf
adding multiple rollups to nest function tests ve modified the nest function to allow for multiple rollups to be specified while maintaining the original functionality this simplifies dynamically adding rollups updated phoebe bright nest tutorial with some examples http bl ocks org brett miller c31eb0c4d89ab84d6e22 >>>req
d3 transition crash in ie 11 when using d3 with c3 js in ie10 or lower c3 makes call to d3 transition without any arguments and this crashes in ie10 and lower because d3 selectionroot has no transition method defined this in turn is because d3 subclass fakes inheritance in ie 11 where there is no proto property by doing for var property in prototype object property prototype property at the time that d3 selectionroot is created unfortunately at the time d3 selectionroot is created d3 selectionprototype does not yet have the transition method defined if you move d3 selectionroot d3 select d3 documentelement to after all the d3 selectionprototype stuff is setup at line 8573 the problem is solved is this real issue or am or c3 js simply using d3 wrongly >>>bug
fix quadtree find with accessors `d3 geom quadtreefind` was using the node data instead of `x` and `y` properties making it only useable with position arrays >>>bug
decouple rotation from clipping spherical rotation is now applied prior to spherical clipping eliminating the requirement for spherical clipping to perform the rotation >>>req
make locale files available with bower as described here https github com mozilla metrics graphics issues 285 issuecomment 67841443 getting an i18n d3 involves copying locale file in my project rather have this file in `bower components d3` did not reuse the file exactly as is removed the `import locale line not sure what it does >>>pkg
interrupt not really interrupting transitions call interrupt on selection with transition but the end still gets called and the transition continues making this modification seems to fix the issue as the tick function will stop am not sure if it will cause any side effects >>>bug
support number of microseconds since unix epoch hi want to create custom directive to the input specifier of d3 time format ex d3 time format the directive needs to be created how can thanks >>>req
d3 and shadow dom mbostock jasondavies there seems to be some strange cases where d3 doesn work properly with the shadow dom ve created an example page to demonstrate one append textarea of them here http bl ocks org pemrouz 4a3e7ce9322c091ec058>>>req
add possibility to pause transition hi it would be very useful to have the possibility to pause resume transitions this is first naive go `d3 transition pause will pause all active transitions while `d3 transition resume` does what it should there is also way to act just on specific transition transition pause and transition resume use case small animation utility written with d3 js see here draft https www smile org solutions whatisit cheers >>>req
allow `d3 layout force chargedistance` to take function number of settings on the `d3 layout force object are dynamic like `linkstrength` `linkdistance` and `charge` they take function so the value can be different for each node or link this seems to not be the case for `chargedistance` is there reason for this it would come in handy for me at the moment have number of isolated groups of nodes with their own gravity and enforced bounds but still with occasional inter group links having the `chargedistance` be limited to the group size of each particular node would help both performance and visible behavior >>>req
d3 transitionnode slow interpolations in large data sets hello first post here so just wanted to say that absolutely love this framework and enjoy using it on daily basis in the last week or so ve been trying to push the limits of d3 and use it on highly iterative large datasets 80000 and have run into higher slowdown in the d3 transitionnode function than would expect if was using custom implementation here is the current d3 transitionnode function the function is currently node specific and so are all callouts to the d3 transitionnode function this seems to incur three issues large amounts of garbage is being accumulated due to associating an individual array of tweens on node by node basis tweened the node by node basis of interpolations leads to small inner loops considering the timer itself is the large outer loop unnecessary recalculations are performed with duplicate easing functions when the elapsed delay and duration are all equal big gains here by using grouped easing function when possible my thoughts are that d3 transitionnode and callouts to d3 transitionnode could be reworked to perform easing calculations at the group level when possible instead of at the node with strict non function values which seems to be common use case performance would significantly increase >>>perf
gravity unclear in documentation in force directed it is unclear what happens if gravity is provided function what would it be passed as an argument nodes or links am figuring out the answer but it would be nice just to know from the docs >>>docs
implemented iso 8601 directive in time format have implemented the directive as defined in the documentation of strftime it is following the iso 8601 standard and it works for formatting and parsing also added tests for corner cases like the 2009 year that has 53 weeks parsing note if you parse something like this fri 53 2009 it yield date in 2010 since week 53 span over the next yea same thing if you parse wed 01 2009 it yield date in 2008 since week start in previous year >>>req
fix cleartimeout usage while working on reimplementing most of the web apis required by d3 so it can be used in ios apps see https github com turbolent d2a noticed that `cleartimeout` is used incorrectly its definition is `void cleartimeout long handle which means that it should only be called with timer id obtained from `settimeout` and not with `undefined` >>>bug
document which default locales are available the documentation page on locales https github com mbostock d3 wiki localization doesn inform that there are already some default locales available for some languages https github com mbostock d3 tree master src locale should this information be added should just edit the documentation wiki >>>docs
interrupt events should not be dispatched if transition is cancelled before it starts if transition is scheduled but never starts because it was superceded by another transition it should not dispatch an interrupt event >>>bug
the index reported in transition events is determined by the selection that creates the transition consider this contrived example normally we would expect the value of `i` in the start event callback to be because the only non null element in the selection is at index however because this transition was created within the context of transition each callback and because transition with the same inherited id was already created on that element by the previous line of code and because said transition was created with selection with different order of elements the reported `i` is instead it would probably be cleaner to capture the index when registering the event listeners and tweens and eliminate the index captured by `d3 transitionnode` related 2142 >>>docs
transition events listeners do not see the latest bound data if the data bound to an element changes during transition the transition event listeners see the data that was bound to the element when the transition was scheduled rather than the data that is currently bound for example >>>bug
calling interrupt multiple times can prevent delayed transitions from starting the current implementation of selection interrupt works by incrementing the transition locks `active` counter this works if interrupt is only called once but if interrupt is called repeatedly it continues to increment the active counter this means it not only interrupts the active transition but may prevent an inactive scheduled transition from starting this explicitly violates the documentation which says does not cancel any scheduled transitions that have not yet started for example this works as expected however calling interrupt twice increments the active counter again preventing the second transition >>>bug
interrupt events should be dispatched before the interrupting transition starts transition interruptions are currently lazily detected so the interrupting transition the interruptor dispatches its start event before the interrupted transition the interruptee dispatches its interrupt event the semantics would be more intuitive if interrupt events were dispatched first before the start event >>>bug
d3 transition selection name the optional name argument should be supported on d3 transition >>>bug
throwing an error inside transition each leads to bad things because `d3 transitioninherit` and `d3 transitioninheritid` are never reset possibly this should be done inside of finally block because the resulting behavior is that all transitions are broken >>>bug
support http authentication in xhr `d3 xhr` currently doesn offer way to supply the `username` and `password` parameters to `xmlhttprequest open` here is very simple fix applied to the generated source code if you re interested in adding this feature can prepare proper pull request with documentation etc whatever you require for pull request to land not all too familiar with the consequences of enabling `withcredentials` which enables authentication for cross origin requests by default an approach that have taken in this simple preliminary patch it probably should have to be enabled explicitly maybe as another parameter in authenticate` >>>req
add packaging for meteor js hi mike jason package maintainer for meteor js http meteor com popular full stack javascript framework http github com meteor meteor meteor devs love d3 it was core package https github com meteor meteor issues 2557 until recently and now it time to separate concerns and let the community maintain the meteor d3 integration this pr will allow you to directly publish updated versions of d3 as they become available all you have to do is create an account at https meteor com click sign in then create account after you ve done that please let me know the name of the account and ll add you as maintainer ve already published the current version of the package on atmosphere https atmospherejs com d3js d3 meteor package directory when you release new versions of d3 you ll be able to publish them to atmosphere by running `make meteor` thanks best regards dan>>>pkg
zoom behavior clip scale to scaleextent currently it is possible to manually set scale value outside zoom behavior scaleextent this seems broken to me if you disagree fine close the pr there already clipping function `scaleto` so we just call that >>>bug
create chinese translation for d3 csv txt made chinese translation for d3 csv https github com mbostock d3 wiki csv >>>docs
allow garbage collection of inherited transition when creating new transition derived from an existing transition the new transitions parameters reference time delay duration and easing are inherited however we were inadvertently also capturing reference to the old transition lock including any tweens and listeners even though this object wasnt used by the transition after creation its likely that the garbage collector wasnt smart enough to free the old lock we now set the lock to null explicitly so as to allow garbage collection and avoid memory leak with chained transitions related 2110 also create new object when using transition transition rather than using object create its slightly more code but its simpler >>>bug perf
remove function declaration inside conditional strictly speaking this is not legal ecma 262 syntax since function declaration is not statement and thus shouldnt appear as part of block the reason for this is inconsistent hoisting behaviour across implementations for example v8 will always hoist function declaration even if its inside conditional block but firefox will not hoist function declarations inside conditional blocks fixes 2114 1553 >>>bug
make d3 compatible with es5 strict mode strict mode disallows function statements inside if statements https developer mozilla org en us docs web javascript reference strict mode paving the way for future ecmascript versions http whereswalden com 2011 01 24 new es5 strict mode requirement function statements not at top level of program or function are prohibited d3 event dragsuppress is not compatible with strict mode because it conditionally defines the off function >>>bug
saving transition or transition context for reuse have been working on reusable chart object and the chart uses single transition style for all of its animations using `transition each it allows the transitions of all the various animated elements to inherit the main transition delay duration easing etc as on https github com mbostock d3 wiki transitions each would like to be able to let the user of the chart user as in programmer not as in end user set the transition parameters rather than making getter and setter for every foreseeable transition option thought it might be possible to store the transition object in the chart prototype on construction however after the original transition `duration` has passed it is no longer valid and the object have stored in my chart prototype is not usable this is either feature request or question on the d3 way to save transition parameters for later here the essence of what am trying to write however after 100 milliseconds `this transition` has expired and the call to `this transition each fails so could imagine instead storing some kind of transition context that could re use later like this in the above hypothetical the `transitioncontext` would store the various settings across transitions and would restore it each time need new master transition so have two questions does adding notion of context to transition break the fluid programming style of d3 is there some other d3 way to store the options would like to reuse in transition happy to contribute code for potential changes but thought would ask opinions first thanks >>>req
replace selection attr object with selection attrs object often use the attr getter to set attributes of one object to match another have now encountered situation where want to inherit all the attributes and it made me think that method attrs would be very useful for this purpose so for example this newobject this group append rect attrs this objecttoclone just thought >>>req
d3 scale log invert should exactly map range endpoints to domain endpoints example tested in chrome 39 beta it possible to ensure numerical stability with math pow >>>bug
simpler cartesian fisheye possibly worth including >>>req
use attr instead of style for axis label text anchor assignment this allows the label text anchor setting to be overridden by css without having to resort to important` statements which are ugly and maintenance hell for example to create horizontally centered labels on vertical axes you are using `attr for visual attributes pretty much everywhere else in the code so maybe there some reason ve overlooked for specifically using `style here but from what see there should be no reason to not use `attr for assigning the `text anchor` value >>>req
upload progress events this progress events example http bl ocks org mbostock 3750941 works great for download events was just wondering if it would also be possible to dispatch events for upload events appending the following line to src xhr xhr js https github com mbostock d3 blob ac7fb154fa7f7a6b0bab3927c1d9927522f260ec src xhr xhr js l47 l52 works for me >>>req
error when using d3 on ie8 my app uses d3 13 on ie8 and imports both `aight js` and `es5 sham` that provides polyfills for `object defineproperty` `object create` etc at runtime an error is thrown in line 7911 of `d3 js` tracing bit further it all boils down to the fact that the `object create null polyfill in `es5 sham` returns an object with the proto property set to `null` and that property gets iterated in the `for in` loop used internally by `d3 svg lineinterpolators foreach` simple fix would be skipping the proto key in the above function ve tested and it no longer causes the error before submitting pr want to know if this is something you would consider merging to d3 >>>req
d3 set values returns an array of strings while feel this was done as consequence as restriction in javascript it still is not ideal to have values return an array of strings can d3 set return instead the actual items that were entered into the set >>>req
d3 behavior zoom drag should pan with inertia most slippy map interfaces now use inertia so we should too >>>req
`d3 uri convenience method to load raster images as base64 data uri for href hard embedding demo solution html svg implementation demoed there http fiddle jshell net xgusu 116 116 http fiddle jshell net xgusu 116 show light it may deserve to push d3 integration further by building new but simple `d3 uri requests convenience method https github com mbostock d3 wiki requests convenience methods using existing the d3 xhr constructor https github com mbostock d3 wiki requests d3 xhr code https github com mbostock d3 blob master d3 js l1922 l2013 benefice is an all in svg code easing sharing currently d3js generates svg with linked images svg append image attr xlink href file jpg attr width 960 height 500 attr class bg producing while this approach is valid it results into svg elements actually missing the rasters data which is externalized proposal to load the image jpg data convert into data uri string `var str` using js to replace by see demo code note didn tested if the data uri type extension should really match the image extension http bl ocks org hugolpz c59f79a9f52e3897c129 the js code to do base64 conversion have been discussed here http stackoverflow com 26595628 1974961 while are discussed there http stackoverflow com questions 28788468 the script successfully replace the href link by an href with valid and working data uri so the image is really embedded >>>req
index in d3 svg area function does seem to work in the docs for d3 svg area the function itself is defined as area data index with the index explained as an optional index may be specified which is passed through to the area accessor functions however can seem to get this working and judging from the code don think it even implemented an index is supplied to the accessor functions but only one generated inside the area function >>>docs
layout force handle case of zero weight on both linked nodes in this case treat both nodes as having an equal weight of arbitrary this fixes divide by zero error otherwise ve included signed off saying that the author of the code didn sign the contributor agreement since this falls under the trivial rule correct me if am mistaken >>>bug
optimize d3 keys native javascript object keys method is heavily optimized for the specified task http jsperf com object keys iteration 20 the native method does not perform on the object prototype and as such have concatenated the object keys with that of the prototype keys because based on previous implementation it seems the keys of the prototype is also desired concatenation is also more optimized than pushing http jsperf com concatperftest >>>perf
fix 2031 create map from an array the d3 map constructor can now be used to index the elements of an array by an optional key function providing convenient and faster alternative to using d3 nest before after note that the behavior of the d3 map constructor now changes slightly when sparse array is used previously missing elements from sparse arrays were skipped by the for in loop but now missing elements are indexed >>>req
sort ascending by key this would be so useful to have in d3 alternatively also supporting accessor functions but think that less often needed and possibly inefficient >>>req
fix extra stroke when drawing points the canvas arc commands starts at the positive axis so we must move there before drawing the arc rather than moving to the circles center >>>bug
named transitions fixes 24 2076 >>>req
add d3 product for arrays as discussed on the mailing list https groups google com msg d3 js 4epalwqwaom br6tjnpxazuj the cartesian product of two arrays is every way of choosing an element from each this is useful for grids and scatterplot matrices http bl ocks org mbostock 3213173 from which the implementation is taken signed the license agreement to cover the tests this adds only 134 bytes minified proposed documentation to be added under array pairs https github com mbostock d3 wiki arrays d3 pairs once released `>>>req
added compose as dependency of rotation note this may introduce circular dependency as ``projection`` imports ``rotation`` yet ``rotation`` imports ``equirectangular`` which itself imports ``projection`` but it looks like that hasn caused any problems >>>bug
examples gallery broken again in re 1822 the sidebar seems to have been added again it still hideous and it still breaking the examples gallery let 86 it once more >>>docs
optimize d3 map d3 set and selection data maps and sets now use `object create null meaning that we only need to escape the special proto property any other key is safe to set or get >>>perf
consolidate duplicate code saves 494 minified bytes >>>perf
d3 format 2f prepends minus there seems to be some issues with the specifier parsing in d3 format here is an example d3 format 2f 331 213 returns 331 213 as expected d3 format 2f 331 213 returns 331 213 as expected d3 format 2f 331 213 returns 331 213 but expected 331 213>>>bug
d3 median number converting not consistent the number conversion in the d3 median function is not consistent if there is one number value among other strings the conversion works as expected if there are solely numbers as string values the median string is returned however if solely characters are passed to d3 median undefined is returned here are some examples d3 median 20 returns as expected d3 median 20 returns as expected d3 median 20 returns 20 whereas expected d3 median returns undefined as expected>>>bug
fix coercion in d3 mean median fix d3 format fixes 2067 2069 and 2072 >>>bug
d3 mean not converting to number calling d3 mean on an array of strings will not give the expected result because the values are not parsed to numbers this can be bypassed easily with an accessor function but this behavior is different to the d3 sum function d3 mean will give 41 instead of expected where d3 sum returns the correct and expected value >>>bug
optimize d3 map set rather than always escaping keys with null prefix only escape keys that can conflict with built in properties either on object d3 map or d3 set by only prefixing these special keys we can avoid the cost of constructing new strings in the common case to check whether key is special we check whether it is in an empty map instance in addition keys that are already null prefixed must be prefixed second time to correctly unescape >>>perf
optimize selection data values key preallocate the keyvalues array and use single map with the sentinel value `true` to represent previously seen key before selection data values key enter 5ms op selection data values key update 7ms op after selection data values key enter 81ms op selection data values key update 1ms op >>>perf
fix d3 lab d3 hcl due to the tests using two different copies of d3 one loaded via require and the other via smash the instanceof check in the d3 lab constructor was returning false when testing for d3 hcl and this constructor was therefore never tested >>>bug
empty line segments not displayed in d3 svg line can get line chart to display single points in svg it get rendered as dot when move the pen to point and then do line to with the same coordinates at least with linecap different than butt noticed that d3 svg line just creates the moves of the pen is this intentional provided an example http jsfiddle net ntdwa4dv >>>bug
prevent leak of d3 global in node fixes 2006 >>>bug
fix 2010 check for nully not falsey >>>bug
fix d3 layout stack for empty input array fixes 2004 >>>bug
fix 2039 improve un interpolatenumber precision tl dr this ensures that uninterpolate always equals and interpolate always equals uninterpolate the use of reciprocal in d3 uninterpolatenumber to avoid division results in small loss of precision the following is paraphrase for there is no problem since as expected for we have and since cannot represent exactly we dont get but something very close to instead if we perform the division within the generated function we can ensure we always get for again for we simply have for we have interpolate similarly for d3 interpolatenumber we have small loss of precision this time due to subtraction paraphrased there is no issue for because we always get however for we get which might not be exactly equal to as desired the following will return precisely for >>>req
parsing of time offsets as per iso 8601 http en wikipedia org wiki iso 8601 time offsets from utc in addition to hhmm we should support hh mm hh edit we are already compliant with strftimes z` which means hhmm so its not clear whether we really need to support parsing the iso 8601 variants >>>req
dont set infinite transforms fixes 1968 test case http bl ocks org mbostock 219e9a38d8de73f3f9f7>>>bug
fix 2043 selection enter size >>>bug
allow ease duration to be set in tween factory since the transition duration is not needed until the first tick the duration can still be modified either in start event listener or in tween factory this allows behaviour such as d3 behavior zoom to use an arbitrary transition duration depending on the parameters available on transition start or during tweener generation the same applies to transition ease it is not needed until the first tick therefore it seems reasonable to read it after tweener generation >>>req
selection size throws error when called on enter selection calling the size method on an enter selection throws uncaught typeerror undefined is not function this appears to be due to the fact that the `selection each method is undefined for enter selections and is used internally by the `selection size method the problem can be resolved by having `d3 selection enterprototype` inherit the each` method from `d3 selectionprototype` in src selection enter js as is being done with the other methods available to enter selections including the size` method however not sure if doing this will introduce other issues the tests pass is there specific reason that the `each` method should not be inherited by the enter selection prototype >>>bug docs
fix 2040 parsing time zone offsets there was bug when parsing positive time zone offsets with non zero number of minutes the use of math floor on negative numbers rounded in the wrong direction replacing math floor with correctly truncates positive and negative values >>>bug
d3 time format bug for some time zones ahead of utc time zones ahead of utc that contain half hour or forty five minute increments don format properly using d3 time format see the following example var format d3 time format dt format parse 2014 09 13t02 02 00 000 0430 output sat sep 13 2014 01 02 00 gmt 0430 local daylight time as you can see an hour is being subtracted from the time the time zones this seems to effect are utc 03 30 utc 04 30 utc 05 30 utc 05 45 utc 06 30 utc 09 30 >>>bug
d3 scale linear should exactly map the domain endpoints to the range endpoints d3 scale linear domain 50 range 43 50 42 99999999999999 >>>bug
bug in d3 svg diagonal radial projection believe there is bug in the radial generator but before go on making pull request like to make sure that it not some kind of feature as understand it the projection function should allow the source and target position parameters to be stored in whatever manner necessary as long as it can be converted to two element array in line 14 and 15 of diagonal js this promise is violated as the generator specifically looks for an and element in source and target instead of applying the projection beforehand and working with the returned array is it me who misunderstand the usage of projections >>>docs
pipeline simplify optimization it doesnt appear to help that much when tried it but maybe theres way to do something like this >>>perf
easier d3 nest for unique keys it would be nice to have convenience method for this >>>req
d3 geo path doesn handle zero area polygons correctly d3 geo path sometimes renders polygons where all points are in straight line so no inside as an infinite area with line shaped hole the polygons are created by tilestache from postgis database and served as topojson the polygons start out as valid rhr geometries and are turned into lines due to the shift from floating point space to integer space see the drawing below example https cloud githubusercontent com assets 394323 4317788 2b755bb8 3f17 11e4 9bb7 8c7e235cba17 png if the order of the last three points in the topojson is changed the feature is drawn correctly ve setup page showing the difference here http research geodan nl sites vectortiling test faultytile html is there correct clockwise order for points on line if so it might be that tilestache is wrong here serving the points in the wrong order but following the above drawing the points are in valid order would think that if polygon has an area of the order of points doesn matter and d3 shouldn try to create an infinite area with zero area hole in it >>>bug
caspian sea winding order bug discovered this with the new graphics pipeline but suspect that it would occur with master as well screen shot 2014 09 17 at 59 40 am https cloud githubusercontent com assets 230541 4306770 aa4ffb9e 3e83 11e4 9583 e5a8cc4cde9d png http bl ocks org mbostock 29dcd63773f78f7bad26 b4bb2326a27ad489731143bd4dfb4f690ae079ea the pipeline is extremely short yay >>>bug
zoom behavior with custom scaling have added support for custom scaling while zooming with `d3 behavior zoom` example and changes in d3 api are described at http bl ocks org jchlapinski d51d9aca2084bc02f30b method `scalegenerator` was added to the zoom object as follows >>>req
add xextent and yextent to d3 behavior zoom fixes 1084 all of this code was contributed by mhsmith https github com mbostock d3 pull 1299 and reimplemented for the latest d3 version by lebolo these limit all actions to ensure the domain of the corresponding scale always stays within the given extent as well as panning zooming actions may also be limited in the zoom out direction if more than one of `scaleextent` `xextent` and `yextent` are provided the effective bottom end of the scale extent will be the most restrictive of the three if `scaleextent` and `x yextent` cannot be satisfied simultaneously the lower scale limit implied by `x yextent` is above the `scaleextent` then `x yextent` will take priority simple example http bl ocks org mhsmith 5732011 example with discontinuous and log scales http bl ocks org mhsmith 5734904>>>req
regression with pan and zoom with touch controls broke touch based pan and zoom in charts only work on every second gesture took me hours to find out that it was because of the newer versions is fine see it for yourself either on mobile or with chrome mobile rendering in devtools expected behavior http jsfiddle net ycrocx4t buggy http jsfiddle net ycrocx4t >>>bug
d3 dsv parserows strips rows when the accessor returns falsy values based on the documentation it shouldn persist rows that are null https github com mbostock d3 wiki csv parserows rows that return single falsy values false etc also do not get persisted this line being the culprit https github com mbostock d3 blob master src dsv dsv js l96>>>bug
moving averages itd be nice to have an easy way to compute moving averages of different types >>>req
winding order bug with rotated mercator hey jasondavies any chance you could look at this one was hoping to include rotating mercator in my foss4g talk but there appears to be winding order bug with the 110m dataset mercator https cloud githubusercontent com assets 230541 4180186 fd533f84 36ec 11e4 8a82 42c3d19208f3 png http bl ocks org mbostock c02925edd27c930dc27f >>>bug
using d3 in node pollutes the global namespace testcase in nodejs just requiring in d3 should not put itself on the global object >>>bug
d3 layout stack crashes on empty dataset if an empty dataset is handed to the d3 layout stack it seems that it crashes mainly because of the series length check repro hand in an empty dataset expected remains an empty dataset actual errors at the first element check>>>bug
append insert elements while setting class name and id in one call this allows condensing the very common action into single command this also works as well as or even combination of both happy to discuss options to improve the implementation details but it should work as expected added test and made sure that the existing tests are all passing edit changed the original proposal to the second parameter implementation which seems cleaner and much simpler to implement edit changed api back to original proposal which avoids second argument confusion when used in ``insert`` >>>req
fix group formatting and padding very small or large numbers use exponent notation when converted to strings if grouping is enabled and there is no decimal the exponent wasnt being ignored so the group separator was in the wrong place this also fixes bug relating to padding and thousands grouping the padding calculation assumed grouping of fixes 1972 1994 >>>bug
d3 format 1e42 corrupts the printed value due to mixing in of locale thousands separator 1e 42 ran into this one yesterday in bleeding edge d3 quick search turns up the same problem source caused another issue 1972 the key difference and why this is not duplicate of 1972 is that you run into trouble when you feed the d3 format generated formatters very large or very tiny numbers which force the javascript float to string conversions to forcibly output scientific notation you don want screen full of zeroes just because you happen to print the value 1e300 for example patch pullreq is coming up next so that you can feed the formatters arbitrary values and have your locale settings apply >>>bug
allow nodesize for trees to be dynamic request in ticket 317 nodesize for hierarchical layouts was introduced love this feature was wondering could this be made dynamic different sizes for different nodes not to good with the entire layout engine but be happy to be useful where can >>>req
quadtree delete node needed to build quadtree that can allows to delete add nodes it is first naive implementation each nodes keep reference to its parent delete method is called on root and accepts only leaf node at the moment users should keep reference to all nodes typically via the visit method >>>req
add base locales before providing dialects while trying to use the locales d3 provides noticed that there are quite some dialects en us en gb pt br but not the base locales it is missing en fr de pt es locales that allow you to show something even if the specific dialect is not yet localized can you please change this in my view dialects should be the second step after base locale has been provided to allow to show something at least understandable to native speaker even if his specific locale is not yet supported this request comes from the fact that almost all localization frameworks are able to fall back to more generic locale if the specifically requested locale is not available but are unable to use specific locale as fallback if another specific locale is asked for did provide some pull requests that add german https github com mbostock d3 pull 1976 and french https github com mbostock d3 pull 1979 base locales is there reason you would not want to provide base locales first would you take my pull requests for more languages >>>req
double click with d3 behavior zoom should use an animated transition something like >>>req
improve inline docs on albersusa in albers usa https github com mbostock d3 blob master src geo albers usa js some numbers are not documented line 44 45 it could be helpful to those trying to create custom projections to know where these numbers are coming from from where we can get them from the shapefile topojson what do they mean on the final projection this is also valid for lines 110 onwards the constants are difficult to understand >>>docs
add transition interrupt event >>>bug req
add support for cubic bezier easing functions working with css ve become accustomed to specifying easing curves using the cubic bezier notation transition timing function http www w3 org tr css3 transitions transition timing function property nominally the format for specifying the curves is c1x c1y c2x c2y if you re unfamiliar with them you can experiment with them live http cubic bezier com there already fantastic mit licensed implementation gre bezier easing https github com gre bezier easing love to contribute to d3 and integrating this would be good first patch for me to get my feet wet assume ll be vendoring in the actual source since d3 has zero dependencies any other guidance before convert this to pr >>>req
translocation graph working example http bl ocks org rkophs d6292eb6453981dc3821 this is somewhat similar to the existing d3 chord layout http bl ocks org mbostock 4062006 however this allows one to show relationships or translocations between specific areas of group entity this is especially useful in trans location graphs used by many research areas in genetics examples at http circos ca intro published images tried to implement this layout similarly to the existing chord layout for simplicity however also understand if this is better seen fit as plugin rather than baked into the d3 source up for suggestions >>>req
d3 format 000 is confused by very small and very large numbers d3 format 000 1e d3 format 000 1e 25 d3 format 000 1e 25 expected 000 000 1e 25 1e 25 actual 000 000 1e 25 1e 25 >>>bug
ticks is ignored when zooming out in logarithmic scale usually when zooming out d3 is automatically updating the axes and removing ticks to fit the set ticks value but in the below example it not working instead it just adding more and more ticks am doing something wrong here http codepen io anon pen ebpne>>>req
d3 svg axis avoid setting invalid transform attr fixes 1968 for example when switching from linear scale to logarithmic scale some of the exiting ticks might be positioned at infinity in the new scale zero and negative numbers this can cause warning to be logged in the console due to the resulting invalid transform attribute the warning doesnt prevent the rest of the axis from functioning normally even though it is logged as an error but it is preferable to avoid setting invalid attributes >>>bug
axis function throws error when switching between linear and logarithmic scales the call axis throws an error when switching between logarithmic and linear scales and the linear domain crossed contained the log domain is always adjusted before calling the axis function the axis function seems to try to call scale for the tick label and fails because it wants to translate to infinity copied one of the public code samples provided on the axes documentation page and adjusted it to demonstrate http codepen io anon pen hsbat click change button on top right side to see the error >>>bug
array min max change array min and array max to return the element of array when is passed function >>>req
make sticky treemaps stateless as mentioned in the documentation https github com mbostock d3 wiki treemap layout sticky implementation note sticky treemaps cache the array of nodes internally therefore it is not possible to reuse the same layout instance on multiple datasets to reset the cached state when switching datasets with sticky layout call sticky true again since version 25 hierarchy layouts no longer copy the input data by default on each invocation so it may be possible to eliminate caching and make the layout fully stateless making the current behaviour stateless is quite simple but would be nice to support addition and removal of nodes too and this requires bit more thought particularly if the ordering is to be respected think its reasonable to assume that the order of existing nodes does not change but we should support nodes being inserted in between other children rather than only being appended >>>req
allow amd users to disable the global can understand the recent change to create global even with an amd loader present however think solution like used by moment js is much more elegant http momentjs com docs use it require js it would involve some extra code to introduce an amd configuration parameter to prevent the object of being globally exported this will keep the behavior you have now but it allows those who don want to pollute their global namespace to keep things tidy another option would be to make the changes they want to do by going back to not creating global by default for amd and adding instructions how an user can export the object to the global namespace themselves though it up to you to decide on that ll see if can find some time to create pull request later today it should be only few lines of code >>>req
fixed shift key blocking scroll wheel zoom when the shift key is down zoom scrolling behavior ceases to work because only d3 event deltay is being checked for the delta this behavior is typically only noticeably in chrome as holding the shift key while scrolling in chrome scrolls horizontally which causes the deltax property to be set and the deltay property to be to reproduce this behavior navigate to http bl ocks org mbostock 3892919 in chrome place the mouse over the grey grid and hold down the shift key while scrolling try without the shift key pressed >>>bug
large quantity force layout performance requesting an option to allow the force layout simulation calculations to be optimized accelerated for large graphs consisting of hundreds or thousands of nodes really not sure what the issues at play might but many people have them svg gpu acceleration doesn seem to help perhaps webgl version >>>perf
invalid namespace for attributes error when adding custom namespaces to svg element when trying to add custom namespace as attribute to the `svg` element get the following error `uncaught namespaceerror failed to execute setattributens on element http www w3 org 2000 xmlns is an invalid namespace for attributes need to add custom namespaces to the `svg` element to create valid svg document that can be used to extract semantic data with the w3c rdfa validator http www w3 org 2012 pyrdfa validator html distill by input thats how tried it the result should looks like this `>>>bug
d3 image might be nice to have d3 xhr style method for loading images this is close but lacks most of d3 xhrs niceties like aborting the image request setting headers multiple callbacks etc >>>req
bar iii tutorial missing lot particularly ticks the tutorial at http bost ocks org mike bar reaches point of with axes we can now remove the labels from the bar the complete code copying and pasting that results in single blue rectangle filling the entire and space plus axis just prior to that point the resulting code created graph with the appropriate number of bars and an axis with one tick at the beginning and one at the end but no ticks under each bar following the link to the completed example http bl ocks org mbostock 3885304 ends at page where much has been changed between the tutorial text and the actual source code >>>docs
parsing week numbers using d3 time format hi have problem parsing weeks using d3 v3 have dates in format like `2014 19` but the format is not problem since have the same problem using `2014 19 `2014 19` and so on is it possible to parse such string using w` or u` because obtain as result always the date corresponding to the 1st of january 2014 also parsing months years days and it works well only weeks are not working thank you michele>>>bug
allow alignment of `ordinal rangeroundbands` `ordinal rangeroundbands` is very useful to create nice sharp bar charts to accomplish this it calculates error pixels and distributes them 50 50 to the start and end of the range however when creating bar chart often an author wishes to left align it error pixels are also sometimes incorrectly identified as padding probably in pursuit of alignment see https github com mbostock d3 issues 1592 as an api consumer it would be nice to decide where those pixels go code https github com mbostock d3 blob master src scale ordinal js l72 maybe an additional parameter `align` center default `math round error left `0` right `error` >>>req
add getters for transition attr style text proof of concept for 866 >>>req
d3js blocked by content security policy when the server sends restrictive content security policy header http content security policy default src self script src self img src self the following error comes up in firefox content security policy the page settings blocked the loading of resource an attempt to call javascript from string by calling function like eval has been blocked and similar to that of chrome refused to evaluate string as javascript because unsafe eval is not an allowed source of script in the following content security policy directive script src self the culprit is the following code where function object is being created js dsv parse function text var return dsv parserows text function row if return row var new function return row map function name return json stringify name join function row return row the following replacement looks sensible to me am missing something js dsv parse function text var return dsv parserows text function row if return row var function var row foreach function name name return function row return row best regards uu1101 edit fixed code>>>req
zoom behaviour on svg with pinch wrong translation reference zoom behaviour always works as expected with scroll and drag events if pinch is involved tested in safari on iphone ipad it still works fine if zoom behaviour is attached to canvas element if it attached to the element inside the svg tag pinch to zoom works as expected only if the svg element is located at the top of the page if svg element appears around 700px below zooming with pinch doesn keep the zoom centre in the location of fingers but moves the whole element down on the other hand if svg element position style is set to fixed or absolute with any value for top zoom centre stays at the touch point >>>bug ios
add quadtree find >>>req
feature request illustrators outline stroke am currently working on project which uses d3 svg line svg path and some custom interpolations then style the stroke of the resulting shapes using stroke have limited styling options like to be able to fill line one colour and then give it stroke in different colour for example if was using adobe illustrator could select line give it stroke width then choose to outline the stroke resulting in new shape with an area to fill and edges to stroke have found simple solutions for straight lines such as this one http stackoverflow com questions 20527186 add borders to svg path d3 javascript however my lines with interpolations are curvy and unfortunately the maths involved is way over my head think this feature would allow greater styling flexibility and could be popular thanks >>>req
add ordinal rangeroundpoints fixes 1760 >>>req
voronoi triangles fails with square rectangle d3 geom voronoi triangles returns only one triangle when given points that consists of rectangle var 100 200 vertices console log d3 geom voronoi triangles vertices length shows vertices 001 console log d3 geom voronoi triangles vertices length shows and hope any accessor to edges variables inside especially info about index based triangles >>>bug
feature request weighted voronoi weighted voronoi would be great as described here http en wikipedia org wiki weighted voronoi diagram each coordinate could take an optional third value which is multiplied with the calculated distance to that coordinate so the multiplicative variant perhaps just an optional extra argument to voronoi with index corresponding array of weights would be even more awesome if an option could be supplied to choose whether to use multiplicative or additive weighted seems to me if one is implemented the other can be much more work when looking at the voronoi sourcecode it very quickly dives into core d3 code which know nothing about so not able to add this myself >>>req
re did hierarchy to have flare json based tests updated the tests for hierarchy to have them be flare json based as per 1888 not sure if the data should be inline or not >>>test
brush misbehaves with overlayed elements containing data when brush container contains an element with data mouse events on that element are treated as being on the resize rectangle ve created fiddle demonstrating the issue here http jsfiddle net t9sdl and fiddle demonstrating the correct behaviour here http jsfiddle net t9sdl to reproduce create small horizontal extent with the mouse drag from point on the path element that is not under the extent behaviour experienced the extent resizes as if we were dragging the edge of the extent despite how far the mouse is from the extent expected behaviour the extent redraws from the mouse location the salient difference between the two is how the data gets into the path element the failing case the working case looking at the d3 source this line appears to have the problem specifically the part resizing eventtarget datum in the fiddle case the eventtarget is the path element which can have data attached assume this code is using whether data is attached to detect whether the event target was one of the resize rect elements that get generated >>>bug
indented tree layout currently http bl ocks org mbostock 1093025 uses d3 layout tree but it doesnt need to compute the tidy tree layout it would be nice to use d3 layout hierarchy directly or alternatively to have d3 layout indent or something that computes trivial indented tree layout >>>req
hierarchy layouts need better tests should at least have flare json based tests tests for the sticky treemap layout would also be useful and have caught the bug >>>test
d3 geo centroid returns wrong center point sporadically hi first amazing library just love it second d3 geo centroid geojson returns wrong center point sporadically so we use the library to draw field boundary images based on their shape files and some times the centroid method returns wrong values here is the example and centroid returns 47 60400121296362 45 71544855927304 while real center should be 94 455144 37 9386175 >>>bug
fix hierarchy revalue post order traversal alone causes all parent values to be reset to zero after accumulating child values an additional pre order traversal resets all parent values to zero first and the post order traversal can then accumulate child values in their parents this only affects sticky treemaps >>>bug
properly document geom voronoi voronoi links https github com mbostock d3 wiki voronoi geom links is literally completely undocumented voronoi triangles https github com mbostock d3 wiki voronoi geom triangles is underspecified one can infer it returning the delaunay triangulation of the vertex data but the contract is only to return an array of triangles `function return would meet this contract the example http bl ocks org mbostock 4341156 linked to uses the undocumented `d3 geom delaunay the representations are undocumented throughout the module where they follow general pattern explained elsewhere link would suffice in particular what are the js representations of polygons vertices the clipextent rectangle link and triangle >>>docs
d3 layout tree rangeerror maximum call stack size exceeded the tree layout is implemented recursively which can throw rangeerrors when given particularly deep tree the tree layout should be reimplemented using stack so as to avoid this error >>>perf req
d3 shuffle array i0 i1 it might be nice to shuffle subset of the array >>>req
remove all listeners with selection on null this removes all listeners namespaced or not for all elements in given selection related discussion in 894 havent personally needed to use this but we can discuss further in this pull request whether its worth supporting >>>req
behavior zoom on multi touch android locks up hi experiencing an issue with tree graph based on http bl ocks org robschmuecker 7880033 using chrome for android but it also seems to happen in firefox for android d3 version is the problem seems to occur when start panning my layout with the first touch being over node when add second finger outside of the node but inside the svg and let go of the first touch the zoom behavior stops working except for doubletap zoom the only way to get the zoom behavior back is by starting it on the initial node or manualy readding the svg on zoom zoom think the problem is caused by the last touch event not having the same target as the initial touch ve read some suggestions where pointer event are captured by an overlay to make sure everything has the same target however need my nodes to be clickable using zoomstart and zoomend events to dynamically add an overlay doesn seem to work because the overlay gets added at the first touch so my nodes still aren clickable managed to replicate the error in the above example by pressing on the root node placing my 2nd finger to the left of the graph and lifting my first finger >>>droid
on safari d3 time day returns am for some time zones moscow standard time for example you can look at this page http bl ocks org mbostock 3883195 as you can see instead of year is displayed 01 am do you know how to fix this bug screen for d3 https cloud githubusercontent com assets 1280250 2698743 29f5c3ca c3fe 11e3 9059 46036e0919a6 png >>>bug webkit
d3 median is slow log instead of hello again d3 median is calculated using `d3 quantile array sort d3 ascending that is as crazy as sorting the whole array just to find the maximum median should be implemented using selection algorithm http en wikipedia org wiki selection algorithm which is able to find th smallest number in for an unordered array `array prototype sort` of course can not have complexity better than log for an average case https en wikipedia org wiki sorting algorithm comparison of algorithms also see http www cplusplus com reference algorithm nth element http en wikipedia org wiki quickselect average worst case http en wikipedia org wiki median of medians average worst case >>>perf
treemap improvements there should be way to specify padding between leaf nodes so that you dont need to use stroke to separate them or worse subtract pixel and then lose small nodes entirely the rounding algorithm still seems buggy when there are lots of small nodes but that might be because of the above >>>req
d3 geo voronoi this would probably make good plugin rather than for core since dont know how frequently it would be used but jasondavies and discussed this in the past so wanted to write it down somewhere lots of people take the 2d voronoi algorithm and apply it to projected coordinates but this is misleading probably especially in mercator with alaska because of the distortion of the projection and because the topology of plane is different from sphere edit what thought was an example of this bad practice was actually done correctly using spherical voronoi diagram generator http lpetrich org science geometrydemo geometrydemo gmap html heres what it made n33uy3a https cloud githubusercontent com assets 230541 2593595 15270f82 ba83 11e3 8857 c3f1e07b8896 jpg however you can see some artifacts resulting from the petrichs generator sampling the great arc edges as polygons d3 could do better job here using adaptive resampling with the edges between polygons being great arcs rather than pre sampled an algorithm for computing voronoi diagrams on the sphere http citeseerx ist psu edu viewdoc summary doi 10 19 6737 doesnt look too complicated you transform the points and then compute planar voronoi and then some additional magic dont yet understand itd be nice if we could release an easy to use d3 geo voronoi that did the right thing returning geojson polygons for cells in spherical coordinates >>>req
unlike d3 rgb d3 hsl doesnt special case brighter black original title d3 hsl 000000 evaluates to nan for hue and saturation if create an hsl object from the color string 000000 black it comes with nan values for its and properties would expect something like instead in consequence am not getting lighter color gray when issuing `d3 hsl 000000 brighter the result remains the same with the nan values >>>bug
better fix for d3 geo conicconformal rather than clamping latitudes to we preserve infinite coordinates and correct the issue where infinity resulted in nan instead we substitute which appears to fix the problem in 1802 includes tests and fix for the inverse projection >>>bug
directive and tests for issue 1782 provides time format directive for signed digit year>>>req
firefox touchscreen zoom hi when use touchscreen device with firefox have strange behavior in zoom first the tipical pinch will zoom the page instead of the element second if change the browser gesture pinch in firefox about config the pinch gesture don do nothing and last when swipe up and down it will zoom and pan at the same time thx bruno>>>moz
d3 svg brush should support multitouch the brush currently doesnt support multitouch see 1792 for related discussion itd be nice if it did >>>ios req
d3 geo conicconformal winding order bug in the following simple example the world json file is created as results in black screen screen shot 2014 03 22 at 10 10 36 am https cloud github com assets 230541 2491282 f050195c b1e4 11e3 95a6 0d5989292a36 png http bl ocks org mbostock 1edb4dd29bec26a48982 3c62783844f56819cb70996f05701b6ae1f4e63f switching to the 50m http bl ocks org mbostock 1edb4dd29bec26a48982 ad91bbfb001289dfcdfcbc0ba0b14ba1bcf4fe09 or 110m http bl ocks org mbostock 1edb4dd29bec26a48982 7adfa068b0b6b87c402b429f38929287fee5d6ca datasets does not appear to help however and this is little weird pre projecting the 50m dataset seems to produce the desired result perhaps because it isnt preserving polygon semantics screen shot 2014 03 22 at 10 19 11 am https cloud github com assets 230541 2491305 1bdac8c8 b1e6 11e3 8bfc 1e819e88054e png http bl ocks org mbostock 1edb4dd29bec26a48982 8b88fcde37cd8100d479ea9cf487347577846114 ive also noticed that using no stitch poles` fixes the winding order http bl ocks org mbostock 1edb4dd29bec26a48982 1f61deac761f0543539e2ede6591922f3719958b with the 50m dataset however this appears to be coincidence as well since this does not fix the 110m or 10m datasets tried using the adder branch and the preserve polygon semantics fix in d3 and those didnt appear to help either but im not sure tried all permutations >>>bug
pointer events for the drag behavior >>>bug ms
during multitouch getscreenctm is very slow on ios during touchmove events with multiple touches even if those touchmove events disable page zooming calling getscreenctm is extremely slow and exhibits choppiness while dragging elements due to the use of d3 touch which calls d3 mousepoint and needs the containers transformation matrix to convert the pointer screen coordinates to local coordinates this slowness appears to apply to getctm getscreenctm gettransformtoelement scrollx scrolly pagexoffset pageyoffset webkitconvertpointfrompagetonode which appears to ignore transforms on elements im not sure if theres fix here because it would be difficult for d3 to cache the transformation matrix and know when to invalidate it because many things can cause the transformation matrix to change >>>ios perf
d3 timer replace and d3 timer reschedule transitions currently use the internal d3 timer active variable to reschedule the active timer and replace its callback function itd be nice if we made these methods public so that you can easily stub out the d3 timer api or use similar functionality when implementing complex custom animations >>>req
undefined is not an object if elements removed during d3 behavior drag the `d3 behavior drag` logic does not handle situations arising when touched object is removed within the dom during among other things namely if the object on which the touchstart event was fired is removed from the dom the current drag stops emitting events and then the subsequent drag throws uncaught undefined is not an object exceptions the reason is that during subsequent time the old event handlers are still registered but touchposition https github com mbostock d3 blob 25630484b8f895737e8a781ffe3fb850ace8ef8b src behavior drag js l25 doesn find matching touch so the dx dy variables assignments in move https github com mbostock d3 blob 25630484b8f895737e8a781ffe3fb850ace8ef8b src behavior drag js l53 attempt to index undefined instead of the expected element array the root cause is that touch events are all supposed to be dispatched to the original element regardless of whether it remains with its original ancestors see for bit more discussion of this troublesome standard behavior tried checking `if return ended which kind of avoided the problem but left the drag events firing in lousy order personally not super excited with the current drag implementation overall most notably its handling for multiple fingers is broken in general thinking of trying an approach more along the lines of pointer events http www w3 org tr pointerevents wrapper simulator instead that would be useful for cross platform zoom too and in my case it was better to workaround with `sel style display none on dragstart drag removing on dragend than prematurely end the first drag anyway note that any fix might also be relevant to the zoom stuff and or `d3 svg brush` haven reviewed or tested but it looks like especially the latter does its own handling why isn it using d3 behavior drag >>>bug
add date interpolation and tests this enhances the built in interpolation routine to correctly handle date objects this is how it can be used >>>req
transitions do not support get for delay and duration related 866 867 1772 >>>bug
add quadtree find method for finding the closest point to given location http bl ocks org mbostock 9078690 as an alternative to voronoi diagram seems like suitably complex but useful method for inclusion should support maximum search radius returning more than one result closest might also be interesting but probably not worth it >>>req
d3 time format multi mutates array passed in read through the api and it doesn seem that this is the desired behavior is this the desired behavior >>>docs
d3 layout pack overlap ve been seeing occasional overlaps when using `d3 layout pack it seems to only happen when there are quite lot of zero size data elements at the beginning of the dataset and the dataset is unordered http bl ocks org j0hnsmith 9272589 if the zero size items are removed from the start of the dataset the overlaps don happen >>>bug
missing `rangeroundpoints` if there is `rangebands` and `rangeroundbands` shouldn there be `rangeroundpoints` use case drawing line chart using `ordinal rangepoints` and want to draw vertical background tick lines using the same ordinal scale and they should not be antialiased right now there seems to be no other way of doing this than doing manual rounding on the scale output >>>req
d3 svg axis should preserve tick ordering currently the axis does not guarantee the ordering of ticks across updates it would be nice if it did >>>bug
consistent si prefix for ticks something like this per 1722 this implementation probably isnt perfect needs adjustable precision suitable behavior when only one tick and needs tests >>>req
d3 and custom data attributes example doesn work with d3 v3 this http bl ocks org mbostock 1323729 doesn seem to be working with d3 version jsfiddle http jsfiddle net znqep example is linked from the api documentation and doesn match the description in there https github com mbostock d3 wiki selections wiki datum api doc says the datum method is useful for accessing html5 custom data attributes with d3 but map is used instead of datum in the example pity it doesn work since what hoped to do is this var selected d3 selectall elelement li selected map function return this dataset map function return id instead ended up doing this var selected d3 selectall element li selected datum function return this dataset each function selected push >>>docs
add text wrapping routine adds textwrap function which can be configured with bounds and padding and applied to text selection using call and will then auto calculate text length and positioning for dividing into tspans accordingly >>>req
`dragend` fires immediately in ie11 with touch might be in venn diagram intersection of my own but ve got this windows laptop that trying to get touch support worked out for in chrome32 and firefox 26 dragging works with both mouse and touch http jsbin com ibucogiw 18 in ie11 though when dragging with touch `dragend` fires immediately when dragging with the mouse it works fine that it in nutshell but to further seclude myself and potentially aid in fix dragging with touch works if embed an activex control into the element being dragged not entirely sure what including the activex control does to the div or the event chain but for some reason the `dragmove` event starts firing via touch when it in there http jsbin com edewusam it got the windows media player classid in there now but actually using fbvlc will post more if can figure anything out >>>ms
styletween and attrtween dont preserve `this` context when invoking tween >>>bug
replaced division with multiplication this is actually twice as fast http jsperf com multiply division >>>perf
selection classed true should be noop not an error >>>bug
d3 svg line area copy would be nice to have an easy way of copying an existing d3 svg line or d3 svg area similar to scale copy >>>req
click events in zoom behavior are suppressed in ie as it triggers mousemove on mousedown the zoom behavior seems to listen for mousemove to discern clicks from dragging https github com mbostock d3 blob master src behavior zoom js l170 l180 ie 11 on the other hand seems to trigger mousemove immediately on mousedown which in turn ends up suppressing all click events inside the element for which zoom behavior is called this issue is demonstrated here http jsfiddle net erql3 maybe setting the dragged flag should be delayed on ie couldn find references as to how browser detection is done in d3 >>>bug ms
d3 set map should support size and empty methods >>>req
d3 random tests see issue 539 539 has been around for years it about time someone got it done closes 539 >>>test
text wrapping routine it might be useful to expose this as d3 svg textwrap live example http bl ocks org mbostock 7555321>>>req
chrome canary exhibits rendering artifacts as reported here https twitter com jjczaplewski status 402072454186541056 in the initial investigation it seems like d3 geo path is generating different results on canary so the problem is not in svg rendering but in the path creation the canary path looks like this whereas the correct stable release looks like broken static version http bl ocks org mbostock adcf8e2a6261aad9b1fd correct static version http bl ocks org mbostock 2e244e7ab7529f39f9e6 dynamic version http bl ocks org mbostock 9d6776acbdf71780041a>>>bug
d3 id for managing unique identifiers it might be useful to have d3 id method which returns new unique identifier say of the form d3 d3 this could make it easier to manage references between gradients and associated elements for example >>>req
coerce name argument to selection classed to string old title make d3 classed robust against undefined or empty string first parameter d3 classed explodes on ie 10 and below if you hand in undefined as the first parameter optionally setting it to like this doesn work however as the underlying classlist implementation used in modern browsers then explodes because it does not support adding empty classes instead what is needed is full on `if around the call to make it work which is clumsy and hard to get right everywhere indeed it should be just >>>bug
add children ancestor and parent methods to d3 selection this overly ambitious pull request proposes some new methods for the `d3 selection` prototype selection children selector selects just the child nodes optionally filtering by selector or function so this becomes my primary motivation was to make it simpler to restrict selections to node children doing this outside of the d3 internals quickly discovered that just filtering by selector meant having to reimplement `d3 selectmatches by finding the vendor specific implementation probably going to issue separate pull request to expose that api too selection parent selects the parent node of each node in the selection it just shorthand for `select function return this parentnode but see below for potential gotcha that also applies to ancestor selection ancestor selector selects the ancestor parent grand parent etc of each node in the selection that matches the provided selector or function if no selector is provided we just return `this parent the motivation here was to make it easier to move up the dom from given selection for instance of you want to add click handler to link that toggles specific ancestor active state this is particularly useful in situations where you don have any control over how the dom is structured but you know the selectors of the elements you re targeting the alternatives look like this and they suggest either having access to an existing selection which may or may not have changed by the time the event handler gets called or re selecting the containers neither of which should be necessary and in some cases may not be possible question should `selection ancestor function receive the data bound to the parent node that what doing now or should it receive the data of the current selection the latter probably makes more sense but wanted to get this out there for gut check before spend any more time on it question how should multiple element selections behave when you select their parent or ancestor for instance in this example `list` becomes multi selection of the same `ul` element which probably isn right maybe `parent and `ancestor should always return new selection of the first node parent or ancestor using `d3 select instead of using `this select the included tests aren fully fleshed out but the few that ve added pass let me know what you think if children is good but parent and ancestor are too complicated or problematic happy to modify or issue more specific pr >>>req
kriging spatial interpolation recently had need to plot some geographical data on map temperature precipitation this data is collected by our national weather stations which only supply scarce dataset interpolating data to plot whole map seems to be whole science on its own see http knmi nl actueel for the maps which interpolate measurements and add contour lines as d3 is becoming the best mapping library know of maybe the next step would be to support advanced spatial data plotting kriging seems to be the algorithm to use luckily there is js implementation already at https github com oeo4b kriging js see https github com oeo4b kriging js issues for two example links maybe this is another awesome feature to add at some point in time to the already amazing d3 thanks for making d3 anyways >>>req
another reason why tutorial is misleading so it http mbostock github io d3 tutorial bar html has this code so one might think we are actually running transition on new item to slide it from into which is not how it works at all in fact everything after enter insert transition is ignored it simply never does anything you can verify it with this modification if you expect new item to jump from to 10 like did you will be surprised new item does not move at all and only slides to the left when it in exit selection >>>docs
moving averages itd be cool if d3 svg line and d3 svg area supported moving averages as method of interpolation or something similar that made it easy to apply >>>req
weighted mean hi just realized there is no method to compute the weighted average value of an array see two main ways of doing it adding third optional argument to `d3 mean` that specifies the way to access the array to get the value of the weight writing new `d3 weightedmean` function which one would you prefer >>>req
drag behavior acts inconsistently for multiple touches the d3 behavior drag registers an own set of event listeners for each individual touch and it dispatches drag and dragend events per touch there are currently two inconsistencies when one touch is released touchend event received all touches dispatch dragend event and unregister themself the consistent behavior would be to just dispatch dragend event unregister the specific touch that was released each time the browser sends touchmove event all touches in the drag behavior dispatch drag event the consistent behavior would be to check the event changedtouches list and only dispatch drag events for those touches that actually moved these issues would be very easy to fix simply check whether the current touch is in the changedtouches list of the touch event and if not just ignore the event in the moved and ended functions here method that checks whether touch changed >>>bug
initial drag event slugish on android tablet in our application we have noticed slow responsiveness on drag events in d3 using an android nexus 10 tablet running android and chrome 30 d3 is version screen shot 2013 10 22 at 19 45 pm https cloud github com assets 28356 1385084 da4c3c6a 3b58 11e3 83d6 d6cfc2f1c2bb png in our app we have you can drag the green circles above around we update the position using `d3 select this attr cx draggedpointxcoordinate cy draggedpointycoordinate in drag handler after touching circle and moving your finger there is noticeable guess 150 200ms delay before the circle updates its position to where your finger is the first time once its gotten over this initial hump the circle position tracks your fingers position pretty well its only that first update that has delay this delay is observable even with very simple code like replacing the drag handler code with `this setattribute fill red console logs put inside the drag handler are visible immediately its just that first ui update that is delayed using android remote debugging and the timeline view saw screen shot 2013 10 22 at 17 31 pm https cloud github com assets 28356 1384943 245133da 3b57 11e3 8527 bc41373e8fd1 png you can see there is an initial long recalc and paint step after the first drag event the first drag event is longer than usual and has warning icon that recalcing is going on within the browser clicking on the line number the problem was setting the userselect style twice in the drag suppress function https github com mbostock d3 blob master src event drag js l17 when comment out the two lines that set this style the initial performance delay is gone no recalcs initial touch event is only 4ms and it feels snappy screen shot 2013 10 22 at 36 06 pm https cloud github com assets 28356 1385129 a273e4d6 3b59 11e3 967d 13cc881cc144 png we re going to keep this functionality commented out as it isn needed for but sounds like it is for or not sure if there is solution to handle both cases other than making this configurable option could help with that and supply better demo than these screenshots if we think theres way to fix this >>>droid
allow min max to be used as high order functions right now d3 min and d3 min require little extra work if you have nested arrays this pr requires that the second argument to these functions be function before it is called as an accessor this allows you to do things like `twolevelarray map d3 min or `d3 min twolevelarray d3 max >>>req
removing and adding back an element breaks event listeners in ie if you remove and add back an element to its parent this is necessary to move the element to the top of the element stack event listeners on the element doesn work well working example is here http jsbin com ujirawag edit on ie the mouseout event listener doesn work at all and the click event listener behaves as if it is dblclick not sure whether it d3 bug or ie bug the latter seems more likely though update even re adding the listeners doesn work http jsbin com ilexeno edit >>>ms
quadtree js miss math abs recent commit of quadtree js miss to import math abs js th oct alias math abs commit also think the dependency on svg line should be dropped from quadtree can open another issue for that mentioned briefly in 1150 also regards fredrik blomqvist>>>bug
d3 layout tree children not update when updating my model the d3 children attribute is not updated if remove all children from the model have hierarchy model which works great initially if remove all the child nodes branches the d3 children attribute is not updated on the node this then causes dead links to get created because the links function is looking at the node children using release and making the following calls >>>bug
geom voronoi sometimes throws an error am using voronoi to make simple radnomized drawings it works great most of the time but once in while throws an error typeerror cannot read property of null is it know error is there some points for which there is no voronoi tesselation that can be calculated for example this happened with the following data set >>>bug
performance regression in clipping unfortunately it looks like b0659e0ce28d08faf88cd9c4086bf9d2022ac85d is major performance regression in the rotating ocean example http bl ocks org mbostock 6713736 in get reliable 60 fps but in get about 20 fps created revert clip extent branch https github com mbostock d3 tree revert clip extent to test heres the difference see in the cpu profiler before screen shot 2013 10 10 at 23 22 pm https cloud github com assets 230541 1311452 7bcb5bae 320b 11e3 820c f4de3fcd763a png after screen shot 2013 10 10 at 23 32 pm https cloud github com assets 230541 1311453 81de131a 320b 11e3 99ef c9035d1eddc7 png so lot of time in d3 geo pointinpolygon and d3 geo clippolygon naturally >>>bug
tangent space projection this is first stab at basic tangent space projection for now it does not support general rotations of the sphere just shifts in longitude resolves 1554>>>req
parent insertbefore child undefined is illegal in ie9 we need to pass null instead >>>bug ms
d3 geo clipextent doesnt preserve polygon semantics of geometry stream jason and were debugging winding order issue http bl ocks org mbostock 0e46bdc044a82aa0ee0b and uncovered an interesting issue in d3 geo clipextent although it outputs the rings in the correct winding order it does not properly group exterior rings and interior rings using stream polygonstart stream polygonend for example if you have an exterior ring that is split into two exterior rings this should be represented as stream polygonstart stream linestart stream point stream lineend stream polygonend stream polygonstart stream linestart stream point stream lineend stream polygonend instead the clipextent outputs stream polygonstart stream linestart stream point stream lineend stream linestart stream point stream lineend stream polygonend since the additional polygonend polygonstart is missing stream listeners might assume that the second line is an interior ring hole rather than the second exterior ring of multipolygon >>>docs
optimized array push used in many files ref 1bec3a67b>>>perf
missing d3 geo path perimeter method for symmetry with path area d3 geo area also rename d3 geo length to d3 geo perimeter since we cant override function length >>>req
detect when tweens can be applied instantly without interpolation tweens should perform an instantaneous action rather than interpolating if the tweens are created when the transition is ending as in zero duration transition either by setting an private variable d3 transitiontime or by passing an additional argument to the tween factory >>>req
the axis component pollutes an ordinal scales domain when it has an explicit range per seanparmelees comment https github com mbostock d3 commit 06e2077ff84a1db94b8e0d9274d4e5bfad82cd5d commitcomment 4191503 >>>bug
implicitly adding domain values to an ordinal scale does not trigger re ranging unless the scale is copied an interesting side effect of the axis inadvertently adding old tick values to the new scales domain 1535 is that normally this does not trigger recomputing the range bands or range points thus leaving the domain and the range of the ordinal scale temporarily inconsistent however if the scale is then copied via scale copy the range is recomputed for example this behavior causes the axis to render the ticks differently than the specified scale so one of these fixes is necessary ordinal scales should recompute the range whenever the domain changes including when value is implicitly added ordinal scales should never implicitly add domain values when an ordinal scale is copied the range should not be recomputed even if there are implicit domain values the first solution is tempting since that keeps the domain and range always consistent and in practice we only expect to recycle range values when using the ordinal scale as categorical scale such as color palette on the other hand if rangebands or rangepoints is used then by implicitly adding values we change the behavior of the scale for earlier values the scale is no longer internally consistent the second solution wouldnt work in the case of categorical scales obviously since its useful feature to build color palette implicitly through the use of the scale rather than needing to precompute the domain explicitly on the other hand its never the case that you want to build the domain implicitly when using rangepoints or rangebands so it probably makes sense to implicitly add domain values only when bare range and not rangepoints or rangebands is in use the third solution would also fix the immediate problem but still leaves the domain and range inconsistent so the behavior of the scale would change when calling `x domain domain so think we should start with plan >>>bug
axis transition with ordinal scale broken since this problem occurs since updating from to and probably has something to do with 06e2077ff84a1db94b8e0d9274d4e5bfad82cd5d have graph with an ordinal axis to which the user can add and remove items since the update to after removing an item and updating the domain to reflect this the position of the ticks and labels on the axis don update however the value of the labels and the position of the datapoints on the graph are updated correctly relevant code on update quite possibly this caused by me relying on something shouldn be relying on but can figure out what wrong >>>bug
append and insert should use the selected elements document to create elements currently selection append and selection insert use the captured global document d3 document to create new elements when using document different from the one d3 was instantiated in as in node js this can cause an error instead of using d3 document to create the new element append and insert should use `this ownerdocument` on the parent element this ensures that the element always matches the document to which it is to be appended note that you can work around this issue by creating the elements yourself >>>bug
d3 time scale ticks throws error with degenerate domain if time scale passed to the `d3 svg axis` component has the same date for min max in the domain calling the axis component will throw `error infinite range` to reproduce >>>bug
point in polygon test broke hammer retroazimuthal projection using git bisect isolated the breakage to commit f86be427817061f8663bbd433dca85238ca0446f current behavior screen shot 2013 09 12 at 52 33 am https cloud github com assets 230541 1129664 26214d0c 1b91 11e3 8513 35ad25e363c4 png http bl ocks org mbostock 4459130 most recent working release 10 screen shot 2013 09 12 at 51 55 am https cloud github com assets 230541 1129666 32b26f56 1b91 11e3 9046 09fa0bab0f2f png cc jasondavies >>>bug
use something quicker than d3 timer for the force layout context ve been trying to use the force directed graph demo http bl ocks org mbostock 4062045 for graphs of 1000 nodes and lags starts at 300 400 nodes profiler told me that 80 of the time is spent on so broke this down to do partial moves on requestanimationframe https gist github com davidbruant 6489486 now things are smooth problem analysis investigating potential causes of slowness looked at d3 code as imagines the force layout algorithm was to blame it isn as far as know for 1000 nodes good job but discovered that `force tick is called as d3 timer animation https github com mbostock d3 blob 5f8056c1e4f41339c3d4d862545d7e21bf4d0e46 src layout force js l193 looking at d3 timer it seems to be using requestanimationframe under the hood this means that no matter how fast the node positions can be recomputed there can be at most once every 16 6ms ve observed that empirically looking at performance now on each tick event which is super slow given how quickly the force layout code seems to run it just bunch of arithmetic operations on abstract numbers which web browsers can run very very fast suggestion run `force tick in `settimeout `s the settimeouts will be nested so there ll be the 4ms delay but that already much better than at least 16 6ms faster options http dbaron org log 20100309 faster timeouts can be explored too the justification is that the force layout algorithms is pure math nothing visual is performed there so no need to wait for the browser to tell when to display things the visual parts are to be done on tick events and as experienced one has to break down for requestanimationframe anyway for big enough graphs in the end we ll have the force layout algorithm that computes as fast as possible and find the final positions much much faster than it does today and people will be free to break down the visual aspects as they wish >>>req
component chart state should be updated on call component not call component event currently the zoom behavior and the brush update their chart state on their respective event listeners however it would be possible for the brush to update chart state when the component is redrawn or transitioned independent of whether we want to dispatch events for those changes this would ensure that the chart state is consistent with the display of the brush even if the brush extent is changed within brush event handler without subsequently calling brush event as in the brush snapping ii http bl ocks org mbostock 6232620 example it is unclear how this would affect the design of the zoom behavior which has no displayed state and thus is not typically redrawn alternatively chart should be documented as part of the public api so that when the behavior of the brush is customized theres supported way of keeping the persisted state of the brush consistent with its appearance cc wycats>>>bug
d3 geom closest utility for computing the closest point between target and set of points this can serve the same function as d3 geom voronoi in an interaction layer example voronoi lookup by closest point http bl ocks org syntagmatic 6432815 >>>req
d3 geom voronoi should automatically resolve coincident points detecting and resolving coincident points when using the voronoi layout is pain the common solution is to offset each point by small random jitter however if you are very unlucky this could still result in coincident points in addition random jitter gives nondeterministic layout so it might be better if the voronoi layout resolved these automatically say by laying coincident points out in small circle >>>req
zoom behaviour touch points issue hi encountering an issue when using the zoom behaviour with multitouch gestures it seems that when gesture is performed while one touch point is within the svg and another outside it an error with the `moved` function occurs ve posted on stackoverflow http stackoverflow com questions 18293811 d3 js error on zoom ios but had no luck so far as this is happening with the example at http bl ocks org mbostock 3892919 believe it may be an issue in d3 itself guessing d3 can see that there are two touch points but can only access use the one within its svg hence the undefined is not an object` error think the correct behaviour here would be for d3 to ignore touch points outside of the svg unfortunately new to d3 so don yet have the knowledge to patch it myself if indeed it is an issue with d3 and not my own code does anyone have any thoughts on this >>>bug
support parsing time zone offset guys think found another date formatting issue >>>req
object doesn support property or method transition in world tour map not working http bl ocks org mbostock 4183330 it working in ie on version but not in any suggestion to get this working script438 object doesn support property or method transition d3 v3 min js line character 29727>>>bug ms
date formatting inconsistencies think there might be an inconsistency in date parsing and the docs screen shot 2013 08 23 at 59 28 am https cloud github com assets 71751 1017667 bbafc492 0c15 11e3 9bb4 3a1ae1e2b9ff png so tried disabling padding to parse simple date screen shot 2013 08 23 at 59 07 am https cloud github com assets 71751 1017670 c26a2df4 0c15 11e3 96c9 f9903d6b35f2 png is this an issue or am just missing the meaning of >>>bug
d3 time scale nice should support skipping breaking this out of 1434 its currently only possible to time nice by an exact time interval without any skipping this means that time nice is inconsistent with time ticks if the tick interval skips the difficulty is that theres currently no implementation of interval floor or interval ceil that skips so itd be little bit of work to enable nicing using skipping interval >>>bug
transition on attr transform is losing separators in transform list not sure if this is bug etc when doing transition on an svg transform with both translate and rotate the comma space separating the translate and rotate is not preserved http jsfiddle net petql here the transition goes from translate 60 60 rotate to translate 80 80 rotate 90 and produces on inspecting the element translate 80 80 rotate 90 missing the comma while this does not effect the resulting web page in the browser it is part of the standard the individual transform definitions are separated by whitespace and or comma http www w3 org tr svg coords html transformattribute and the comma not being there is causing problems elsewhere >>>bug
d3 pair ive used this in few places for example http bl ocks org mbostock 6264239 maybe d3 pairs would be better name >>>req
radial line inconsistent api documentation it not clear if radial line extends and therefore benefits from methods of cartesian line or not for instance does interpolate and tension are defined on radial lines also the api summary https github com mbostock d3 wiki api reference shapes mentions that the defined method is defined for radial line but details page does not mention it by the way it is broken link also the documentation should clearly states what is the expected unit of angle parameter degrees or radians >>>docs
winding order determination should be rotation invariant received an interesting case where the mercator projections default clipextent exhibited winding order bug screen shot 2013 08 12 at 10 57 47 am https cloud github com assets 230541 949199 cc04470a 0378 11e3 9292 de962d473b0d png http bl ocks org mbostock 0cc9d3f427dbb9cc86ef simply changing the clipextent to crop to the display area fixed the problem screen shot 2013 08 12 at 10 58 02 am https cloud github com assets 230541 949201 d668b230 0378 11e3 9106 4f8d3c14a742 png http bl ocks org mbostock a61eb91b975ec1d37aed cc jasondavies >>>bug
mspointerdown msgesturechange for zoom behavior fix for 1438 https github com mbostock d3 issues 1439 issuecomment 22189678 issue not sure that ve made absolutely d3 way changes but it works and does not affect any other functionality device >>>ms req
the zoom behavior should support pointer events users of win on touch devices which use ie 10 are disable to zoom in d3 using gestures it because in ie there are different gestures model description of pointer concept http msdn microsoft com en us library ie hh673557 vs 85 aspx http github com existing approaches of unifying events http blogs msdn com eternalcoding archive 2013 01 16 hand js polyfill for supporting pointer events on every browser aspx back in september 2012 microsoft proposed specification to w3c for unifying touch pen and mouse events called pointer events and based on the apis available today in ie10 on windows the w3c has since created new working group which already published last call draft the microsoft open technologies inc team has also released pointer events initial prototype for webkit on html5labs to further contribute to the technical discussions in the w3c pointer events working group so seems like pointer is upcoming standard at least it make sense so it ll be cool to start support this model or just add ability to perform zooming by msgesture >>>ms req
d3 linear scale ticks could support no arguments my original thought with d3 linear scale ticks was to require the count argument but since the introduction of d3 svg axis which uses default tick count of 10 it seems reasonable now to allow `linear ticks be equivalent to `linear ticks 10 also would probably change the behavior of `linear nice to be equivalent to `linear nice 10 simultaneously for consistency rather than using its current more arbitrary nicing >>>req
d3 time scale nice could be more consistent with d3 linear scale with linear nice you can use no arguments and get powers of ten or specify tick count and get nicing to match the corresponding tick interval with time nice you must specify time interval such as d3 time minute even though time ticks allows you to specify time range such as d3 time minutes or tick count also its odd that time nice takes time interval d3 time minute necessary for floor and ceil while time ticks takes time range function d3 time minutes equivalent to interval range so propose the following for time ticks deprecate `time ticks range skip in favor of `time ticks interval skip deprecate `time ticks range in favor of `time ticks interval skip `time ticks interval skip is equivalent to `time ticks interval range skip `time ticks interval is equivalent to `time ticks interval range `time ticks count existing functionality `time ticks is equivalent to `time ticks 10 and equivalently for time nice `time nice interval skip is consistent with the tick interval of `time ticks interval skip `time nice interval is consistent with the tick interval of `time ticks interval existing functionality `time nice count is consistent with the tick interval of `time ticks count `time nice is equivalent to `time nice 10 >>>req
selection sort crashes when multiple nodes are null per natevws comment https github com mbostock d3 commit 2a0e2a12667b85279cfeaa653cc376136a5202e0 commitcomment 3759310 >>>bug
add zoomstart and zoomend events itd be nice if the zoom behavior supported zoomstart and zoomend events these are well defined in the case of dragging and touch events the only exception are isolated mousewheel events but we could do something simple say batching together mousewheel events that are less than 150ms apart into combined gesture >>>req
d3 scale log in domain my first bug report ever so bear with me this concerns d3 scale log with value of zero in the domain when the input domain contain the javascipt engine will crash due to calling log since log is mathematically undefined it would be nice if d3 handled this special case instead of causing total crash using version 7>>>bug
add api to interrupt cancel queue transitions original title breaking change in transitions support between and please compare d3 v3 http jsfiddle net wvkmp d3 v3 http jsfiddle net mjyqd click cancel transition before animation ends you will notice that when d3 v3 is used the circle isn reset to its initial position however when v3 is used the circle position is reset if you open console you will notice that logs for v3 look like step step click while when v3 is used step step click step after starting new transition whose main goal is just to cancel previous one there is one more step of old transition executed small thing but it enough to break existing apps this single step sets cx attribute back to some value between 50 and 450 of course know that previous behavior wasn specified and guaranteed at all was lucky that it worked also the way cancel transitions is bit icky however is there any better approach guess this one was recommended on mailing list so if can fix this problem on my side happy to do it if not it would be great if the previous behavior is restored >>>req
d3 transitionprototype filter throws type error if empty transition at the end of transition filter it does this the `this ease call tries to get at the transition on `this node but for an empty transition `this node returns null so it throws type error also `d3 transition` only takes arguments so `this time` is quietly ignored >>>bug
transition end callback broken when used with chained transitions please open small test case which uses d3 v3 http jsfiddle net 2pe68 then open web browser console and you will see following logs transition end transition start transition end transition start transition end transition start transition end what makes perfect sense to me however when newer version of d3 is used v3 http jsfiddle net 2pe68 v3 http jsfiddle net 2pe68 can see transition start transition end transition start transition start transition start transition end is it expected start event is triggered for each transition while end only for the first and the last one >>>bug
style filter url filter doesn work in ie10 html d3 select svg append rect attr width 100 attr height 100 style filter url blur document queryselector rect style setproperty filter url blur doesn work in ie10 but this does >>>ms
when touched zoomable element is removed touch based zoom ceases if you register touchstart listener on an svg by way of d3 behavior zoom and the user starts zoom gesture if that zoom gesture results in removing the element that was targeted during the touchstart then all touchmove and touchend events cease this causes zoom gestures to fail in the d3 geo tile example http bl ocks org mbostock 4132797 when zoom level threshold is crossed there is trivial workaround in the client which is to add an invisible overlay that prevents the target of the touchstart from being removed dont think it would be possible for the zoom behavior to create this overlay automatically because subsequent content could easily be added on top of the zoom overlay also the zoom behavior would need to know the size of the canvas which could be hard to determine in some cases >>>docs ios
double tap zoom should check distance as well as time between touches on touchstart in zoom js if now touchtime 500 dbltap var touches location touches scaleto scale translateto dispatch event of this arguments pinch zoom gesture followed quickly by drag in different place is registered as double tap think distance threshold is necessary to only register true double taps >>>ios
should touchstart on drag be preventdefaultd see 1341 >>>ios
ie9 string coercion patch does not apply to subwindows after moving from d3 version to one of my projects broke but only in ie9 win7 with script87 invalid argument d3 v324 js line 659 character 60 however those lines didn change between and think have now isolated the problem to d3 scale log this is what breaks it in my code which fills coropleth map both with color and mixes white to that color by different variable 	var wincolor d3 scale ordinal 		 domain winparty 		 range wincolors 	var winintensity d3 scale log 		 domain d3 extent arr 	kreise selectall path 		 style fill function 	return winintensity range white wincolor wkrgewinner09 winabstand09 and indeed scale log changed from d3 scale log function return d3 scale log d3 scale linear domain math ln10 10 d3 scale logp d3 scale powp to this in d3 scale log function return d3 scale log d3 scale linear domain math ln10 10 d3 scale logp d3 scale powp 10 sorry can get closer to the issue >>>ms
d3 svg axis does not support quantize quantile threshold scales hi tried to create quantize scales and have the following error object doesn support property or method rangeband develop on visual studio 2012 but never call this method here you can see the entire code jsfiddle net h2jud >>>bug
construct transition event lazily currently d3 dispatch instance is created for every node that is transitioned even when no listeners are registered it would be nice to construct this lazily as needed in transition on so that dispatch instance is not created unless needed and likewise events are not dispatched unless there are listeners >>>perf
transition time should be inherited within transition each despite d3 transitioninherit being set transition time is always set to now within selection transition within transition each >>>bug
fix clip for closed polygons this pull request fixes long standing bug 443 by making polygon clip work on closed polygons previously it only worked on open polygons the other polygon methods area and centroid already work on both open and closed polygons this pull request also changes d3 geom polygon to use prototype rather than creating every method as closure this will potentially break callers that assumed polygon methods were bound to the object instance but this was never documented as an api guarantee so am comfortable making this change in patch release also the majority of examples using polygon clip should now be using the more convenient voronoi clipextent >>>bug
implement inertial drag please see the example http bl ocks org pjanik 5872514 recently needed such feature and implemented it in my application but then came up with the idea that it can be easily generalized inertial drag is quite popular nowadays creating pull request so you can easily review the code but of course open for discussion do you find it useful note that not very familiar with d3 codebase so happy to fix implementation details style add some tests etc in case of need >>>req
performance regression in resamplelineto tried upgrading id https github com systemed id commit 9f8df295bd991d0e7dbae7ff1951593b508f531c to but found performance regression here are chrome canary cpu profiles from opening id at map 17 00 77 02249 38 90083` waiting for the data to load and then making small pan https gist github com 5826310 image https cloud github com assets 98601 683850 b798b92c d9e8 11e2 9ff6 1b698c7ccc97 png https gist github com 5826312 image https cloud github com assets 98601 683858 d5c9c5e4 d9e8 11e2 91e9 ddb51d691b2c png the majority of the latter profile is inside `resamplelineto` >>>perf
missing transition size added selection size in but forgot to add transition size >>>bug
maps add topographic layers generation wikipedian user automatically generated an svg topographic map http upload wikimedia org wikipedia fr e8 tasmaniatopo svg using only matlab octave topographic tiff and water bodies shape file the end result is powerful it may be interesting for the nyt wikipedia and d3 users to add this feature other tools used colors http en wikipedia org wiki wikipedia wikiproject maps conventions topographic maps>>>req
interpolation by transform name our transform interpolation detection seems bit too broad since it currently applies to the css style as well as the svg attribute this causes failure in firefox which supports an unprefixed transform style likewise ie10 since it attempts to set the transform value on an internal svg node for parsing also noticed that d3 interpolateobject calls `d3 interpolatebyname` but not sure why this would be needed perhaps relic from something in the past we could consider applying the same matrix decomposition to css transforms but for now propose we have stricter check based on `name space d3 nsprefix svg name local transform and presumably we can drop the calls to `d3 interpolatebyname` in both transition style and d3 interpolateobject related https groups google com msg d3 js rcgw3gwrsxq 9fr5rwsu n8j >>>docs
consider using threshold for winding order detection as implemented in 1307 given real world polygon is more likely to have an area of approximately zero than therefore it would make more sense to have threshold of area rather than area however the clipping algorithm that rejoins clipped polygons currently performs no check on the initial intersection point to determine whether it is entering or exiting so this would need to be added first this check is performed for 2d clipping but not currently for spherical clipping >>>bug
winding order in equirectangular projection ive found an angle in the equirectangular projection using world 110m json that seems to exhibit winding order bug screen shot 2013 06 08 at 50 10 am https cloud github com assets 230541 627592 61936360 d042 11e2 91b8 39871ad5628e png http bl ocks org mbostock 1312139682ce7de8a36f this is using the world 110m json from gist 4090846 actually slightly out of date but tried updating it and the behavior was identical which is derived from natural earth 110m with no simplification interestingly the problem fixes itself when you apply clipextent to the viewport >>>bug
satellite projection exhibits diagonal artifact screen shot 2013 06 03 at 15 13 pm https cloud github com assets 230541 602676 88f77074 cca3 11e2 93d1 a1b7cd3a4348 png http bl ocks org mbostock d7651b53a2fc4941aac2 it appears to go away when you disable resampling but then you see different bug screen shot 2013 06 03 at 15 28 pm https cloud github com assets 230541 602677 8a522d56 cca3 11e2 82ec 45a91276e479 png >>>bug
gravity doesn accept function like to be able to adjust the effect of gravity based on the data bound to force layout on per node basis but it seems like gravity doesn take function unlike charge and link strength >>>req
voronoi clipextent would be more useful than voronoi size its frustrating that voronoi size is limited to rectangle that starts at it should take clipextent instead >>>req
d3 json should callback with error on failed json parse would it be better idea to callback with error if d3 json encounters bad json d3 json mysite com my json function error json if error notify user without breaking the application return the above will fail hard if returned json contains syntax errors no error will be captured and passed to the callback wrapping it in `try catch` won help either because of the async nature of the request something along the lines of the following could work guess but will create unnecessary overhead for non json calls so doubt it the best solution function respond var request status if request responsetext 200 300 304 try dispatch load call xhr response call xhr request catch err dispatch error call xhr request else dispatch error call xhr request what do you think >>>bug
include an api for svg transform attributes d3 transform makes it easy to define and reuse functions that produce transform attribute strings for svg elements using d3 transform reduces repetition allows you to compose multiple transforms and eliminates ugly string interpolation from transform attr calls more info and docs here https github com trinary d3 transform readme this pr includes that transform api and adapts the code and tests in that repo to fit d3 existing structure and style >>>req
add argument to d3 xhr fixes 1260 fixes race condition that exists where the xhr onload fires before xhr response has had change to be set this causes d3 json for example to not get called the approach is to add another argument to the d3 xhr constructor this method can then call xhr response the new callback >>>bug ms
race condition d3 xhr can finish loading before d3 xhr response can be set d3 json and all of the other content helper xhr methods are implemented as return d3 xhr url application json callback response d3 json `response d3 json is called after the xhr object is constructed however the xhr constructor dispatched the xhr request if the xhr request finishes quickly then the d3 json method will not be called and the callback passed to d3 json will be called with the request object instead of the parsed json object >>>bug ms
cache projection stream itd be nice to cache the projection stream rather than creating it every time something is rendered tried to do this in but didnt realize that the stream internally caches the current rotation of the projection so the stream would need to be recreated if the rotation changes however the d3 geo path doesnt get notified by the projection when the rotation changes and so has no way of knowing whether the stream needs to be recreated more thought is needed cc jasondavies >>>req
time axes for bc dates d3 time axes appear to have some issues with bc dates low bc dates are given odd year tick labels for example 80bc is 80 and 8bc is 00 this is easy to work around and is presumably because d3 time formatpad pads without reference to the sign there is year zero inserted between 1bc and 1ad haven been able to work out how to remove it either as work around or in the d3 code screenshot from timeline based on http bl ocks org mbostock 1667367 d3timeaxisbcdates https cloud github com assets 1696740 521091 e1fa48e2 bf68 11e2 85a3 9721087dbbd0 png >>>bug
if slowed transition transition can interrupt the parent transition imagine the following scenario normally the element transitions the foo attribute to the value then the bar attribute to the value the first transition goes from 250ms and the second goes from 250 500ms because transition transition inherits the delay from the previous transitions delay and duration now imagine that the browser is slowed say because something else expensive is happening on the page or the window is in background tab and the requestanimationframe callbacks are not being fired time passes without any ticks until 250ms such that the first transition should have ended and the second transition should just be starting and lets say the browser becomes active again giving the first tick in this case the second transition interrupts the first transition without giving it chance to end the second transition gets the first callback because d3 timer pushes tasks onto the head of the queue the second transition takes over the active lock and the first transition aborts without ending because `lock active id` the second transitions id is greater than the first the second transition interrupting the first transition is undesirable because the second transition was scheduled to start after the first transition ended it seems unfair that the second transition gets its starting tick before the first transition gets its ending tick perhaps simple fix here is to guarantee strict ordering in d3 timer rather than the current lax ordering if older timers were notified before newer timers then the first transition would have an opportunity to end before the second transition starts we could change d3 timer to keep the timer queue in chronological order being careful to keep scheduling of timers fast in the common case that timers are scheduled in chronological order or more generally using skip list this might improve the speed of `d3 timer step` since the loop could procede in chronological order and abort when scheduled timers are ahead of the current time >>>bug
fix projection clipextent regression bug was introduced in fa514dd08c9a6ac11e177da6051a76efe291d5ea where invisible line segments were incorrectly drawn thanks to jfirebaugh of id for spotting it >>>bug
fix null transform attribute warning in firefox strictly speaking the transform attribute should never be set to null it should be set to translate for the identity transform or it should be removed using removeattribute transform setting this attribute to null causes warning to appear in firefox unexpected value null parsing transform attribute this occurs when using d3 transform null to interpolate to or from non existent transform attribute null this fix checks whether the value is null and if so returns an identity transform >>>bug
d3 select node and d3 selectall nodes does not set the groups parentnode you can see this as follows the crash is that selection data assumes that `group parentnode` is defined and subsequently dereferences data when data is specified as function because the data function is passed the group parents datum of course the following are fine >>>bug
d3 selection should select the document element not the document currently `d3 selection is equivalent to `d3 select document but it should instead be equivalent to `d3 select document documentelement for consistency with the default group parent node returned by d3 select also it is documented https github com mbostock d3 wiki selections wiki d3 selection to return the document element >>>bug
binding data to the document causes d3 select to bind data binding data to the document directly subsequently causes that data to be bound to any element selected with d3 select data propagation should be limited to selection select and not apply to d3 select >>>bug
d3 geom quadtree needs extent currently it only supports size width height but this is only sufficient for quadtrees that start at it would be better to support extent x0 y0 x1 y1 >>>req
d3 behavior zoom shouldnt d3 eventcancel touchstart imagine this is related to 1005 1175 had implemented panning using `d3 behavior drag` and switched to using `d3 behavior zoom` and now all the elements with tap click events are no longer responding to taps but are happily responding to clicks here minimal example http bl ocks org fidothe 5378483 obviously to see the tap eating you need to view it on touchscreen device does whatever was done in 1175 need tweaking or is there deeper issue >>>bug ios
fix firefox time interval bug for europe london d3 time day should always return midnights however firefox doesn return midnight for the following chrome and node js return this is because `new date 1970 has different daylight saving behaviour in the two browsers chrome thu jan 01 1970 00 00 00 gmt 0000 gmt firefox thu jan 01 1970 01 00 00 gmt 0100 bst in fact firefox is more correct the uk was on permanent bst from february 1968 until october 1971 this seemingly minor difference in interpretation results in non midnight times being returned for all day intervals and other intervals that use d3 time day internally the fix forces midnight to always be returned fixes 1196 >>>bug wip
firefox mangles date axis possibly only during bst example from an old stackoverflow question http jsfiddle net nrabinowitz jtrnc in firefox the date axis is filled with 01 am markers instead of the dates visible in chrome and ie stepping through it looks like firefox is translating dates with no time as occuring at 1am leading d3 time scaleformat to select the format that returns getutchours rather than the day and date would it be better to use gethours as the user is probably more interested in local times know opening can of worms here bst is utc by the way what we laugingly refer to in the uk as british summer time >>>bug moz
d3 interpolatestring does not coerce inputs to strings d3 interpolatestring tostring function return 2px tostring function return 12px 6>>>bug
d3 interpolatenumber does not coerce to number d3 interpolatenumber 10 >>>bug
selection size selection size method would be useful this should apply to enter selections as well per 824 >>>req
d3 interpolate should return array instance for array arguments d3 interpolate returns not array when arguments are element arrays but it should return element array revise `src interpolate interpolate js` like below please confirm this >>>bug
multi touch zoom for android android does not supply event scale so d3 freezes on android multi touch input this bad create new variable in zoom js representing the on touch distance between fingers and normalize the distance at touchmove to that for the missing scale value works like jesus on weekday nexus development environment ftw dru>>>bug
reusable transitions we ve found ourselves duplicating some common transitions fade in fade out slide in slide out in multiple places in id are there any good patterns for encapsulating these in reusable way think some discussion along these lines happened in 400 if understand it correctly some reuse is available through transition each but is limited to delay duration and ease would like to do something along these lines my first try at an implementation was but of course this doesn work the result of `d3 effect fadein doesn have duration and each methods only the result of calling it does time to revive the `d3 transitioner` concept >>>docs
mouse position is wrong when page is scrolled and default styles apply margin padding or border to svg elements problem put an svg element with 1px border around it set in css file with rect inside on the page and draw line where the user drags the mouse over the rect to determine where to insert the new points in the line use d3 event and d3 event which should be relative to the svg element on my mobile device ipad with current webkit browsers safari chrome the relative positions are wrong when the page is scrolled reason for mouse events `d3 event should reflect the position of the mouse relative to the target element internally the `d3 mousepoint method in event mouse js is used to calculate the relative position in this file there is test for the webkit bug 44083 `getscreenctm returns position relative to page instead of relative to client view which would be correct the test works this way it inserts an svg element at into the body and then queries its `getscreenctm after the page was scrolled if the bug is present the position should be and this is what tested for this is where things go wrong if the user set padding margin or border for svg the position will not be but include the left top margin padding and border width actually put border of 1px around all svg in my css file and the position of the test svg was the `d3 mousepoint method therefore wrongly assumed the bug is not present the reason why this only showed on the mobile device is that in the current version of desktop webkit browsers the bug was already fixed fix simply replace the old lines in event mouse svg d3 select d3 document body append svg style position absolute style top style left style margin style padding style border none to prevent any padding margin or border on the test svg element >>>bug
resampling should have minimum sample interval distance this is more noticeable now that graticules have point meridians when watching the world rotate in various projections http www jasondavies com maps transition have reproduced this in the past using contrived projection the following linestring should be resampled along the sine curve but it is not at precision the problem is also noticeable in the interactive interrupted bonne http www jasondavies com maps bonne it seems excessive to take samples at the same interval as the douglaspeucker threshold but hopefully we can derive something sensible without having to add separate parameter >>>bug
d3 geo clipview reorders points even when no clipping is necessary it would be nice if d3 geo clipview had no effect on the geometry when no clipping was performed example http bl ocks org mbostock 580de8199ea3b85f822a>>>bug
d3 geo albersusa should support precision >>>bug
wiechel and berghaus projections exhibit winding order problems screen shot 2013 03 21 at 10 03 38 pm https cloud github com assets 230541 289438 e0b879a0 92ad 11e2 8dcb ac586306a972 png http bl ocks org mbostock 4463155 the problem goes away with clip angle of 175 using 50 000 000 geometry however the problem is still present at 110 000 000 geometry possibly related to 1095 >>>bug
d3 geo transversemercator needs special clipping the antimeridian is rotated >>>bug
d3 geo bounds antimeridian and great arcs when making countries by area had to special case russia because its longitudinal bounds in spherical coordinates are 180 was using the bounds to set the projection origin which seemed more appropriate than d3 geo centroid because wanted the stereographic scale variation to start from the centre of the projected bounding box firstly think we should modify d3 geo bounds so that it returns the true longitudinal extent even if the problem is shown even better if you imagine the linestring 135 135 which would have longitudinal bounds 135 135 at the moment which seems clearly wrong secondly its possible for great arc to move outside of simplistic bounding box based on point extents so that should be taken into account too this also affects d3 geo path bounds which currently uses d3 geo bounds internally ideally it should use resampling so that it properly accounts for curved arcs related it could be useful to have d3 geo boundingcircle similar to st minimumboundingcircle this would return an origin and angular radius defining small circle that encloses given set of geometries http www jasondavies com maps countries by area http postgis org docs st minimumboundingcircle html>>>bug docs
brush jumps flickers in some browsers using touch browsers affected chrome 25 on windows only using touch not the mouse ios on ipad example the code http gist github com rehe 5202226 shows the issue on chrome win when draw brushes starting close to each corner and moving from corner to corner in clockwise direction http bl ocks org rehe 5202226 steps to reproduce start dragging the brush with your finger almost immediately after you start dragging the brush extent will jump well beyond where you are dragging and then snap back to the correct size further sizing of the brush occurs as normal until you remove your finger and draw new brush this issue occurs 50 of the time notes the example only shows very quick flicker but in my real use cases it lot more noticeable going to try and dig further the direction and scale of the jump appears to vary considerably ie 10 and ff using touch on win machine don show the issue >>>bug ms
finish refactoring of tests using smash tests are currently broken in the branch because in the middle of rewriting the tests to use smash under the new model rather than having shared environment which loads all of d3 each test will load only the class being tested this verifies that the minimum necessary imports for each class are present refactoring the tests has caught several missing imports unfortunately this approach can detect when an import is unnecessary but that less important this makes writing the tests little bit more awkward because smash load is asynchronous but thankfully vows makes this pretty easy the other downside is that tests don have access to other d3 utilities d3 range but think that manageable >>>test
d3 bullet example ranges are sometimes rendered outside of the svg element in ie 10 the problem is visible in this screen shot the arrow was my doing out of svg viewport problem https cloud github com assets 969146 253489 1dc657e8 8bd5 11e2 9bb7 ea6dd5d72e3a png and reproducible in http jsfiddle net 3rv5s it appears that ie is not clipping the contents of the svg element but don understand why already tried to set viewbox to the svg dimensions but it has no effect does someone have any idea why this is happening it renders fine in chrome and firefox thanks>>>ms
d3 unique distinct method when dealing with ordinal data it would be nice to have `d3 unique array accessor method that returns the set of unique elements within the specified array not sure if the optional `accessor` function is necessary but could imagine this being useful if you wanted to find the set of unique objects that had the same attribute value this is somewhat similar to `d3 nest https github com mbostock d3 wiki arrays wiki d3 nest thoughts >>>req
need rotation invert since rotation is not commutative we should add an invert method to d3 geo rotation >>>req
more core projections think we should add the following projections to core they are small and commonly needed state plane coordinate system d3 geo transversemercator d3 geo conicconformal d3 geo conicequalarea d3 geo conicequidistant d3 geo albers settings also think we should expose d3 geo conicequalarea as an alias for d3 geo albers except without the specific settings we could retain d3 geo albers and d3 geo albersusa as backwards compatible it probably also worth adding d3 geo conicequidistant >>>req
adding rounded corners to `d3 svg arc` hi mike for some project needed to implement rounded corners for the `d3 svg arc` shape generator for the purpose added `cornerradius` method in custom built version of d3 all good now wondering if you re interested in adding it back to the main code if so like to get some input in how to solve the problematic case with large corner radii relative to the arc width see here for three possible approaches obviously in addition to not handling the problematic case at all http bl ocks org bm 5124918 these three approaches handle large radii up to certain point obviously they all break down again when truly ridiculously large corner radius is used larger than half the difference between outer and inner radius not sure if such cases would require special handling as well nb as the issue never occurred in the project did not yet implement the special case be perfectly willing to but would want design decision first >>>req
small circle clipping should handle line crossings with invisible endpoints this currently causes issues with clipangles much smaller than 90 and d3 geo graticules point meridians in the branch if both endpoints are invisible then it incorrectly ignores the entire line when it should find two intersection points and clip accordingly >>>bug
scale log base>>>req
first stab at d3 geo clipview this is simple stream transformation for the moment note that the clip region points should be specified in counterclockwise order as required by d3 geom polygon and unlike geojson the first and last points should not be coincident this is work in progress lines are not intersected at the moment example http bl ocks org jasondavies 5082889 >>>req
subticks division not available when there is just one major tick hello have chart showing data from two weeks with major tick for each week and minor tick for each day implemented this using xaxis ticks d3 time weeks ticksubdivide was surprised in finding today the minor ticks disappearing this was due to the time interval coming with the data which you can understand looking the attached screenshot screenshot from 2013 03 04 11 13 28 https cloud github com assets 885935 216098 68160280 84b4 11e2 959b 1fe00cf14781 png days and day numbers are not ticks they are added by extra code the subticks here should be vertical lines similar to the week major tick in this case there is one start tick one end tick and just one major tick discovered with the debugger that in this case the `d3 svg axissubdivide` function inside `svg axis js` does not compute any subtick because ticks length is not greater then one before trying to add some tests to `svg axis test js` and to fix the problem wanted to have some comments from you thanks >>>bug
pixel space clipping for d3 geo projection related to d3 d3 plugins 52 some projections may need pixel space clipping in addition to spherical clipping to avoid output coordinates of unusual size perhaps we can repurposes d3 geom polygon clip method into projection stream >>>req
selection classed is buggy in safari for svg elements https bugs webkit org show bug cgi id 22357 https bugs webkit org show bug cgi id 20651 given the dwindling market share of safari the bugs were fixed either in 2008 or 2010it hard to tell pretty sure this won fix >>>bug webkit
add d3 layout voronoi more user friendly version of d3 geom voronoi fixes 1100 >>>req
allow row conversion function for d3 dsv parse supersedes 1028 >>>req
allow before function for selection insert similar to selection select function the before argument to selection insert can now be specified as function so that the caller can specify the before node dynamically supersedes 1071 >>>req
add d3 geo length>>>req
expose d3 geo length it might be nice to expose d3 geo length method for computing line length length of border computed by topojson mesh we already have the logic implemented as part of d3 geo centroid so dont expect it would be too much work to expose >>>req
add clipping support to d3 layout voronoi would make http bl ocks org mbostock 4237768 little bit easier >>>req
consider using user select none instead of preventdefault on drag mousedown previous title dragend isn triggered when mouse is released outside window when dragging elements in d3 using d3 behavior drag the dragend event isn triggered when the mouse is released outside of the window or an iframe this causes sticking behavior if the mouse is dragged out of window or iframe the mouse button is released and the mouse returns to the window as d3 was never notified of the dragend event this can be easily seen in this preexisting example by dragging an element outside of the frame and letting go of the mouse button http bl ocks org enjalot 1378144 however outside of d3 window mouseup is normally triggered on mouseup event that happens outside of the window we can normally use this to end drag for example in this jsfiddle we can drag the blue box outside the iframe release the mouse and when we return the box is not stuck to the mouse http fiddle jshell net samfent yzmub edit create bl ocks example of this as well http bl ocks org sfentress 5052881 this would be doable in d3 except that the dragend event swallows mouseup and so the mouseup event does not bubble up to window it seems to me that d3 should listen to mouseup events on window and call dragend if there is drag in progress >>>bug
expose projection rotation this is useful if you want to specify the center in non rotated coordinates >>>req
add d3 geo albersusa invert the precise extents may need adjusting slightly but it seems to work fine in quick test of points on land >>>req
d3 geo area and d3 geo cliparearing should be consistent already being worked on by jasondavies but creating an issue to track this feature the end goal is that topojson d3 geo area and d3 geo cliparearing use the same algorithm to guarantee consistent winding order detection although this issue will likely become less critical when topojson removes features smaller than the simplification threshold >>>bug
layered layout this checkin includes basic layered layout layer js layered layout test case layer test js use case sometimes it is desirable to draw graph structure as tree the nature of graph structure makes it hard to represent it generically as tree if we annotate the structure with levels we can render it as hierarchy this is useful in cases where you have structure in which child node can have many parents example graphpreview https cloud github com assets 1201248 184212 e208af60 7cd1 11e2 9dd2 8c5f1b13e138 jpg >>>req
add count to count all children leaves count takes boolean and only be use entries to create cluster chart and to ticken links corresponding to amount of leaves we need total amount of child leaves >>>req
scale nice should take argument for consistency with scale ticks original subject end on tick option for axis scale love the see the option to end the axis on tick today using `scale nice` but sometimes the bars stick up quite bit over the last tick line tick could be placed on top like this alt1 http cl ly items 3i3i130q273g0x1k1z0p alt1 png this would make the tick spacing uneven though another option is to keep an even tick spacing but just make the top value end on tick alt2 http cl ly items 090g3b1w1z0d1b0p0g08 alt2 png would prefer the latter since it avoids trouble with overlapping labels and think it looks nicer not sure how this would work since the ticks are decided by the axis but the max value is decided by `scale nice` but sure there is way thoughts >>>req
attempt at zoom translateextent doesnt work correctly because the translateextent may need to be dependent on scale or the zoom behavior may need to know the visible area related 1084 >>>req wip
add polyfill for mouseenter and mouseleave fixes 931 >>>req
d3 geo interpolate sometimes generates nans when interpolating between two identical points there are some strange corner cases interpolating between the same point works fine for some points d3 geo interpolate but this ends up returning nan nan for all values of `t` for other pairs of points like this one d3 geo interpolate 140 63289 29 95101 140 63289 29 95101 nan nan >>>bug
pack layout overlaps circles when large variation in values am trying to create pack layout am using the standard code no additions some of the circles seem to be overlapping in the layout group18 and group15 are overlapping see poland see the sample here http bl ocks org 4760083 if remove the largest data item indonesia it starts behaving well if add more values there are more similar problems note that there is lot of variation in the values not sure if that is causing problem >>>bug
allow d3 map to be used with d3 nests map you can now pass map type to d3 nests map function for example if you pass d3 map as the second argument to nest map array type the returned value will be an instance of d3 map rather than bar object in addition to offering better protection against built in property names d3 map offers more convenient iteration methods >>>req
added variance and corrected standard deviation to core array functions d3 already has functions to get the `max` `min` `mean` etc of an array what is missing is the calculation of the variance and standard deviation for that needed an other library like jstats but think it very handy to have them available right from d3 d3 sd 5811388300841898 d3 variance this makes sense if you want to add the sd to chart or calculate gaussian standard deviation curve >>>req
add d3 set taking inspiration from d3 map d3 set is simple shim for es6 sets re https twitter com mbostock status 299950224695230464>>>req
d3 does not run in web worker threads d3 will not run inside web worker thread the reason is because workers don have access to the dom and d3 has hard dependencies on the dom api not huge deal but it would be nice to have access to parts of the library that don require dom access like scales here what doing >>>req
d3 geo centroid returns undefined for several ambiguous cases there are certain cases where the spherical centroid of geometry collection is ambiguous for example given point and its antipode any point on the surface of the sphere could be considered the centroid likewise given great arc between point and its antipode any point on the great circle halfway between the two points could be considered valid the current implementation of d3 geo centroid returns undefined in these cases think it would be preferable to return reasonable if arbitrary centroid from one of the infinite valid choices rather than returning undefined otherwise presumably everyone that uses d3 geo centroid should check to see if the centroid is undefined even for valid geometry inputs and implement their own fallback behavior if we do keep the current behavior we should at least document https github com mbostock d3 wiki geo paths wiki d3 geo centroid this somewhat surprising behavior as an undefined return value is likely to causes crashes returning special instance of could also work this is separate from 1037 in regards to empty lines and polygons which is much more common source of error and where the correct behavior is more obvious >>>bug
d3 geo centroid and path centroid fail on empty lines and polygons currently both the d3 geo centroid and path centroid methods return undefined if the centroid weight is zero as is the case with an empty line string or an empty polygon for example consider the following an empty line string type linestring coordinates an empty polygon type polygon coordinates think it would be more correct and less surprising to treat both of these geometries as points rather than returning undefined in other words the correct d3 geo centroid in this case is and the correct path centroid is projection and as points these features would be ignored when computing the centroid in aggregate with other non empty lines or polygons but weighted equally when computed in aggregate with other points simple solution to this would be to defer resetting of d3 geo centroid until the first point of line rather than setting it to zero for example perhaps initialize d3 geo centroidz to undefined and then check if its nan rather than zero or something >>>bug
ie9 d3 style setproperty call this name value priority params error in d3 version 05>>>ms
interpolators shouldnt reuse return values by default while it is well https github com mbostock d3 wiki transitions wiki d3 interpolatearray documented https github com mbostock d3 wiki transitions wiki d3 interpolateobject its still perhaps bit surprising that interpolatearray and interpolateobject return shared instance for performance reasons this makes perfect sense for its usage by d3 transitionthe returned array or object is immediately coerced to string or only used for single tick but its easy to forget for other applications that you need to make copy of the returned object if you want to compare the results of multiple interpolation calls see the an earlier version of the rotating voronoi https gist github com 4636377 c4338000bf5f4b5c56202be34c800e9319a2f56b for example perhaps we could change these methods to return new instances and then have an alternate method for reusing objects or perhaps interpolatearray and interpolateobject could take third argument to use as the reusable destination object for performance reasons not reusing an object may also require the use of new function to create an object literal as is done in d3 dsv >>>req
d3 interpolate color could return color instance rather than string believe it was originally implemented as returning an rgb string because previously some of the colors didn return an rgb string when coerced since that was changed by cc0ae766b7d44adf47be4511d79577b59f9ef057 333 it should be safe and more useful for the color interpolators to return an instance of the appropriate color class >>>req
allow type conversion in dsv parse this is stab at addressing 387 by adding an optional `types` argument to `dsv parse` which can either be an array or an object depending on whether the functions in `types` should be applied by position or name although if you want to do the former it seems better to just use `dsv parserows` directly problems `dsv parse` was optimized in 2358fd0fb43d74cb72ddc4dd2218ab9153d0af02 this makes it slower again even when the type conversion isn used have created basic benchmark https gist github com 02033970558429c73626 for the behaviour using this function before optimization after optimization and after this change the interface may not be ideal for numbers have been using `parseint` and `parsefloat` which could be wrapped as something like `d3 csv int` but then that no shorter for dates and times `d3 time format` already seems perfect to me as corollary because this accepts functions it isn restricted to just converting types that seems like duplication of effort given that this is adding another layer of indirection it calls another function from within `o` which in turn calls the functions passed in `types` and the only reason for not using `dsv parserows` is convenience it also possible for people to do unexpected things with it there is no type inference which is mentioned in passing in the original issue >>>req wip
add qualitative schemes to colorbrewer js and colorbrewer css not sure if this was intentional or not but tend to favor using the set1 color scheme for different colors that are qualitative see http colorbrewer2 org it would be good to incorporate the other qualitative schemes as well including accent dark2 paired pastel1 pastel2 set1 set2 and set3 is there reason why these were omitted from the lib package happy to add so long as this wasn an intentional omission >>>req
add bounding box rectangular extent geographic clipping many projections particularly conic projections such as the asia lambert conic conformal http bl ocks org 4613663 would benefit from clipping to rectangular bounding box in spherical coordinates which is to say exactly the same specification as graticule extent it would be nice for example to say hopefully this is easier than great arc clipping or at least we can reuse great arc clipping for the meridians cc jasondavies>>>req wip
remove supersampling in d3 geo graticule for meridians meridians are great arcs so unlike parallels do not require supersampling >>>perf
axis does not create domain path when called via transition when calling an axis function on transition `pathupdate` doesn contain any elements here line 3327 http d3js org d3 v3 js var range d3 scalerange scale path selectall domain data pathupdate d3 transition path var scale1 scale copy scale0 this chart scale1 this chart scale1 path enter append path attr class domain but contains the `path` element here var range d3 scalerange scale path selectall domain data var scale1 scale copy scale0 this chart scale1 this chart scale1 path enter append path attr class domain var pathupdate d3 transition path >>>bug
deprecate d3 geo greatarc it no longer needed since projections support great arc rendering intrinsically as linestring however we should expose new d3 geo distance method in favor of using d3 geo interpolate distance the latter is only intended as performance optimization if you already have need for spherical interpolation >>>req
move tick class to the element fixes 1016 >>>req
d3 svg brush ie bug to reproduce goto http bl ocks org 1667367 in either internet explorer 10 tested on windows create brush extent and drag resize the extent issue the width of the entire document changes accordingly as you increase decrease the brush extent >>>bug ms
axis tick class should be applied to not this was supposed to be part of the release and not sure how that commit got lost the problem currently is that the elements have no class which makes them hard to identify semantically it cleaner if the tick class is applied to the group rather than the line >>>bug
optimise d3 geo area this incorporates two enhancements simpler formulation for the area of spherical triangle with one vertex at the south pole instead of calling atan2 for every point we use the identity arg arg where is complex number and only call atan2 once for each polygon instead opting for cheaper complex number multiplication for each point this is around 3x faster than the old implementation as measured by the included benchmark >>>perf
add source maps source maps can be incredibly useful to debug code in production for example jquery just started including source maps with their distribution http blog jquery com 2013 01 09 jquery rc1 and migrate rc1 released >>>req
add area weighted geographic polygon centroids this generalises the centre of mass formula given in brock the inertia tensor for spherical triangle applied mechanics 42 239 1975 >>>bug
add major minor extent and step to graticule fixes 1009 >>>req
graticule should support major and minor extent consider the following example http www progonos com furuti mapproj normal projint projintc img z1 mp2 sinumollweide s75 png most of the graticule lines extend from 80s to 80n however lines at 90 longitude extend all the way to the poles one way to support this functionality might be to distinguish between the major extent and the minor extent and likewise the major step and the minor step the default minor extent could be 180 80 180 80 while the default major extent could be 180 90 180 90 likewise the default minor step could be 22 and the default major step 90 the implementation would need to make sure that major lines that coincide with minor lines as will happen by default are not duplicated in the returned lines >>>req
tutorial variable naming http bl ocks org 3808218 in this tutorial and subsequent ones var svg is used to store the element this is confusing because the dom would end up being lt svg gt lt gt lt text gt if svg append text got called instead of lt svg gt lt text gt as casual reader of the code would expect suggest renaming the svg variable to group >>>docs
do the zoom and drag behaviors need to cancel click events https github com mbostock d3 blob master src behavior zoom js l113 l118 it cancels the first click event after the drag the one assumed to be created by the drag is there any reason it needs to be cancelled could leaving the click event cause trouble it also seems to cause problems with opera which doesn trigger click events for drags which could be an opera bug or an accepted inconsistency not sure yet ran into that at systemed id 357>>>bug
use nw ne se sw resize for intercardinal brush cursors `nwse resize` `nesw resize` `nwse resize` and `nesw resize` don display custom cursor in ubuntu chromium 22 but works in firefox cursor test http jsfiddle net chriscoyier wz8k2 light >>>bug
clarify behavior for selection data in re to duplicate keys in the function d3 selectionprototype data in the bind function in data with key argument exitnodes are added at two stages culling duplicates for keyvalue key call node group node data if nodebykeyvalue has keyvalue exitnodes node else nodebykeyvalue set keyvalue node keyvalues push keyvalue cleaning up remaining values in nodebykeyvalue for if nodebykeyvalue has keyvalues exitnodes group note that exitnodes in the second pass is indexed by but in the first pass by starts at groupdata length in other words the first pass exits are shuffled into slots after the maximum number of nodes that can validly be in the list starts at zero and extends all the way up to group length in other words the number of nodes we started with this leave the possibility of node with an unwanted key being in the range groupdata length to group length in this case node stored in pass will overwrite node stored in pass in the exitnodes list which means the pass node escapes the exit list and is neither removed nor updated and remains in the dom fix in pass use to index the exitnodes array not tested will do that next >>>bug
d3 geom hull should return counter clockwise polygon the demonstration here http jsfiddle net jvvty takes points creates hull for them then polygon from the hull the polygon has negative area meaning that it is not convex or counterclockwise however the graham scan algorithm should produce just that can take look at rolling fix tomorrow but opening this now for your attention >>>bug
don require sorted array for d3 quantile although the documentation does state that d3 quantile requires sorted array it would be nice if it just took care of the sorting to avoid potential confusion ran into this today while passing it an unsorted array and the only reason even spotted that was getting an incorrect value was that checked the results against to make sure they were the same since d3 quantile has more or less the same signature as quantile expected them to behave similarly the current behavior could result in some subtle bugs considering that d3 quantile doesn validate it input it just returns the wrong result happy to send pr for this but wanted to check first to see if there is reason for this requirement that missing >>>req
bar tutorial white text color in svg example was walking through the bar tutorial and noticed was not getting the white text for the svg bars when following along with the steps http mbostock github com d3 tutorial bar html looks like the svg section dealing with text also needs to include the line for the bar class attribute statement attr class bar just like the source code does >>>docs
zoom only allowed in html the zoom functionality of d3 fails when the root document is an svg document most examples are embedded within html but is this requisite of d3 suggest either allowing zoom in svg documents or adding documentation that zoom can only be used in html embedded svg this code tries to reference html elements which causes the failure https github com mbostock d3 blob master d3 v2 js l1439 >>>docs
bug bar tutorial incorrectly states that operating on the enter selection does not affect the update selection the bar tutorial at http mbostock github com d3 tutorial bar html incorrectly states note that operations on the entering or exiting selection do not affect the updating selection thus the transition defined on rect on l14 above includes only the updating bars not any of the entering bars that are appended on l7 the general update patterns tutorial at http bl ocks org 3808221 states that appending to the enter selection expands the update selection to include entering elements which can confirm by fiddling with the code in the bar tutorial believe the bar tutorial explanation should be corrected and the code updated accordingly the transition on enter is useless as long as the enter insert block is before the update transition >>>docs
identity projection should we have an identity projection that assumes that all projecting rotating clipping and cutting has already been performed for example this would work for polygons this issue was originally d3 d3 plugins 22 >>>req
glitch in antemeridian cutting demo it back paste this into the console for screen shot 2012 12 08 at 11 36 56 am png https cloud github com assets 230541 1992 b7b66750 416e 11e2 9fe4 5991c9f7be13 png >>>bug
d3 geo type coupla things to fix before exposing add sphere type return return value easier way of invoking default visitor function after overriding >>>req
d3 geo centroid area this would be useful for computing the lat lon centroid jason points out that we should probably expose d3 geo area as well both using spherical coordinates >>>req
two tests failing two tests are failing for me selects by class name into selectall test js 22 selects by class name into select test js 22 they succeed after the following changes diff git test core select test js test core select test js index 924ceac 56b6cca 100644 test core select test js test core select test js 19 19 suite addbatch selects by class name function var div d3 select foo assert equal div classname foo assert equal div classname foo bar selects by id function var div d3 select div bar diff git test core selectall test js test core selectall test js index 9ac4646 633596a 100644 test core selectall test js test core selectall test js 19 19 suite addbatch selects by class name function var div d3 selectall foo assert equal div classname foo assert equal div classname foo bar selects by id function var div d3 select div bar but think that the meaning of the test was exactly to be sure that the class name is just foo my versions node 15 d3 current 44e46209bd1db1abceff8d7abf629b3c6514ced6 output of npm freeze https gist github com 3152820 canvas 13 jsdom 14 sizzle uglify js vows by the way what do you think about adding travis file to the repository should propose one >>>test
multitouch dragging bug from my email last week we found small bug in commit dceb459a273466449af54c058b1f4a5b15557911 multitouch dragging it appears touchid of the first finger is but because of type coercion on line 31 of drag js the wrong statements are executed by changing them into if touchid undefined we were able to fix the problem see also the ternary operators on line 36 64 and 65 >>>bug
disabling zoom on right click https groups google com forum fromgroups topic d3 js zrhhr5vhzyc>>>bug
polyfill for mouse enter leave the w3c has standardized mouseenter http www w3 org tr dom level events event type mouseenter and mouseleave events however they have not yet been adopted outside of ie9 go figure don want d3 to be compatibility layer but at the same time it might be nice to bend the rules little bit given that it should be standardized in the future it fairly easy to test for native support shawnbot has nice implementation in d3 bootstrap d3 compat js https github com shawnbot d3 bootstrap blob master d3 compat js think it needs tweak to support removing listeners when `callback` is null but otherwise it looks like an elegant and useful solution >>>req
ability to set d3 scale log base hi it appears there is no easy way to change the base of d3 scale log from 10 to something else would it be possible to add d3 scale log base function to do this thanks>>>req
dragging on force layouts should update and as well as px py currently when you use the built in force layout drag functionality the following code is called function dragmove px d3 event py d3 event force resume restart annealing the reason this works is that the verlet integration is special cased to treat dragged nodes which are marked fixed specially position verlet integration while nodes if fixed px py else px px friction py py friction this seems bit odd to me wouldn it make more sense to set and along side px and py that is to say all of the force calculations should be using the present position of the node as opposed to the previous position now this is all bit academic with the current implementation since the positional offsets are never too different however let consider now hypothetical variant of force directed layout which implements pauses ok maybe not so hypothetical ve implemented it that is to say when the layout is paused calls to alpha are buffered including resume and not invoked until the layout is unpaused what happens when you drag node when the layout is paused there are two possibilities the node doesn move since all positions are frozen or the node moves but no forces are applied here what actually happens the node doesn redraw remember only px py are changing but once the layout is unpaused the node flies off in the opposite direction it was paused this is because the drag already finished so the fixed flag is no longer set eek fortunately the fix is simple function dragmove px d3 event py d3 event force resume restart annealing but have to convince you that it good idea right >>>req
fallback strategy for mismatch in domain and range cardinalities consider the following case d3 scale linear domain 10 range the cardinality of the domain and range arrays don match so d3 will choose bilinear interpolation with the domain end points being 10 and the range being you can see this in d3 src scale bilinear js snippet shown var uninterpolate domain domain interpolate range range wonder if more intuitive fallback strategy would be to instead have the end points for the range be the first and last elements of the array understand that this is still somewhat arbitrary solution to an improper use of the api what if the array contains random values but suspect that it will lead to more expected result in large portion of the cases >>>docs
add scale tickprecision to query appropriate format percision suppose that have an axis for quantity that is percentages the obvious way to implement this is axis tickformat d3 format however this number will have its precision clipped to the units place so if you have very small quantities you ll see so what we like is to be able to ask for custom format but at the same time get the precision computed for us maybe this would be new argument for scale tickformat >>>req
revert to bottom orientation when invalid orientation is specified when invalid value is set d3 does not notify where is wrong it informs me uncaught typeerror cannot call method apply of undefined this is not kind for developers >>>bug
linkdistance and linkstrength called with no arguments return function not value as seen in this transcript this is not consistent with the other methods >>>bug
removing behaviors while it possible to specifically unbind behavior handlers not seeing any clear way to easily remove the behavior itself in v2 or v3 if you want an element to be draggable most of the time but disable the drag handler later >>>req
code coverage test added test cov makefile target that runs jscoverage https github com visionmedia node jscoverage on src prior to testing outputs coverage html file with line by line breakdown of code coverage currently clocking in at 71 coverage >>>test
selection sort should skip null nodes rather than pass null to comparator discovered that when selection includes exiting nodes the sort comparator receives `null` as value when it would normally be expecting data looks like fix might involve bit friendlier relationship between sort and order but any reason not to try tackle this this violates the usual expectation and current documentation that null nodes are skipped over by operators if this is by design would appreciate bit more insight and can update the wiki to make sure this caveat is noted >>>bug
removing events in d3 dispatch by name only when attaching several listeners of different types with d3 `d3 dispatch` it could be handy to just supply name to `on foo null for instance >>>req
streaming dsv parser proposed api >>>req
transitions are missing certain methods we should probably add these methods for consistency with selection transition property interpolates property data transition datum equivalent to property data transition classed adds or removes class on start transition html similar to transition text however still best to not support these methods since their side effects are immediate rather than delayed by the transition transition data transition enter transition exit the data join needs to be computed immediately transition append the appended elements need to be appended immediately transition insert the inserted elements need to be appended immediately transition sort the elements need to be sorted immediately transition order the elements need to be reordered immediately supported but missing documentation transition node transition empty transition call>>>bug
transitions do not support get mode for attr style etc not sure whether this is bug or feature but see the following issue returns the height of the selected object does not get uncaught error invalid character err dom exception d3 js line 4405 understand that this type of usage might be rare but it might still be relevant custom functions that accept single select object as an input where attributes of each will both be read and set with the embedded transition in place if applicable and ii it not clear from the outset exactly which attributes will be set hence the custom function >>>req
d3 csv tsv header row how about returning the header row as an array in the d3 csv tsv callback currently the column names are detected like this but that doesn guarantee the same order as the original file it nice to have this ordering for example when putting the csv into data table explicitly returning the header row seems clearer too >>>req
making scaling of pack layout optional in zoomable pack layout it may not be desirable to have the layout scale especially with padding this adds method to the pack layout that allows turning scaling off like so var layout d3 layout pack size 100 100 scale false the value of scale defaults to true so that the current behavior remains the standard this came up in the juju gui project at https launchpad net juju gui using the pack layout complex environment with several services was rendering them too close together http atl mjs svc com scaled png by intentionally not scaling we get http atl mjs svc com unscaled png this is of course potentially only of use to us so it understandable if it doesn fit within the scope of d3 if there are any questions feel free to contact me at matthew scott canonical com m>>>req
swedish translations http www youtube com watch sy yf4zz yo>>>req
post selection and transitions need better strategy for doing post selection on axis transitions it difficult to override transition behavior because re selecting elements inside transition creates new transition rather than re selecting the existing transition >>>req
inherit hue or saturation when interpolating to or from monochrome color currently if you use `d3 interpolatehsl`or `d3 interpolatehcl to blend colour with black you get red shades introduced if you do the same with white you get green shades for example blue black equals purple would expect to see only shades of blue from bright to dark tweaking the input slightly gives us the expected result and shows where we re going wrong think the hue value for black and white should be ignored for interpolation this pull request fixes it for hsl and hcl and adds tests for rgb >>>bug
enter selections are missing certain methods ve got selection that grabbing the enter sub selection right now call is undefined on selections returned by enter see http stackoverflow com questions 10281997 how to use d3 data enter call for similar question and resolution is this by design >>>bug
dsv parse asynchronous when no arguments dsv data is special in the sense that it can be parsed incrementally unlike json xml etc this pull request allows an asynchronous version of dsv parse when no arguments are passed to the constructor should be backwards compatible here is quick hacked up of an asynchronous csv function where on data could for example add records to crossfilter reducing the total time of loading and preparing the filter csvasync function url 	var xhr d3 xhr url text csv 		buffer 		lastlocation 		parser d3 csv parse 		datadispatch d3 dispatch data 		on xhr on 	xhr on function source args 		return source data datadispatch data on apply xhr arguments on apply xhr arguments 	xhr on progress function 		buffer d3 event target responsetext slice lastlocation 		lastlocation d3 event loaded 		var lines buffer split 		if lines length 			var results parser lines slice lines length join 			if results length datadispatch data results 			buffer results results length 		 	return xhr send get it might make sense to add data dispatch to the d3 xhr object for any partial data parsed so far where applicable on data could return partial records or full if not supported and on load the full dataset when done >>>req
update chord js to support negative matrix values the chord layout currently does not support negative values in input matrices this commit provides support for negative values by making the chord group angle dependent on the sum of the absolute value of all matrix input values in group >>>req
small patch to allow the user to specify the center of gravity in the force directed graph this small update has certainly been useful on our project and thought it might be useful for others as well the patch is very small and backwards compatibility is maintained did not update the minimized version hope it helps >>>req
d3 geo path projection and pointradius should function as getters too recall not allowing this previously as way of protecting access to the default projection instance but think that too strict better to have them behave consistently >>>bug
replace example geojson files with natural earth data simply put the natural earth data is better particularly for world countries json perhaps it would be nice to include some additional low resolution files in lib naturalearth too >>>req
method to set the global frame function>>>req
export force drag instance so user can access it by calling force drag with no arguments the drag events have been namespaced as force similar to the other force events mouseover force and mouseout force it is very useful for the user to be able to get access to the force layout drag instance so we can override augment the drag behaviour easily using namespaced events again http bl ocks org 3616279 is one case where such ability is used to add kind of pinning behaviour for dragged nodes when shift ctrl has been pressed on mouse release the way this drag instance reference is obtained is in line with other d3 functions where calling it with no arguments returns the drag instance the documented use of drag via selection call happens to always call it with arguments so that pans out nicely here >>>req
force layout properly unset the fixed bits user may be using further bits and those should be kept intact use the force layout in several places where it was is extremely handy to use the higher bits for my own augmentations which depend on the internal if node fixed dont move node force layout logic one such example is http bl ocks org 3616279 which is layout which adds pinning baheviour where nodes stick to the dragged to location when you keep shift or ctrl pressed when stopping the drag when you try that gist it has the known issue that it doesn properly keep release the pinned state that an irrelevant detail of that specific example >>>req
bar tutorial improvement here https github com mbostock d3 blob gh pages tutorial bar markdown object constancy you could add comment to code snippet indicating that function parameter in data is the join thing you re talking about it is not immediately obvious without comparing it to the snippet above without join >>>docs
d3 random lognormal can be optimized currently call to d3 random lognormal invokes an unnecessary function call and no op math it can be rewritten as follows javascript lognormal function var arguments length if if return function var do math random math random while return math exp math sqrt math log >>>perf
d3 format currency support for example perhaps `d3 format would return currency format the behavior of would be similar to except it would add leading in the en us locale and perhaps leading in en gb the behavior can be approximated as follows although this doesn work with fill js function formatcurrency d3 format return function return replace >>>req
fix for webkit bad ctm when zoom fixes these 668 https groups google com topic d3 js tqj v7cv7eg discussion good place to test to see the diff is the mouse example also ran make so it changed d3 v2 js and the min not sure what the pull request equate is for those files all the real changes are in core mouse js refactored your code little bit so that there is d3 mouse getscreenctm function that just returns the fixed ctm added some extra code to set the html and body position to static before doing the bug test this is so that the test is more robust an insane person might have body or html not be at and have position not static example javascript d3 select body style position absolute style left style top 10px window scrollto 10 add this to your code and it would trick the regular d3 mouse function to think that bug44083 exists when it might not >>>bug webkit
add cubic polynomial splines currently hermite splines are being used in lot of places when you want to generate graphs of functions unfortunately these create bezier curves which may reverse eg http bl ocks org 3315490 and http bl ocks org 3316746 this can be solved by choosing control points that create regular polynomial splines see http bl ocks org 3316815 and http bl ocks org 3316859 tests are broken here because the generated paths have changed>>>req
d3 scale threshold>>>req
allow static localization of d3 time format you can now build locale specific version of d3 time format for example bash locale fr fr make will pull strings from the time format fr fr js file rather than en us >>>req
format strings should be overridable d3 time format contains number of locale specific strings month names and day names also the locale default formats for and as well as regular expressions derived from these names it would be nice to be able to customize these for different locale d3 format also would benefit from localization for example you might want to format 1234 56 as 234 56 in france and 234 56 in germany its possible to change the thousands group separator currently comma but the period comes from javascripts built in number formatting so this might only be possible by substituting custom number format implementation or by post processing to swap characters and d3 format does not currently support parsing so this simplifies the problem somewhat doing this properly might be out of scope of d3 see for example jquery globalize https github com jquery globalize which is much more extensive library for localization >>>req
transition tween supports get remove but attrtween and styletween do not it might be nice to make attrtween and styletween consistent if you said transition attrtween foo it might return the associated tween attr foo unwrapped it you said transition attrtween foo null it would delete the associated tween equivalent to transition tween attr foo null >>>bug
custom interpolators for transition attr style fixes 747 >>>req
shorter syntax for changing transition interpolator related to 725 746 it might be nice to have shorter syntax for changing the interpolator used for transition currently the only way to override the interpolator is by specifying custom tween for example if you wanted to use interpolatehsl on an attribute you might say js transition attrtween fill function return d3 interpolatehsl hsl 180 50 50 an alternative might be to specify an interpolator as an additional argument to transition attr js transition attr fill hsl 180 50 50 d3 interpolatehsl however this wouldnt work that well for transition style since theres already an optional priority argument for important properties suppose you could do type inference on the priority if its function assume that its an interpolator otherwise its string and there may be an optional fourth argument for the interpolator thats kind of icky but not horrible another option might be some higher order programming convenience functions for each d3 interpolatefoo we could have d3 tweenfoo js transition attrtween fill d3 tweenhsl hsl 180 50 50 where d3 tweenhsl is implemented as js d3 tweenhsl function return function return d3 interpolatehsl or even js transition attrtween fill d3 tween d3 interpolatehsl hsl 180 50 50 where js d3 tween function interpolator return function return function return d3 interpolatehsl the optional argument to transition attr and transition style looks the most convenient though >>>req
same type interpolatetransform is sometimes undesirable hmm this had an undesirable effect swooping on http bl ocks org 2206590 since it switched to using interpolatestring rather than interpolatetransform ive created forked version http bl ocks org 3258821 that preserves the use of interpolatetransform but the only way to preserve the old behavior is to tack on no op transform scale at the end to force the transforms to be dissimilar don like that at all >>>bug
added capability to wrap d3 as an amd module to generate wrapped d3 do make module type amd the wrapped d3 will be found in d3 amd v2 js and d3 amd v2 min js >>>req
selection enter insertinorder this spawned from the discussion on 732 rather than take functional argument to `insert` `before` argument more specialized function seems to make more sense here >>>req
d3 timer use high resolution timer if available this allows us to measure time with sub millisecond precision which can make transitions more precise currently only supported in chrome see also http updates html5rocks com 2012 05 requestanimationframe api now with sub millisecond precision http dvcs w3 org hg webperf raw file tip specs highresolutiontime overview html>>>perf webkit
selection append support for naked nodes and functions hello mike like to collaborate selection append support for naked dom nodes and for functions which according to normal d3 style will take the data and index arguments and can return either node or qualified or unqualified name for node >>>req
monotone cubic interpolation is implemented slightly incorrectly because the initial slopes were being set to the sum of the slopes of the secants instead of their average you can end up with wobbly line effects like https www dropbox com yzrdvux8kmvehzy original jpg so with the slope corrected the 1st commit you get https www dropbox com 4h3ba09a3c8gxda corrected jpg note in the data there are only points at 2001 2002 2003 2004 2005 2006 this implements the fitsch carlson method which has slight issue where it doesn respect local minima in the data note how in https www dropbox com 4h3ba09a3c8gxda corrected jpg the curve falls below just before 2004 in the data the minimum point is at 2004 however the spline does not reflect that to resolve this you can set the initial slope to be at local minima and maxima the second commit see https www dropbox com pep50cy9jsceyck improved jpg for the result >>>bug
event when all elements in transition are done it can be bit hard to detect when all elements in transition are done for example say you create transition and then create two subtransitions via transition selectall and if is only single element then you might be tempted to say each end callback however this callback will be invoked before and last tick which can interfere with certain cleanup actions another potential fix would be to fire the end callback one tick after >>>req
transitions are missing filter method more specifically transition filter should behave the same as selection filter rather than array filter >>>bug
broken tests linux 34 node 12 pre npm 27 just running make test hour floor npt observes 15 minute offset expected fri 31 dec 2010 17 15 00 gmt got sat 01 jan 2011 07 00 00 gmt deepequal hour test js 46 hour floor ist observes 30 minute offset expected fri 31 dec 2010 17 30 00 gmt got sat 01 jan 2011 07 00 00 gmt deepequal hour test js 53 hour ceil npt observes 15 minute offset expected fri 31 dec 2010 18 15 00 gmt got sat 01 jan 2011 08 00 00 gmt deepequal hour test js 86 hour ceil ist observes 30 minute offset expected fri 31 dec 2010 18 30 00 gmt got sat 01 jan 2011 08 00 00 gmt deepequal hour test js 93 hours npt observes 15 minute offset expected sun 06 nov 2011 18 15 00 gmt sun 06 nov 2011 19 15 00 gmt sun 06 nov 2011 20 15 00 gmt got mon 07 nov 2011 08 00 00 gmt mon 07 nov 2011 09 00 00 gmt mon 07 nov 2011 10 00 00 gmt deepequal hours test js 53 hours ist observes 30 minute offset expected sun 06 nov 2011 18 30 00 gmt sun 06 nov 2011 19 30 00 gmt sun 06 nov 2011 20 30 00 gmt got mon 07 nov 2011 08 00 00 gmt mon 07 nov 2011 09 00 00 gmt mon 07 nov 2011 10 00 00 gmt deepequal hours test js 62 time is approximately equal to now expected 1343047848534 to be in within 20 of 1343047848556 transition test time js 11 broken 1632 honored broken 460s make test erreur any idea br>>>bug
fix d3 geo circle clipping this uses new algorithm based on weiler atherton the difference is that we only need to clip against single line the circle so this simplifies things somewhat rough summary for each ring in each polygon intersect with the circle and generate an array of segments this same routine is used on its own for linestring and multilinestring features since we re dealing with closed polygons we check the first and last segment to see if they should be merged into one create circular linked list containing the intersection points in clockwise order of their position on the circle for each start point include reference to the end point finally traverse the linked list starting with an entering intersection point inserting the segment and then following the reference to the end point then interpolate along the circle edge to the next clockwise point which should always be an entering point and repeat until the start point is reached the resulting ring is added as polygon continue with step until all entering points have been visited to do assign holes to their correct polygons perhaps using winding numbers at the moment holes are essentially added as separate polygons which works for drawing since they re in anticlockwise order fixes 691 >>>bug
marker doesn display correctly on firefox 13 for the latest version of firefox 13 marker arrow on the path in the following example doesn seem to display correctly http bl ocks org 1153292 it works on safari and chrome >>>bug moz
radial archimedean spiral interpolation see >>>req
linear closed interpolation>>>req
faster linear interpolation >>>perf
fix circle clip>>>bug
custom d3 svg area line interpolators you can now specify function as the interpolate property of line or area allowing you to define custom interpolation behavior >>>req
d3 geo circle clipping is buggy circle clipping seems to mostly work but think it buggy for example say you re viewing the default hemisphere centered around and have simple two point linestring that starts at 60 and ends at 60 to render this correctly you actually need to convert linestring to multilinestring you have one visible segment from 60 to 90 and another visible segment from 90 to 60 there no way to represent the discontinuity here based on the current implementation we need to change the `clip coordinates function to return an array of coordinates to represent broken segments it pretty easy to see this bug when you enable clipping with the rotating azimuthal grid example http bl ocks org 3021474 related also wonder if there is more efficient way to enable clipping with animation currently we resample after clipping if we resampled before clipping perhaps we wouldn need to resample at each frame of the animationwe could just clip the coordinates directly but maybe that not possible cc jasondavies>>>bug
add support for outer padding on rangebands sometimes you want additional padding between the outer bands and the range extent now you can >>>req
use shortest path for hue in d3 interpolatehsl fixes 688 >>>bug
d3 interpolatehsl should use shortest path for hue the current d3 interpolatehsl implementation is nave in that it interpolates the hue directly however since the hue dimension is circular it should pick the shortest path and interpolate accordingly for example when interpolating from 10 to 350 it is better to go 10 355 350 than 10 95 180 265 350>>>bug
add d3 tsv for tab separated values this makes the previous d3 csv code bit more generic via d3 dsv delimiter separated values module generator fixes 501 thanks vlandham >>>req
faster d3 geo path implementation rather than creating separate arrays for each geometry shared buffer is used and the array is only converted to string once >>>perf
add padding to d3 layout pack the previous method of subtracting slightly from the radius introduces distortion where smaller circles are disproportionately reduced for example subtracting 1px from the radius scales circle of radius 5px by 64x while circle of radius 50px is only reduced by 96x by incorporating padding into the layout algorithm the leaf circles area is still proportional to the associated value due to the scale independent nature of the layout the specified padding value is only approximate >>>req
don transition label positioning attributes the axis component no longer uses transition for the text elements dy and text anchor attributes this makes it easier to style the labels using post selection since the transition will not override custom attribute values >>>bug
fix classed whitespace>>>bug
fix bug with unexpected transition inheritance prior to this change transitions used transition each internally which had the unexpected side effect of enabling transitions on d3 transition selection when called from within tween function this would only occur on the first invocation of the tween function when the elapsed time between the transition creation and the transition start was greater than the transition delay however this is fairly common as the default delay for transitions is zero this bug caused unexpected behavior if you tried to redraw an axis within custom tween function in some cases the synchronous redraw of the axis would compete with concurrent transition causing unexpected behavior by avoiding the use of transition each internally the user now controls when automatic transitions are enabled >>>bug
force alpha tweaks allow tweaking alpha decay rate and threshold >>>req
d3 mouse return incorrect position when browser zoomed d3 mouse performs little strange in mouse events when the svg did not on the left of screen if use the zoom tool of browser it cant recognize the location of mouse correctly it happens in ie9 chrome safari opera only in firefox it works well made simple demo of that http walkpie cnodejs net you can review the demo and download the code in the demo page the core part of the demo html this is left javascript var vis d3 select container append svg attr width 600 attr height 400 vis append rect attr width 600 attr height 400 attr style fill none stroke red var cl vis append circle attr cx 50 attr cy 50 attr vis on mousemove function var cp d3 mouse this cl attr cx cp attr cy cp >>>bug
dynamic filtering for d3 geo path >>>req
interpolate rotate 180 rotate 225 goes the wrong way d3 interpolatetransform rotate 180 rotate 225 should return rotate 202 but instead it returns rotate 22 >>>bug
add support for space separated thousands in d3 format currently d3 only supports as thousand separator like to use space instead >>>req
binary tree algorithm for treemap love the simplicity and speed of d3 treemap have several thousand nodes and it is far faster than jit or google treemap but found myself really preferring the binary tree layout algorithm instead of the squarified algorithm for my data you can see an example of it in google treemap visualization https developers google com chart interactive docs gallery treemap here screenshot of it with my data to give you an idea http imgur com clvb5 png ve implemented this algorithm for d3 screenshot of that the gradients are unrelated http imgur com 3yivs png and want to contribute the code back to d3 however after several intense days of getting it working my brain is bit fried and want need to move on to other parts of my project to get it done thus it is not complete the layout algorithm basically works but here what left to do more testing with various datasets it doesn utilize the optional rounding function sticky mode doesn work stickify is left unmodified and will surely break horribly if you try to use it there no way to select between the squarified and binary tree layouts simply replaced squarify with binarytree the ratio option is no longer used but is still there in vestigial form ported the change into d3 v2 js but none of the other files built by the makefile most notably d3 v2 min js are updated one last thing just noticed the google algorithm seems to alternate vertical horizontal at each step of its descent but my algorithm picks the dimension that is currently larger and chooses that dimension to cut in half this keeps the aspect ratio of the individual rectangles more square like but also results in some rows of nearly identical repeated shapes while google is more random looking maybe it could be configurable to work either way apologize for the incomplete code dump but figured it was better than keeping it to myself entirely hopefully someone can make use of it and just maybe finish it up and get it incorporated into d3 proper here the branch just one new commit https github com mackstann d3 tree binarytree treemap>>>req
chordratio new chord svg ve added the chordratio layout which takes rectangular array of relationships between entities each row represents an entity each column is that entity contribution to some total value for the column also changed the svg chord to cubic spline in an attempt to reduce path self intersections >>>req
brush jumps when held and not moved on ios on ios tapping or pressing and not moving brush can cause it to jump 20 100 pixels away alternatively the brush may increase in size if you move your finger after the jump the brush behaves correctly jumping back to its original location and sliding resize like it supposed to this bug does not appear on desktops http mbostock github com d3 ex splom html>>>bug ios
time format returns incorrect value week numbers should be 53 not 53 per the iso 8601 spec http en wikipedia org wiki iso 8601 example expected actual >>>bug
added ability to specify chords with explicit relationships instead of matrix hi wanted the ability to specify chord data with simple source target value 45 372 kind of relationship object this also allows explicit declaration of which is the source and which is the target when using matrix whichever number is first or larger wins added two new methods to d3 layout chord relationships gets or sets the relationships array addrelationship sourceindex targetindex value pushes an individual relationship onto the relationships array then added code to that closure relayout function to use the relationships array to populate the chords and groups arrays ve got sample reworking of the hair color example chord with the correct dominant hair color highlighted having git issues though and am unable to push the new files happy to send them offline on request feedback is of course appreciated cheers dave>>>req
add flag to zoom behavior to control zooming origin this allows users to easily disable the event handlers that they don want or separate the handling of zoom events into different functions like 	var zoomtranslate d3 behavior zoom 			dblclick false 			wheel false 		 		 translate projection origin 		 on zoom translate 	var zoomscale d3 behavior zoom 			click false 			dblclick false 			touch false 		 		 scale projection scale 		 scaleextent 100 800 		 on zoom scale 	var svg d3 select body append svg 		 attr width width 		 attr height height 		 call zoomtranslate 		 call zoomscale this is very useful if you only want the scroll wheel to scale and not translate as well >>>req
population pyramid example missing vertical tick in firefox in the latest version of firefox mac the vertical ticks with data value is missing for the population pyramid example >>>bug moz
d3 svg area line radial needs linear closed interpolation>>>req
zoom behavior should cancel subsequent click like drag >>>bug
shorthand for setting multiple attributes simultaneously it might be nice if selection attr foo bar 42 set both the foo and bar attributes simultaneously the same could apply to selection on selection classed selection style etc this is especially useful for vendor prefixes >>>req
ordinal scale rangeband when defined with rangepoints currently the `rangeband` property is set to in `scale rangepoints` but questioning the usefulness of this isn rangeband the `step` width in this context understand that philosophically if you don define your scale range via `rangebands` or `rangeroundbands` then expecting value for `rangeband` might be odd but practically speaking it useful to know the width between the range points which is what expected `rangeband` to provide >>>req
d3 time format doesn always handle leap years specifically since the year can be set after the date it possible for setting the date to roll over from february to march to fix this we need to parse the fields independently then the set them in the correct order >>>bug
d3 layout hierarchy allow internal nodes to have value this adds the ability for the internal nodes to contribute to their value instead of their value being entirely composed of their children values adds new method to d3 layout hierarchy to set `internal value` in similar fashion that you set the `value` for leaf nodes when recursing check to see if there function for internal value if there is call it am new to d3 so apologize if this is already do able or if left anything out >>>req
add selection multiply this is similar to selection each except you get single element selection and transition function this makes it easy to implement components that support automatic transitions when called on selections such as the axis and brush >>>req
d3 random lognormal js d3 random lognormal function var random d3 random normal return function return math exp random >>>req
rewrite d3 svg brush to use transient window listeners >>>req
update examples to use current best practices for example this in detail margin object with `top` `right` `bottom` `left` properties cw order define width and height as inner width and inner height full words rather than single letter variables `margin` instead of `m` etc breakout definition of scales to multi line statement use inverted range for consistent positioning use nested svg within svg svg for margins >>>docs
d3 time needs documentation d3 time scale copy d3 time interval floor round ceil offset range utc d3 time weekday d3 time dayofyear d3 time weekofyear d3 time weekday ofyear >>>docs
d3 geom needs documentation d3 geom contour d3 geom hull d3 geom polygon >>>docs
d3 geo needs documentation d3 geo bonne d3 geo equirectangular >>>docs
d3 behavior needs documentation d3 behavior zoom >>>docs
d3 scale needs documentation d3 scale linear copy d3 scale log copy d3 scale pow copy d3 scale ordinal copy d3 scale ordinal rangeextent d3 scale quantile copy d3 scale quantize copy d3 scale identity >>>docs
d3 core needs documentation d3 map d3 mean d3 median d3 random d3 transpose d3 selection d3 selection map datum d3 transform d3 svg mouse d3 mouse d3 svg touches d3 touches >>>docs
d3 svg diagonal needs tests >>>test
d3 svg chord needs tests >>>test
d3 svg brush needs tests >>>test
d3 scale identity needs tests >>>test
d3 geom voronoi needs tests >>>test
d3 geom quadtree needs tests >>>test
d3 geom hull needs tests >>>test
d3 geom delaunay needs tests >>>test
d3 geom contour needs tests >>>test
d3 transform needs tests >>>test
d3 touches needs tests >>>test
d3 random needs tests >>>test
d3 mouse needs tests >>>test
d3 collapse needs tests >>>test
d3 behavior zoom needs tests >>>test
d3 behavior drag needs tests >>>test
d3 geo greatcircle needs tests >>>test
d3 geo circle needs tests >>>test
d3 geo bounds needs tests >>>test
d3 layout stack needs tests >>>test
d3 layout force needs tests >>>test
d3 layout chord needs tests >>>test
d3 layout bundle needs tests >>>test
remove and query data >>>req
builtin properties>>>bug
allow number of ticks to be configured for ordinal scales for axes with ordinal scales of high cardinality the number of ticks drawn is excessive it would be useful to be able to specify number of ticks as with quantitative scales >>>req
expose d3 selection enterprototype for better extensibility in order to make some d3 plugins came to extend d3 selectionprototype which was fortunately available as d3 selection prototype but unfortunately discovered that d3 selection enterprototype wasn available as public api so here just proposing to expose d3 selection enter as d3 selection enter and to put d3 selection enterprototype as its prototype d3 selection enter prototype btw think extensibility deserves better doc will probably do another pull request about it next time also as just wanted to make one feature pull request didn include this but think it would probably be nice to have some kind of helper like d3 selection extend function name method d3 selection name d3 selection enter name method return d3 selection what do you think >>>req
rewrite d3 behavior drag to be more like d3 behavior zoom >>>req
time enhancements>>>req
d3 time weekofyear sundayofyear d3 time dayofyear etc d3 time format has some nice date math in it but sometimes you want the numbers themselves rather than the strings it might be nice to expose the week number starting on sunday or monday and day of year number as separate methods >>>req
d3 time mondays would like version of d3 time weeks and d3 time week that is not sunday specific it starts on monday one possibility is d3 time mondays d3 time sundays etc >>>req
augment d3 csv format to handle an array of objects currently d3 csv format is the reverse of d3 csv parserows it would be useful if it could also reverse the d3 csv parse function in other words if it could take as input an array of objects each with the same keys and return csv of values with the header row consisting of the key names https github com mbostock d3 wiki csv>>>req
add resume and stop events to the force directed layout the motivation for this patch is to allow for layout to hide the whizzing and zooming part of the process and only render the network once it is stable note that start isn implemented since it is functionally identical to resume >>>req wip
decorative brush resizers touch support the brush component now allows you to add decorative elements to serve as brush resizers while keeping the default behavior of few invisible pixels on the edge of the extent any element you add to resize containers can serve as visible handles for the brush this commit also fixes two small bugs with the brush component first we now track the offset between the extent edge and the mouse rather than immediately jumping the extent edge to the mouse position this was barely noticeable previously due to the resizers being so thin but it is very noticeable with large resizers second the default behavior for the space key is not prevented whilst dragging >>>req
add parsers for tsv and other delimited text believe it would be useful to abstract out the parsing and formatting of d3 csv to allow for tab separated texts and perhaps other sv ve created quick hack of d3 tsv here https github com vlandham d3 tsv it uses almost the same code as d3 csv but instead of hardcoding the separation character you pass it into the format and parse functions would it be useful to attempt to bring this into the main code base if so d3 csv could be modified slightly to use the same code and just pass in comma any suggestions on what the general parsing code should be called and where it should live so that d3 csv and d3 tsv could share it effectively >>>req
treemap with zero value nodes cannot be displayed in ie the following example crashes in ie9 due to negative value in the width property http bl ocks org 1516547>>>bug ms
add new format to d3 time format for the ordinal date suffix this change adds new s` format to d3 time format which prints the english ordinal suffix of the formatted date for example `d3 time format used to format 01 jan 1990 would output `jan 1st` >>>req
zero duration race condition causes nan problem the following code would periodically cause error invalid value for attribute cy nan var clip group selectall circle bcls data points transition duration this config transition attr cx function return fmi attr cy function return the problem appears to be in the transition tick handler specifically function tick elapsed if lock active id return stop var elapsed delay duration ease tweened length if duration is zero this causes divide by zero giving nan it didn happen all the time guessing that sometimes the timing meant that the tick didn always fire but when it did bad things would happen simple way to make this code more robust would be var duration elapsed delay duration ease tweened length this is around line 2042 or so in d3 js >>>bug
selection transition duration convenience function the following convenience function would be great it would allow the programmer to write one piece of code which would very efficiently support the zero duration transition case without incurring the overheard of timers or other additional processing >>>req
scale ticks maxcount wish the count argument for ticks was interpreted as maxcount instead of suggestedcount example using time scale for my axis and not in control of the domain but know that on my range or width can render maximum of date labels before they start overlapping ve seen ticks count returning twice the provided count suggesting should use ticks but then sometimes end up with just one tick which is bad the user needs to see at least ticks to make sense of the scale >>>req
add selection datum this issue covers the features of 45 >>>req
rewrite of d3 behavior zoom the extent functionality is simplified such that the zoom behavior only supports an extent on the scale factor furthermore the extent is expressed as scale factor rather than zoom level for consistency an extent on translate is no longer supported this isn possible unless the zoom behavior also knows the size of the canvas the scale transform functionality is also simplified simply register an or scale and the zoom behavior will automatically update the domain before zoom event is dispatched if you change the scale domain programmatically you can simply reassign the scale to the zoom behavior both of these changes are strictly backwards incompatible however since this class is undocumented ll probably let this slide with minor version bump rather than waiting until v3 this commit also reduces the scroll speed slightly since the previous implementation seemed little too fast for my liking it would be easy to make the scroll speed configurable as future enhancement implementation note rather than using global event listeners on the window and needing to copy local state into globals on interaction start the zoom behavior now uses closures that are temporarily bound mousemove and mouseup are bound on mousedown and removed on mouseup fixes 484 allowing scale and translate to be get or set externally fixes 485 providing an example of integration with d3 geo projection fixes 487 using scale extent rather than zoom level extent >>>req
d3 behavior zoom zoom extent is math pow scale the d3 behavior zoom scale reports the scale as scale however the extent feature uses zoom level math pow scale this is inconsistent we should standardize on scale since this is what is used by d3 geo projection >>>bug
d3 geom tile like to see something like pixymaps built in to the d3 geom package one possibility is that given rectangular display area say div element accessed via selection call and d3 geo projection d3 geom tile could compute which image tiles should be visible in that area fetch them via queue and render them to canvas with css transform not 100 set on the d3 geo projection dependency not sure exactly how coordinates get computed for projections other than spherical mercator and d3 geom tile should support arbitrary tile quadtrees rather than just maps so perhaps there another component needed which converts locations to coordinates and d3 geom tile could use that rather than the projection >>>req
example of d3 geo projection d3 behavior zoom >>>req
d3 behavior zoom should allow setting of center >>>req
d3 scale identity this could be used when brushing in geographic projections or for simple axes >>>req
minimize output when interpolating transforms currently d3 transform generates verbose transform such as translate rotate skewx scale it would be better if the minimal output were generated by d3 interpolatetransform rather than relying on d3 interpolatestring >>>req
d3 time scale ticks should have an inclusive upper bound for consistency with d3 scale linear ticks >>>bug
better require d3 compatibility we should probably do something like this rather than always defining d3 in the global namespace >>>bug
d3 xhr and friends should use node convention error result not backwards compatible obviously >>>bug
d3 distinct d3 nest distinct it be nice to have version of d3 nest for computing the number of distinct keys currently you can do something like this however it would be faster to just compute the distinct count than to populate all the entries that might look like this alternatively this could be provided as `d3 distinct array method it kind of nice that you can get the same functionality out of nest operator though however it bit weird since the nest operator allows multiple keys do you want the number of distinct values for all keys or just the first key probably across all keys >>>req
add option to arrange axis labels automatically introduces the arrange option for the axis components if set to true and the axis labels overlap it will use simple linear probing algorithm to shift the labels such that they do not overlap anymore adds an element line tickpointer that will point from the axis tick to the shifted label also adds the class tick to the axis tick line to be able to distinguish the two this is preliminary implementation that doesn allow lot of customisation and provides only the most basic functionality the new option defaults to false in which case there is no change to the previous behaviour example at http bl ocks org 1678215 not particularly useful in this context more so in conjunction with https github com mbostock d3 pull 326>>>req
d3 time scale nice >>>req
basic array bisect accessor implementation here basic implementation of accessors for array bisect methods for 451 couple potential issues though should the accessor also be applied to the `x` search value for my current use case or two the answer is pretty decided no typically looking for an object near raw time or similar value but perhaps this is not consistent with other accessor taking methods would it be useful to change the argument order or at least look for null in the initial lo hi arguments at least with something like `bisect` it should be fairly safe assumption the caller has the array referenced by variable but it still seems unfortunate that using an accessor would require explicitly providing the heretofore optional search limiting arguments `d3 bisect length acc >>>req
query the force layout alpha property you should be able to inspect the force layout current alpha value >>>req
force layout should have tickend or end event when it cools this would make it easier to produce static layouts http bl ocks org 1667139 >>>req
expose force tick fixes 419 >>>req
ie comma parse error compiling this with closure compiler and it won allow trailing commas believe ie8 and below don support trailing commas >>>ms
d3 time interval ceil d3 time interval serves as floor but sometimes we want ceiling function >>>req
setting brush extent can leave resizers as pointer events none >>>bug
d3 bisect should allow an accessor because this is something that lot faster than calling d3 bisect array map accessor >>>req
convenience routines for days in month hours in day etc it be nice if there were shorter form of this feel like this could be built in to the d3 time range utility for example perhaps you could say something like and perhaps `d3 time years utc days` for the utc equivalent that bit ugly because you end up having lot of combinations though meh >>>req
d3 svg month it might be nice to take this code out of the calendar example and include it in the core library some convenient extensions the size should be configurable the use of sunday or monday based weeks should be configurable vertical or horizontal orientation might be nice positioning relative to the first week in the month rather than the first week in the year >>>req
initial implementation of variable width line simulates variable width lines by drawing and connecting two boundary lines can be used in much the same way as d3 svg line except that the fill attribute does what the stroke attribute does for normal lines suppose wrappers could be added to make it behave exactly like d3 svg line intercept attr calls but think explaining how it done in the documentation would be better option that would offer people more flexibility example at http bl ocks org 1642835>>>req
fix polylinear descending domains or ranges fixes 446 >>>bug
polylinear scales should allow descending domains or ranges >>>bug
add progress events to d3 xhr related to 444 the returned object could allow you to listen for progress events if supported >>>req
cancel outstanding d3 xhr request perhaps d3 xhr could return an object with an abort or cancel method >>>req
d3 geom polygon clip fails on closed polygons noticed that the behavior of the clip and centroid methods of d3 geom polygon is incoherent the former clip does not work correctly when the passed polygon is closed polygon when the last element is the same as the first element however the latter centroid does not work correctly when being passed an open polygon it took me some time to figure out why my code didn behave as expected due to this inconsistency suggest either one of these options make both methods rely on either closed or open polygons and clearly state what is expected in the documentation make both methods work with both closed and open polygons though this would give performance penalty as you need to do the checking and addition removal of the last element consequently methods returning d3 geom polygon should be fixed to have the correct behavior ran into this with d3 geom voronoi which returns open polygons >>>bug
make the voronoi implementation extensible this is relative small change that makes d3 geom voronoi more extensible the current implementation assumes that users are only interested in the cell boundaries however for some code working on also need the neighbors of each cell in order to make this possible with as little changes as possible propose this patch in stead of calling d3 geom voronoi only with set of vertices it now also takes an optional callback parameter this parameter should be an object that provides two methods handle handle edge addition result finalize and return results in my patch the default behavior of d3 geom voronoi is unchanged as moved the original anonymous function into default edgehandler which is used when the handler parameter is undefined this patch allows me to install my own edgehandler which records the required information comments questions and suggestions for improvements welcome of course cheers bertjan>>>req
d3 geom voronoi fails with ve been playing around with the voronoi implementation and found that it has bug well at least imho the problem arises the case when the number of sites is two and you want to clip the cells context the documentation at https github com mbostock d3 wiki voronoi geom wiki voronoi states that when you want clipped cells you have to post process the results using polygon clip however when you pass only two sites to the voronoi function the return value will basically be two lines instead of closed polygons using polygon clip on line has undefined results this whole behavior is demonstrated here https gist github com 3cf58c5609be64db8c9f tried to make bl ocks org out of it but that didn work for me do understand that clipping is not default action in the voronoi implementation for performance reasons however clipping should work for all results of voronoi tessalation possible solution would be to add an extra vertex to all polygons resulting from call to voronoi which have only two vertices not sure if adding one vertex is enough though as this might result into missing corners in due to the clip in some cases >>>bug
d3 time interval should take offsets for example d3 time week date could return the start of next week while d3 time week date could return the start of the previous week >>>req
the chord layout should return elements in input order >>>bug
add d3 behavior mouse touches supports both svg and html do we still need an alias for backwards compatibility if this is going into v3 it would be nice to have some examples of html only d3 behavior drag zoom see 386 >>>req
remove accessor functions from d3 min max extent sum median mean this way it easier to do nested iteration for example rather than you can say did not include d3 first and d3 last in this list because believe those functions should go away after 420 is fixed >>>req
combine all modules into d3 js think having separate files for separate modules is premature optimization and it would simplify things to combine the code into single file d3 js you still be able to make custom build if you wanted to reduce the file size by stripping out unneeded components the current breakdown is this commented minified zipped d3 js 129 071 58 427 19 489 d3 csv 328 078 550 d3 geo 25 648 10 727 214 d3 geom 22 089 730 215 d3 layout 48 281 17 433 488 d3 time 19 685 11 042 069 after this change d3 js 247 102 106 429 34 740 for comparison jquery is 248 138 93 867 33 149 so we re talking ballpark the same size as the most popular javascript library in existence if you included all the files this change would save the overhead of separate requests and save 285 bytes on the gzipped content >>>req
multi year intervals for d3 time scale haven found api to do this so have added lines right into d3 time into `d3 time scalesteps` 31536e6 year 31536e6 10 10 year 31536e6 50 50 year 31536e6 100 100 year 31536e6 1000 1000 year and `d3 time scalelocalmethods` d3 time years d3 time years 10 d3 time years 50 d3 time years 100 d3 time years 1000 is it the only way or can you point me out how to add custom scale steps using d3 api >>>req
remove d3 first last don see these functions being used anywhere so we should probably get rid of them think given 432 might replace them with `d3 min max extent by comparator if we did need them >>>req
run force layout synchronously it might be nice to have the ability to run the force layout synchronously so that you could say run it fixed number of iterations or until the alpha dropped below certain value then you could initialize force layout synchronously on page layout or externalize the computation to webworker >>>req
support touch events in d3 svg brush there probably much better ways to implement this so not even going to bother with pull request confirmed working on an ipad>>>req
setting html or text to undefined results in undefined rather than we should probably treat null and undefined the same since we do so with the attr and style operators >>>bug
axis labels reversed in splom example the axis labels in the scatterplot matrix example are reversed from the order the data is plotted for example for sepallength it reads the reverse call mutates the range array in place which for some reason affects the the axis labels but not the actual scale >>>bug
chord layout draws wrong arcs for angles 180 when one of the targets takes more than 50 of the total chord layout chooses wrong arc to draw through two points should pick larger arc instead of shorter try using this data in the example var data 1000 1000 1000 1000 1000 1000 1000 30000 1000 var data 1000 1000 1000 1000 1000 1000 1000 1000 30000 http mbostock github com d3 ex chord html >>>bug
selection order reorders elements to match the selection >>>req
transition parameter inheritance with more complicated transitions it often necessary to create multiple transition objects this is because the selectall data is used to compute the enter update and exit separately and transitions do not support the data operator and enter exit append and insert it tempting to consider whether it would be possible to support the data operator which would take effect immediately and allow transition to be created once regardless of its complexity >>>req
union selections wonder if it would be useful to union selections or transitions for example say you have barupdate transition and another barexit transition what if you want to apply the same operations to both sure you could extract that code out into separate function and call it explicitly but if you could union them you could just restructure the code slightly >>>req
selection filter selector using matchesselector >>>req
d3 layout cluster with one node will divide by zero writing simulation where dynamically adding nodes to cluster layout if there is only one node in the cluster layout the value will turn into nan because of the code line 1394 d3 layout js d3 layout treevisitafter root function node node node x0 x1 x0 size node node root size in this case node root and root which makes node nan to recreate just edit the examples cluster cluster js d3 json data flare json function json json name test new line var nodes cluster nodes json >>>bug
d3 interpolate 10px 20 fails this should use d3 interpolatestring rather than d3 interpolatenumber one possible fix >>>bug
type inference or explicit conversion for d3 csv it be nice if it were easier to parse column types when using d3 csv rather than always using strings two obvious cases numbers and dates probably prefer doing this explicitly rather than guessing types but if we are confident that we can do type inference accurately then that might be okay too >>>req
move d3 svg mouse touches to d3 behavior and make them not svg specific so that you can do panning and zooming with html content if desired >>>req
dispatch on should return value you should be able to retrieve the bound listener on get and method chain on set >>>req
feature request zoom and independently using the mousewheel zoom behavior that is demonstrated by the zoom pan example have been extending the example to test things out and when added data found wanted to zoom only in or only in so hacked on the source and got something working but it is broken and think maybe going down the wrong path the problem is that when zoom in one dimension the zooming engine doesn remember that the zoom action only applies the zoom to one or the other dimension not both in fact it appears that the zoom thing is more or less stateless and just getting its information from the mousewheel state whatever feeds the `z` variable is used for both dimensions not 100 certain but the following code looks like it just computes power scaling factor for both dimensions while this works fine the bug is in computing the zoom extent after wildly zooming in on one dimension but holding the other constant the zoomed in dimension clamps fine cannot pan beyond the original limits but the non zoomed dimension can go way beyond its limits because the zoom extent clamp function is passed the `k` value that is too big for the non zoomed dimension the clamp function thinks the non zoomed dimension is zoomed in super tight and so it will allow lots of movement when in fact the zoom is was thinking to keep track of zoom dimensions but that is ugly perhaps zoomextentclamp could be modified to look at the current dimension and desired pan value to decide whether to clamp rather than guessing from the so perhaps before hack down dead end like some advice on this also was told by coworker that control mousewheel is standard for zooming in the screen and so won usually work was going to use shift to hold the dimension constant and perhaps alt key for >>>req
d3 transform does not handle negative scales d3 transform scale returns translate rotate skewx scale d3 transform scale returns translate rotate 180 skewx scale both of these are incorrect see 375 >>>bug
d3 transform null should return the identity transform the current implement crashes when null or invalid transform is specified simple way of fixing this is to check if consolidate returns null before dereferencing the matrix see 375 >>>bug
d3 transpose javascript d3 transpose function matrix return d3 zip apply d3 matrix >>>req
post support in xhr etc not sure if this is philosophical technical or time based choice but the implementation of xhr doesn currently support post requests an optional data argument could be passed and the method can be get if data is null and post otherwise if it is matter of time would be willing to fork and write it but would prefer to know beforehand that you wouldn reject the change on philosophical or technical grounds >>>req
diagonal interpolation for parallel coordinates it might be nice to have an interpolation mode that is similar to d3 svg diagonal >>>req
d3 extent d3 median and psuedo arrays should these methods accept psuedo arrays as input such as arguments d3 min and d3 max currently support this and this is assumed by d3 zip >>>bug
d3 scale rangepoints padding is off believe that it is off by factor of according to the documentation padding value of should offset the first and last point from the edge by half the distance between points the current implement requires padding value of for this >>>bug
d3 min d3 max d3 mean and sparse arrays if you have sparse array such as the missing elements are ignored by array map however with d3 min and d3 max we still attempt to access these values with the accessor think for consistency with array map we should skip these values even if the accessor would return something that is not undefined >>>bug
specify chord layout in terms of nodes links and linkvalue the square matrix used by the chord layout is bit inconvenient for other applications for one thing you can only specify an array of numbers when in many cases you have other data you might want to use to annotate nodes and links one hack ve used is to provide matrix of objects that override valueof but this is icky example it seems like we could use the standard nodes and links style data used by the other graph layouts in particular d3 layout force then you could provide linkvalue method for determining the angular size of each link >>>req
hierarchy visitor pattern related to 317 having code for visiting each node in hierarchy might be nice we have that code internally and it seems like we could expose it protovis had visitafter http mbostock github com protovis jsdoc symbols pv dom node html visitafter and visitbefore methods d3 doesn require that hierarchy nodes implement any particular interface for example they can be loaded from static json files so we probably want method signature like this there no reason for this to be bound to specific hierarchy layout instance but making it static method is more verbose we took similar approach with links >>>req
selection adjoin it might be nice to have an adjoin operator or some other name similar to insertadjacenthtml see this thread >>>req
graphviz sugiyama layout something along these lines >>>req
d3 layout pie should sort by descending value by default this improves the display in the default case and it trivial to disable also this is nice thing to do by default if the value is computed potentially expensively rather than directly accessed >>>bug
d3 layout pie doesn coerce value to number it looks like this reduce won coerce non numeric values to numbers >>>bug
munging of transform attribute breaks interpolation ve noticed that firefox and ie9 silently convert transform to transform which is to say if the coordinate is zero it is silently dropped when the attribute is set this causes problems when interpolating strings because instead of interpolating from translate 10 to translate 10 20 we re interpolating from translate 10 to translate 10 20 in the latter case the initial value of the second number 20 is undefined rather than zero so d3 cannot interpolate and just jumps directly to 20 one possible fix is to change the core interpolator such that any new number for which there is no existing number is interpolated from zero rather than undefined however this has potentially bad side effects for example the d3 svg axis component enters new ticks and then uses single transition on the entering and updating ticks to set the tick size previously the entering new ticks would have an initial tick size of undefined so when the transition starts they would immediately be set to the proper tick size under the above change they would transition from to the tick size as they enter this looks bad we could fix the axis component to not do this but there are potentially other places where we don want to assume missing number has the initial value zero on the other hand the only alternative can think of is to set the transform as translate 0000001 which is stupid or to write an interpolator which is transform aware which is certainly possibility since think jasondavies has already implemented transform transitions using matrix decomposition but we have to register that in d3 interpolatebyname which means the special case behavior might sometimes not be available direct d3 interpolate and also that code is quite large to solve this one small problem argh you can see this bug in the bar hierarchy example >>>bug moz ms
d3 behavior zoom doesn handle manual changes to domain in my application have graph that can be zoomed and panned also it can be animated to some predefined region if click over mark change domain the issue is that when click on mouseup d3 behavior zoommousemove is called over graph not mark it restores the position and scale that were before the animation start tried to set domain null when click over mark to reset behavior zoom but it doesn help mentioned the animation to show how use it obviously the problem is that d3 behavior clones graph original domain or calculates location and scale and then ignores its change from outside >>>bug
all colors should tostring as hex rgb currently d3 interpolatergb returns rgb 128 64 and d3 hsl returns hsl 50 mobile safari doesn support hsl which means you need to hsl rgb explicitly for the colors to work which is annoying also when computing transitions d3 interpolatergb return value can appear different from the current value solely due to different formatting if we standardize on hexadecimal rgb the behavior will be bit more consistent >>>req
add geotranslate method to projections and tests geotranslate works like translate but takes projection coordinates as input it is also scale independent there is no need to adjust geotranslate after changing the scale the primary use of this function is to move the map to specific place unfortunately this introduces some repeated code to maintain the translation internally independent of the scale didn find good way of avoiding this though and would be grateful for any pointers >>>req
allow to specify custom tick positions custom positions for ticks can be specified like ticks 20 33 56 which will give ticks in those positions >>>req
the classed operator should allow multiple classes for example `classed foo bar true should set both the foo and bar classes rather than throwing an error cc rrust>>>req
add support for non zero latitude origin to bonne most gis software don seem to support this and the formulas only refer to longitudinal origin the central meridian presumably because it trivial we could easily have georotational projection that performs rotations about all three axes not just and there is an argument for keeping an origin parameter for some projections though if the maths is simplified we don have an origin parameter for the mercator projection think used the albers projection as starting point for bonne so wouldn mind dropping the origin parameter from bonne altogether if you think that reasonable otherwise here is working latitudinal origin >>>req
fixed size nodes for hierarchical layouts it be nice to use the hierarchical layouts with fixed size nodes rather than scaling the entire tree to fit within the specified layout size >>>req
add si prefix format this right here stolen directly from gnuplot and is something cube made me want thanks for cube btw this adds the specifier to format numbers into nearest si prefix format so 127545 128k 1500 5k etc good for dealing with giant counters and for me more natural to read than exponent notation currently this is slightly deficient implementation in that it completely ignores precision and falls back on its own degenerate representation when 10 26 but wanted to at least check in to see if this be wanted before spending more time on it >>>req
quadtree for lines it would be great to have quadtree for line segments specifically for fast brushing and linking of line graphs ll probably go with pmr quadtree but thought post this up in case anyone has any better suggestions or implementation thoughts http donar umiacs umd edu quadtree lines pmr html>>>req
add d3 behavior select for brush filter this is typically called on an svg rect element dragging on the element parent will fire selectstart select and selectend events with d3 event having dx and dy set appropriately dx and dy will be updated as the rectangle is sized dragging on the element will also fire these events but only and will be updated while dragging this is because the rectangle is being moved fixes 248 >>>req
fix sort due to lack of nodelist prototype sort nodelist doesn support sort directly so we need to convert to real array first ve done this in selectall for efficiency this avoids new array being created every time the same selection is sorted however it may be slightly more efficient to create the array only when sorting to avoid unnecessary array creation when sorting isn used which is probably the common case unfortunately it difficult to test this because jsdom uses real array instead of nodelist >>>bug
npm tarball includes site not major issue but noticed the tarball in the npm registry contains the site directory which appears to be from an older version of d3 version 12 >>>bug
d3 layout forces on operator should behave like selection on currently you can only add event listeners you should be able to replace and remove listeners as well with the same semantics as selections on operator this isnt strictly backwards compatible but the current behavior is clearly bug if there is no way to remove an existing listener >>>bug
hierarchy layouts don like leaves with empty children arrays there are number of places where the hierarchy layouts will break if the leaves have empty children arrays it might be nice to relax the design such that empty children arrays are treated equivalently to no children array >>>bug
d3 layout pack fails on zero values see by johan >>>bug
multi value map support current progress selection attr done selection style done selection property done selection classed done selection on done transition attr done transition style done also we may want to include these but not 100 yet transition attrtween transition styletween transition tween >>>req
add d3 geo greatcircle can be used to generate great circle paths similar to geosphere gcintermediate in which discovered bug while writing the test case for this includes d3 geo greatcircle distance for computing the shortest geo path distance using the haversine formula for tutorial on using great circles see http flowingdata com 2011 05 11 how to map connections with great circles >>>req
ordinal scales shouldn coerce domain values to strings the scale must coerce the domain value to string to determine uniqueness but it probably okay to leave the values as they are in the domain so that they can be retrieved again for example http bl ocks org 1134768 some code prior to assumed it could retrieve date objects back from the domain that code broke when the date values were coerced to strings >>>bug
inherit namespace from enclosing element it might be nice if append and insert inherited their namespace from the enclosing element for example you could append svg svg then append and the latter would be interpreted as svg rather than xhtml it seems like this would be relatively safe change the only thing could see breaking would be svg foreignobject elements you need to append xhtml body rather than body but that seems relatively innocuous we might also want to make html an alias for xhtml >>>req
add invert to mercator albers and azimuthal includes unit tests >>>req
report dragstart offset in d3 behavior drag many of my drag event handlers are now something like however if the mouse is dragged outside of and then back in again will be offset by the distance the mouse was moved outside is this good enough use case to warrant reporting the offset since dragstart as well as the offset since the last drag event there are ways around it of course but they involve adding dragstart and dragend handlers which would be nice to avoid for brevity edit actually probably want the current absolute drag position rather than dragstart offset if want to avoid dragstart handler >>>req
florida keys cut off in d3 geo albersusa >>>bug
zooming goes only one way in firefox on ubuntu zooming with the mousewheel goes only way probably something wrong with the event delta >>>bug moz
opera compatibility opera fails to render many examples published on http mbostock github com d3 ex why >>>o
allow non unique keys in data join see 167 >>>req
extract drag behavior from force layout >>>req
select brush behavior for selecting two dimensional or one dimensional region similar to pv behavior select http mbostock github com protovis jsdoc symbols pv behavior select html >>>req
zoom behavior should support restricted pan zoom extent >>>req
invertible geographic projections d3 geo mercator et al should support an `invert` method >>>req
d3 mean d3 median reopening this request now that we have d3 quantile it seems like we could support these as nearly trivial convenience functions though guess there the issue that d3 quantile requires sorted array as inputdo we want the same requirement for d3 median >>>req
zoom behavior should prevent click events on drag similar to the force layout drag behavior >>>req
cartogram example doesn display properly in firefox the svg doesn include width and height so firefox defaults to 300x150 for more information see https bugzilla mozilla org show bug cgi id 675543>>>bug
too many recursive call to build quadtree in d3 geom js hi using d3 for visualizing huge network and testing many kinds of huge networks data 10000 nodes with force directed layout on the specific network data meet the error rangeerror maximum call stack size exceeded with chrome 12 tracked this error and found this is the stack overflow error too many recursion with firefox think that it is caused by limitation of recursion http www javascriptrules com 2009 06 30 limitation on call stacks so fixed the function insertchild quadtree on d3 geom js to the iterative version error is disappeared and some speedup recursive version before function insertchild x1 y1 x2 y2 compute the split point and the quadrant in which to insert var sx x1 x2 sy y1 y2 right sx bottom sy bottom right recursively insert into the child node leaf false nodes nodes d3 geom quadtreenode update the bounds as we recurse if right x1 sx else x2 sx if bottom y1 sy else y2 sy insert x1 y1 x2 y2 iterative version after function insertchild x1 y1 x2 y2 var new array while true var sx x1 x2 sy y1 y2 right sx bottom sy bottom right leaf false nodes nodes d3 geom quadtreenode update the bounds as we recurse if right x1 sx else x2 sx if bottom y1 sy else y2 sy if isnan isnan return ignore invalid points if leaf var point if if math abs math abs 01 point null push arg1 arg2 arg3 x1 arg4 y1 arg5 x2 arg6 y2 else point if length break else var obj pop obj arg1 obj arg2 x1 obj arg3 y1 obj arg4 x2 obj arg5 y2 obj arg6 >>>bug
scale pow doesn work with domains crossing have some data in the domain 200 200 where most of the interesting values are in 10 10 it seems scale pow with fractional exponent ought to show more detail near but the resulting function only returns nan for all inputs think the problem is that the code assumes data will all be negative or positive while really we want to choose negative positive on per datum basis >>>bug
d3 geom voronoi yields strange results if any two vertices are the same to see this in action just add to examples voronoi voronoi js before and see the result it bit strange if you turn down the opacity on the paths you can see that there are many overlapping paths that are made think that there either should be check for this when d3 geom voronoi is called or there should be warning in the example documentation know that this is bit of corner case but it definitely comes up in real world usage was trying to do voronoi of subway map two stations had the same coordinates >>>bug
improve ie9 compatibility this adds simple patches for ie9 support by patching array map and creating simple workaround for elt style setproperty which ie9 doesn support ie9 does not support elt style setproperty name value priority but this can be worked around using elt style name value tested examples with this in place and every example checked worked in ie9 specifically this fixes bar bullet albers force directed graphs which don work without the patch thanks >>>ms
ignore non positive values in space filling layouts ran into this one today was creating treemap and didn realise the data contained zeroes which caused it to fail specifically `position` was being called with zero length array for `row` perhaps the space filling layouts should all filter nodes and make sure they re non zero and positive think this filtering used to occur but then it was removed to fix 121 >>>bug
allow variable branch lengths in tree layout would love to use d3 for creating phylogenetic trees phylogenetic tree is basically hierarchical tree where each node specifies its distance from its parent and this distance must be reflected by the length of the branch if there is currently way to do this with d3 can figure it out as side note the standard format for phylogenetic trees is newick http en wikipedia org wiki newick format would be happy to write function to transform newick tree to an appropriate json object that could then be used with d3 this would open up d3 to be used by the bioinformatics community and possibly get you some citations in scientific publications when people create trees using d3 >>>req
variable link strength distance in force layout would be nice to override the link strength alpha or distance on per link basis similarly it might be nice to vary the charge or gravity strength on per link basis but that could be more difficult >>>req
don trigger mousemove on mouseup in force layout or at least don trigger it if the mouse hasn moved and avoid spurious layout restart >>>bug
style setproperty in ie8 ie8 complains when running because this style setproperty is undefined is there known work around for this >>>ms
enter selections lack the `empty` operator >>>bug
hierarchical edge bundling as in >>>req
force layout friction is not customizable force drag is reassigned to the drag behavior the force drag getter setter should be renamed to friction maybe >>>bug
d3 sum but d3 stats mean and d3 stats median >>>req
need d3 time format for utc the current d3 time format only uses local times it be nice to have version that supports formatting in the utc time zone since javascript date objects support utc methods such as getutchours getutcminutes etc suspect it be fairly easy to reuse the code by wrapping the date object in proxy that forwards the local time methods to the corresponding utc method >>>req
force layout links and nodes should default to right now they default to undefined which is bit silly >>>bug
d3 svg area evaluates the accessor twice per element this is because it reuses `d3 svg linepoints` internally it would be better to evaluate `x` `y0` and `y1` simultaneously for each element exactly once this is considered bug because the behavior of each accessor should be allowed to be nondeterministic random number generator and thus evaluating an accessor twice produces invalid results also the order of evaluation should be consistent >>>bug
radial vertical forms for d3 svg area d3 svg area currently favors horizontal areas as only single accessor is specified it be nice to have vertical and radial modes though as in >>>req
log ticks do not observe inverted or poly domains currently d3 scale log ticks implementation assumes that the lower bound is and the upper bound is however the domain could be inverted or polylog domain could be used >>>bug
add lab color space support >>>req
nice scale domain javascript var x1 domain dx math pow 10 math round math log x1 math log 10 domain math ceil x1 dx dx >>>req
scatter plot ve put this in separate pull request so it easier to review it pretty straightforward extraction of the scatterplot code from `d3 chart qq` though >>>req
two minor ie8 compatibility problems testing stuff in ie8 get the following two errors these are minor api compatibility issues with workarounds available what your stance on these addeventlistener is not supported used in d3 event map not supported in this d3 code snippet scale domain function if arguments length return domain domain map number return rescale >>>ms
radar chart this also includes fix for problem with `d3 chart axis` where the intermediate ticks have the same text content as the major ones and hence the data join is confused need nice way to transition the data lines when adding removing axes or perhaps axes transitions should just be dropped entirely merged the axis branch into this one so could use it hope that not too confusing maybe should have submitted pull request to your axis branch so the diff is cleaner anyway sure you ll cope >>>req
heart d3 symbol know it super small contribution for now but hopefully as make the switch from protovis to d3 over the next couple months can help with more additions >>>req
add reusable mekko chart thought people might like reusable version of your excellent example >>>req
add d3 vector module and d3 vector interpolate >>>req
d3 min d3 max do not pass index to accessor function also the `this` context of the function should probably be the array itself for symmetry with map >>>bug
d3 min d3 max do not ignore nan at nan is ignored unless it the 0th element this is bug nan null or undefined values should always be ignored when computing the min and max >>>bug
geo panning zooming example an example using d3 geo path and d3 behavior zoom would be nice >>>req
better mousewheel precision like to use the new mousewheel hack found for polymaps in d3 behavior zoom >>>bug
add reusable impact chart inspired by github impact graphs not sure if this is the best name >>>req
d3 chart horizon love to see reusable horizon chart template using `svg defs` and clipping is bit tricky so it be great to encapsulate the existing example >>>req
d3 format should support additional types from the python specification specifically would like to see `g` which changes the meaning of precision to significant digits rather than decimal digits `n` which is equivalent to g` since we don have locale we ll use commas for percentages>>>req
add touch support to various examples mostly straightforward aside from the spline editor not sure how to support deletion of nodes ve also made the circles always appear at the touch mouse position for the voronoi example only tested in the ios simulator so unable to test multitouch to its full potential in theory you should be able to drag multiple nodes at once in the spline example >>>req
d3 interpolatematrix it be nice to have good interpolation for matrices like those used in the webkit transform style there description of how to do it here >>>req
add `d3 zip` function >>>req
allow bound data to be cleared or inspected `data null clears bound data from the current selection `data retrieves the data bound to the current selection as an array see 45 wasn sure if my implementation of `data null is the intended behaviour described in 45 assumed it wasn intended to be the same as `data which would create exit nodes >>>req
color manipulation would like an easier way to generate lighter darker colors as in protovis also it might be nice if d3 hsl built in string conversion returned rgb by default although guess it easy enough to say `d3 rgb hsl >>>req
treemap rounding buggy need to investigate saw some fishy cases negative sizes >>>bug
easier way to transform scales we need an easier way to encapsulate pre and post processing of scales the implementation of `by` in protovis was useful but bit confusing because it returned view on the scale rather than just changing the behavior of the scale object also that affected the input pre processing of the scale but sometimes you might also want to affect the output post processing for example say you want to use quantize scale but what you if you want to do log transform on the input value before quantizing the result similarly what if you want to encapsulate dereferencing particular attribute of your data before passing it through to the scale if you declare scale today you have to dereference the corresponding attribute of your data var d3 scale linear attr function return whereas if we encapsulate the dereferencing we can shorten the definition var d3 scale linear pre function return attr however one of the downsides of this approach is that sometimes you want different views into the scale for example if you want to generate ticks then the input to the scale is number rather than an object with an `x` attribute hence the motivation in protovis to use `by` to create view into the scale another case is post processing the result for example if you have scale that outputs number you might want to encapsulate turning that into an svg transform attribute today that might look like this var d3 scale linear attr transform function return translate whereas if we encapsulate the pre and post processing we can simplify var d3 scale linear pre function return post function return translate attr transform you can imagine the pre processing obsoleting the need for different scale implementations that define transforms for example `d3 scale log` is basically this var d3 scale linear pre math log the only difference is whether pre processing also applies when you specify the domain that would be convenient in some cases but bit tricky in other cases for example where pre processing represents dereferencing an attributethen using `d3 min` and `d3 max` to compute the domain is awkward also it not immediately clear how this pre and post processing would affect scale inversion the `d3 scale log` correctly inverts the log transform when you use the `invert` method if the transform is specified only as pre processing step there no way for the scale implementation to invert it automatically and it not clear how you would implement ticks if the transform is specified generically though perhaps this is motivation to move tick generation to separate component which we ve been considering so as to support text aware tick generation >>>req
add cloud layout you know like wordle http stackoverflow com questions 342687 algorithm to implement something like wordle the hard part will be detecting text collisions efficiently but think we can get the outline data from svg >>>req
segmented lines it be useful to support something like the segmented lines of protovis pretty sure you can do segmented areas using the existing `d3 svg area` and `d3 split` but segmented lines require computing miter joints >>>req
don ignore nan value nodes the hierarchy layout currently ignores any nodes with nonpositive values this is the right approach for space filling layouts that depend on the node value such as the treemap and partition layouts but not for node link layouts such as the tree and cluster layouts >>>bug
faster force layout don use floyd warshall use constraints for links but use barnes hut with charge force for repulsion better support for incremental modification of the graph initialize default position based on links >>>req
floating point test failures on linux i686 tried running the tests on my 32 bit linux i686 system couple of the tests involving trigonometry fail because of what looks like floating point differences the test failures are no big deal to me ll ignore them now but if you want can look at fixing them the usual solution is something like python unittest assertalmostequal but it bit tricky since the tests in question are working on the svg text output of arc and the like here the failures the numeric difference is well below 1e 10 test tests test svg arc tests test svg arc out 2011 04 10 19 13 28 000000000 0000 tests test svg arc actual 2011 04 10 19 23 01 000000000 0000 default m6 123233995736766e 17 1a1 123031769111886e 17 1l0 0z m6 123031769111886e 17 1a1 123031769111886e 17 1l0 0z undefined m6 123233995736766e 17 1a1 123031769111886e 17 1l0 0z undefined m6 123031769111886e 17 1a1 123031769111886e 17 1l0 0z test tests test svg symbol tests test svg symbol out 2011 04 10 19 13 28 000000000 0000 tests test svg symbol actual 2011 04 10 19 23 02 000000000 0000 17 17 type diamond size number m0 0l0 0z 10 m0 9428309563827124l1 6990442448471224 9428309563827124 6990442448471224 0z 10 m0 942830956382712l1 6990442448471226 942830956382712 6990442448471226 0z type square size number m0 0l0 0z 36 36 undefined m0 51351666838205a4 51351666838205 51351666838205 51351666838205a4 51351666838205 51351666838205 51351666838205z circle m0 51351666838205a4 51351666838205 51351666838205 51351666838205a4 51351666838205 51351666838205 51351666838205z cross 366563145999495 7888543819998317h 7888543819998317v 366563145999495h1 7888543819998317v 7888543819998317h5 366563145999495v1 7888543819998317h1 7888543819998317v5 366563145999495h 7888543819998317v1 7888543819998317h 366563145999495z diamond m0 444838872816797l4 298279727294167 444838872816797 298279727294167 0z diamond m0 444838872816797l4 298279727294168 444838872816797 298279727294168 0z square 4l4 4z triangle down m0 26429605180997l6 078685485212741 26429605180997 078685485212741 26429605180997z triangle up m0 26429605180997l6 078685485212741 26429605180997 078685485212741 26429605180997z >>>bug
ability to trigger event handlers manually randometc suggests something like jquery trigger http api jquery com trigger operator the docs suggest it creates proper dom event and dispatches it to the selected elements plural >>>req
various new javascript features things we could use `object keys` for `d3 keys` `function prototype bind` for `d3 rebind` `element classlist` `domtokenlist` however note that this is unsupported for svg >>>req
append text nodes could we support `append text for adding isolated text nodes using span elements isn so bad but proper text nodes would be nice >>>req
error in d3 scale log ticks think on line 34 https github com mbostock d3 blob master src scale log js l34 `n` doesn seem to exist perhaps `log d3 scale logn` has the desired effect >>>bug
data changes are not propagated to event listeners currently event listeners are bound to data and index at the time the `on` operator is applied this sounds like the right thing for the index but not for data if the data changes due to subsequent `data` operator that change should be visible from the event listeners >>>bug
replace google compiler with uglifyjs faster runtime and smaller gzipped sizes looks like win win the only downside is reliance on node js compared with java we rely on node js anyway for testing plus we always publish minified versions so don think this is an issue >>>req
clamping for scales like the option for scales to clamp their input to fall within the specified domain have unfortunate code like this var sr d3 scale linear domain 20 range 100 function speedtoarcradius math min 20 math max return sr rather say var sr d3 scale linear domain 20 clamped range 100 >>>req
polar path interpolation it be nice to have an automatic tween function for d3 svg arc for example think if we had d3 interpolatepolar it could behave like d3 interpolate but it would transform the input cartesian coordinates to polar coordinates interpolate them in polar space and then untransform back to cartesian space however for this to work correctly the interpolator would need to know which numbers are coordinates and which are coordinates think this makes it necessarily specific to interpolating path strings but that probably okay >>>req
uncaught typeerror object has no method replace occurs when using the `classed` operator on svg elements >>>bug
svg web compatibility>>>ms
configurable number of log scale ticks example `d3 scale log domain 1000 range 100 ticks returns 30000000000000004 6000000000000001 7000000000000001 10 20 30 40 50 60 70 80 90 100 200 300 400 500 600 700 800 900 while would have expected only ticks just like the linear scales do>>>req
fix csv parsing of and r>>>bug
setting ordinal scale domain does not recompute range the range must be set after the domain unlike other scales which can be set independently >>>bug
date scales added check to see if date objects are used for the domain of linear scale if so this code makes sure the date math works correctly and new date object is returned >>>req
polar stereographic projection not sure about the naming started off trying to do general stereographic projection but settled on just supporting polar projections for now you can use hemisphere with 1` or 1` to change hemispheres the southern hemisphere is remarkably empty using `d3 radians` which is currently in `albers js` guess this should be moved to `geo js` >>>req
hsl interpolation we need `d3 interpolatehsl` that you could plug into the interpolator for scale for example >>>req
polylinear scales for example d3 scale linear domain 100 100 range red white green >>>req
bipartite graph support for chord layout it be cool if the chord layout supported bipartite graphs seems like it should be possible to convert an nm matrix into corresponding square matrix >>>req
fix d3 array for older browsers this uses the code from sizzle js as suggested in issue 42 it seems slightly annoying to rely on `document documentelement childnodes` being available but guess it the best way to get hold of `nodelist` noticed another use of `array prototype slice` in `src core ease js` should that be updated to use `d3 array` >>>ms
more compact attribute syntax ve been using raphael lately and really like the ability to make set of attributes see the example below does this functionality exist in d3 do you think it ever would d3 way to make simple circle append svg circle attr cx 150 attr cy 140 attr 40 attr fill f00 attr stroke black the way would like to do it append svg circle attr cx 250 cy 240 40 fill f00 stroke black >>>req
svgweb support ve been playing around this afternoon to try and get the streamgraph example working with limited success the following code will create the root svg element and won throw any errors but when it comes to the `vis selectall path data data0 portion it craps out in normal mode in chrome calling this will return bunch of svg path elements when switch on svgweb the root flash element is created but is ultimately blank calling `vis selectall path data data0 just returns an empty array think this has gotten beyond the point where can hope to just tweak few things and get it working the potential for working with d3 and svgweb seems high though since the level of abstraction between the rendered output and the language constructs is so minimal is it priority to support svgweb at all function createroot width height callback if window mmd3counter window mmd3counter window mmd3counter var id mmd3 window mmd3counter var svg document createelementns d3 ns prefix svg svg svg setattribute width width svg setattribute height height svg setattribute id id svg addeventlistener svgload function evt callback d3 select id false if window svgweb window svgweb appendchild svg document body else document body appendchild svg var 20 number of layers 200 number of samples per layer var stream layers var data0 d3 layout stack offset wiggle var data1 d3 layout stack offset wiggle stream layers var color d3 interpolatergb aad 556 var 960 500 mx my d3 max data0 concat data1 function return d3 max function return y0 var area d3 svg area function return mx y0 function return y0 my y1 function return y0 my window onsvgload function console log onsvgload do stuff now console log vis createroot function vis console log path console log vis data0 vis selectall path data data0 enter append svg path attr fill function console log return color math random attr area console log done with path window addeventlistener keypress transition false function transition d3 selectall path data function var data1 data1 data0 return data0 transition delay 100 duration 1500 attr area >>>ms
format negative numbers with thousands grouping `d3 format 100000 returns 100 000 >>>bug
immediate transitions if duration is it would be nice if transitions were applied immediately if the duration were zero or more generally if the delay duration is less than zero currently you have to wait for `settimeout` callback of zero which typically means delay of 10ms and an extra redraw but one difficulty with this approach is that the duration must be set to zero before any operators are defined on the transition the order of operations in the transition will matter >>>req
transition step events and possibly allowing text tweening >>>req
rename map to datum for release `data would return one dimensional array of data for the first group `data array and `data function would compute the data join as today `data null would throw an error as today `datum` is new alias for `map` `datum function would evaluate function for each selected element and set each associated datum as today `datum null would clear the bound data `datum object would assign the same data to all selected elements `datum would return the bound data for the first non null node alias for `node data for release rename `map` to `datum` removing alias >>>req
better ticks we need date ticks at minimum but it would also be nice to have ticks algorithm that considers text metrics so that we can avoid placing overlapping labels >>>req
internet explorer was just looking at how to write vml renderer for ie but noticed few problems `queryselector` and `queryselectorall` aren supported in ie6 and ie7 `array prototype slice call` is called with non jscript object causing it to fail in ie8 in the particular case noticed it was being called with document node list result from `queryselectorall` think `array prototype slice` only works with native `array` objects in ie6 personally not bothered about ie support aside from ie9 of course this is more of note to document couple of things that found in case they re worth fixing in the future >>>bug ms
type error in value interpolation for example d3 selectall transition style color function return d3 hsl math random 360 results in d3 js 585 typeerror rgb 145 255 is not valid argument for in evaluating in d3 js 1539 typeerror undefined is not an object evaluating ik tk call >>>bug
easy way to generate contour maps started on this for protovis https github com jasondavies protovis tree contours but there still bug that need to fix try generating contour map at zero on grid of zeroes ve also written conrec implementation here https github com jasondavies conrec js but paul bourke suggested simply iterating over the mesh and computing the intersections as computers are much faster now than when conrec was devised this approach also works for non uniform grids so this is the approach used in my protovis branch be interested to know if there faster way to do it otherwise ll continue with this approach and port to d3 when get some time >>>req
nested transitions compete for ownership consider the following var foo d3 transition foo foo selectall bar attr attr1 value1 foo select bar baz attr attr2 value2 the second `select` creates new transition which clobbers the previous `selectall` transition >>>bug
animation sequence support add abstraction to simplify staged animations the abstraction would take set of transitions wrapped in function instances and then oversee their sequential execution it should enable easy parameterization of stage durations be cancelable etc two potential cases independent transitions no element level chaining specify function list and list of durations or offsets and run each stage accordingly dependent transitions transitions are chained per element each end next allowing staggering to propagate the transition wrapper function might take next parameter in addition to duration to avoid hard wiring the next transition >>>req
remove event listeners removing listeners via on event null does not always work bug namespaced events for listeners to support multiple listeners would be great >>>req
reselect convenience method reselect which reuses the selector and data bindings >>>req
remove shouldn select the parent node the problem is that if you selectall followed by remove you end up with redundant copies of the parent node which is confusing >>>bug
selection node in similar vein to `selection attr foo we should have `selection node method which returns the first node this is identical to `selection but works as expected when some of the nodes are null and makes the code more readable >>>req
fast singleton empty selection implementations for single node and empty selections this could greatly improve performance >>>perf
filter operator so that we can efficiently reduce the set of selected nodes >>>req
namespaced transitions we need to give transitions names so that one transition can easily cancel an existing transition for the current element perhaps there also way to cancel all transitions of given name filling this as bug because in interaction driven transitions there is currently no way to cancel the current transition to start new one >>>req
quantile scale and quantize quantile scale would be nice >>>req
the `select` operator and data inheritance usually when the `select` operator is run each newly selected node inherits its data from the corresponding node in the original selection however this was recently changed so that if the new selection already hd data it would not inherit data from the original if subnode subnode data subnode data node data however not sure this is what we want first what if the data is an array of numbers or booleans or null rather than undefined this could be very confusing in terms of some of the newly selected nodes inheriting data and some of them not second the above implementation prevents the new selection from inheriting the data even if the original selection has data defined perhaps we should check if the data was set explicitly on the original selection so that it can override what stored in the dom data >>>bug
cross operator for data stack the `cross` operator as in the splom example is very useful for recreating something like the protovis data stack where data from multiple levels in the hierarchy is available in the property functions the implementation is simple if bit confusing take an array `a` to use this array as data as the `y` attribute of each element crossed with the enclosing parent data as the `x` attribute function cross return function var for var length push return another possibility might be to pull the parent data out of the current group in the property function `group parentdata` but we don currently expose the group index `j` or the group itself in the property function we could pass these as two additional arguments to the property function similar to protovis but limited to the immediate enclosing parent but like the current simplicity the extra arguments were frequent source of confusion in protovis yet another possibility is for `parentdata method or similarly `group method that returns the current group changing the node returned by `node etc but that requires keeping state within the selection which don like because of reentrancy issues so like the idea of the cross operator making the access of the parent data more explicit but not sure about the efficiency or the semantics >>>req
headless unit testing framework we should use env js https github com thatcher env js now that supports node >>>bug
monotone interpolation for d3 svg line area not sure yet whether this belongs in the `svg` or `geom` module >>>req
transitions with text d3 tween fails there no `d3 transform text bind` implemented yet >>>bug
tick labels >>>req
transition sub selection should support delay duration etc currently the transition per instance parameters can only be specified on the root level selection of the transition if there is sub selection it does not have delay or duration method defined so it is not possible to customize these transition parameters >>>req
set inner html an `html` method similar to `text` but for setting html content >>>req
setting text null should clear the text content currently it sets the text to the string null instead this is inconsistent with `attr` and `style` >>>bug
svg path utilities we should provide some helper libraries for constructing paths in svg such as arcs areas and lines with spline interpolation >>>req
sorting nodes `sort` operator would be nice for reordering nodes >>>req
toggling classes proposed method `classed name value that allows easier manipulation of the class attribute the given `value` may be specified either as constant boolean or function that returns boolean true value will add the class if not already present false value will remove the class if present >>>req
namespaced event listeners the `on` method should allow namespace similar to jquery `bind` feature this allows multiple event listeners to be registered for the same event type under different namespaces such as click foo and click bar new `off` action should similarly allow de registration of event listeners >>>req
